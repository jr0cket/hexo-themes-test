<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[jr0cket]]></title>
  <subtitle><![CDATA[community developer]]></subtitle>
  <link href="/hexo-themes-test/atom.xml" rel="self"/>
  <link href="http://jr0cket.github.io/hexo-themes-test/"/>
  <updated>2014-06-03T21:29:03.216Z</updated>
  <id>http://jr0cket.github.io/hexo-themes-test/</id>
  
  <author>
    <name><![CDATA[John Stevenson]]></name>
    <email><![CDATA[john@jr0cket.co.uk]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[hexo custom theme - maximising the layout of the website]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/06/hexo-custom-theme---maximising-the-layout-of-the-website/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/06/hexo-custom-theme---maximising-the-layout-of-the-website/</id>
    <published>2014-06-03T14:52:05.000Z</published>
    <updated>2014-06-03T21:25:25.000Z</updated>
    <content type="html"><![CDATA[<p>Whilst I like many aspects of the Hexo theme used to generate static websites, it does seem to have a lot of redundant space.  So here are a few aspects of the them I have changes in order to get more of the actual content showing on the page.</p>
<a id="more"></a>

<h1 id="Scaling_down_the_header_space">Scaling down the header space</h1>
<p>The most obvious occurance is the header image, which takes up a huge part of the screen on the desktop.</p>
<h1 id="Scaling_down_the_image">Scaling down the image</h1>
<h1 id="Changing_the_image">Changing the image</h1>
<p>The most obvious way to make your website look different from all the other Hexo generated websites is to change the header image.</p>
<h2 id="Header_image_with_my_cat">Header image with my cat</h2>
<p>Very personal, not neccessarily representative of the website content though.</p>
<p>Also not that easy to see the text in the top navigation bar, as the text and icons are white and the background image is light.</p>
<p>Boosting the opacity of the naviation text and icons makes them stand out better on the lighter background.</p>
<h3 id="Chaning_Navbar_text_opacity">Chaning Navbar text opacity</h3>
<p>The CSS definition called nav-link contains an opacity value.  This was changed from 0.6 (60 percent) to 0.8 (80 percent) to make the navbar links more visible when hovering over them with the mouse.</p>
<figure class="highlight css"><figcaption><span>source/css/_partial/header.styl </span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>$<span class="tag">nav-link</span>
  <span class="tag">float</span>: <span class="tag">left</span>
  <span class="tag">color</span>: <span class="id">#fff</span>
  <span class="tag">opacity</span>: 0<span class="class">.8</span>
  <span class="tag">text-decoration</span>: <span class="tag">none</span>
  <span class="tag">text-shadow</span>: 0 1<span class="tag">px</span> <span class="tag">rgba</span>(0, 0, 0, 0<span class="class">.2</span>)
  <span class="tag">transition</span>: <span class="tag">opacity</span> 0<span class="class">.2s</span>
  <span class="tag">display</span>: <span class="tag">block</span>
  <span class="tag">padding</span>: 20<span class="tag">px</span> 15<span class="tag">px</span>
  &amp;<span class="pseudo">:hover</span>
    <span class="tag">opacity</span>: 1
</pre></td></tr></table></figure>



<h2 id="Increase_the_size_of_the_logo_text">Increase the size of the logo text</h2>
<p>I change my logo to say “community developer” and wanted it to take up less room in the header.  So I found the CSS declaration for <code>logo-text</code> and increased the font weight from 300 to 700</p>
<figure class="highlight css"><figcaption><span>source/css/_partial/header.styl </span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>$<span class="tag">logo-text</span>
  <span class="tag">text-decoration</span>: <span class="tag">none</span>
  <span class="tag">color</span>: <span class="id">#fff</span>
  <span class="tag">font-weight</span>: 300
  <span class="tag">text-shadow</span>: 0 1<span class="tag">px</span> 4<span class="tag">px</span> <span class="tag">rgba</span>(0, 0, 0, 0<span class="class">.3</span>)
</pre></td></tr></table></figure>


<p> The same for the main-nav-link text</p>
<figure class="highlight css"><figcaption><span>source/css/_partial/header.styl </span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="class">.main-nav-link</span>
  <span class="at_rule">@<span class="keyword">extend</span> $nav-link
  font-weight: <span class="number">700</span>
  letter-spacing: <span class="number">1</span>px
  @media mq-mobile
    display: none</span>
</pre></td></tr></table></figure>



<h2 id="More_navbar_changes">More navbar changes</h2>
<ul>
<li>Reduced the banner height from 300px to 120px </li>
<li>reduced the logo size from 40px to 32pd</li>
<li>changed banner-url to point to a different image</li>
</ul>
<figure class="highlight css"><figcaption><span>source/css/_variables.styl </span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>// Header
logo-size = 32px
subtitle-size = 16px
banner-height = 120px
banner-url = "images/cat-eyes-and-paw.png"
</pre></td></tr></table></figure>



<h3 id="Previous_values">Previous values</h3>
<p>// Header<br>logo-size = 40px<br>subtitle-size = 16px<br>banner-height = 300px<br>banner-url = “images/banner.jpg”</p>
]]></content>
    <summary type="html"><![CDATA[<p>Whilst I like many aspects of the Hexo theme used to generate static websites, it does seem to have a lot of redundant space.  So here are a few aspects of the them I have changes in order to get more of the actual content showing on the page.</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo custom theme - adding navbar icon links using fontawesome]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/06/hexo-custom-theme---adding-navbar-icon-links-using-fontawesome/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/06/hexo-custom-theme---adding-navbar-icon-links-using-fontawesome/</id>
    <published>2014-06-01T18:50:09.000Z</published>
    <updated>2014-06-01T19:57:11.000Z</updated>
    <content type="html"><![CDATA[<img src="http://hexo.io/css/images/logo.svg" class="img-thumbnail">


<p><a href="http://fortawesome.github.io/Font-Awesome/" target="_blank">FontAwesome</a> provides a lot of icons you can use in your website instead of including image logos of various sizes.  There are icons for twitter, linkedin, Github and RSS feeds.  Using these icons keeps your website fast on any device or network.</p>
<p>I’ll explain how I configured the standard <a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank">Hexo Landscape theme</a> to add icons in my blog website navigation bar, each icon linking to the developer related sites I use such as Github and Twitter.</p>
<a id="more"></a> 

<h1 id="Adding_Icons_Styles_to_the_CSS">Adding Icons Styles to the CSS</h1>
<p>The Hexo theme already had two CSS ID’s defined in the header styles, providing icons for the RSS feed and search button.  I simpy copied these style definitions for the addtional icons I wanted, giving each icon its own unique CSS ID.</p>
<p>To get the correct code for the FontAwesome icon I wanted, I refered to this <a href="http://astronautweb.co/snippet/font-awesome/" target="_blank">list of CSS content values</a>.</p>
<p>I updated the <code>source/css/_partial/header.styl</code> file to include the additional icon styles.</p>
<figure class="highlight css"><figcaption><span>source/css/_partial/header.styl </span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="id">#nav-rss-link</span>
  &amp;<span class="pseudo">:before</span>
    <span class="tag">content</span>: "\<span class="tag">f09e</span>"

<span class="id">#nav-twitter-link</span>
  &amp;<span class="pseudo">:before</span>
    <span class="tag">content</span>: "\<span class="tag">f099</span>"

<span class="id">#nav-linkedin-link</span>
  &amp;<span class="pseudo">:before</span>
    <span class="tag">content</span>: "\<span class="tag">f0e1</span>"

<span class="id">#nav-github-link</span>
  &amp;<span class="pseudo">:before</span>
    <span class="tag">content</span>: "\<span class="tag">f113</span>"

<span class="id">#nav-search-btn</span>
  &amp;<span class="pseudo">:before</span>
    <span class="tag">content</span>: "\<span class="tag">f002</span>"

</pre></td></tr></table></figure>



<h1 id="Adding_Icons_to_the_header_layout">Adding Icons to the header layout</h1>
<p>Now the icon style are defined, we need to include them in the navigation bar layout.  This navigation bar layout is defined in the file <code>layout/_partial/header.ejs</code>, see lines 3,4,and 5 below: </p>
<figure class="highlight javascript"><figcaption><span>layout/_partial/header.styl </span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>      &lt;nav id=<span class="string">"sub-nav"</span>&gt;
        <span class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"nav-github-link"</span> <span class="attribute">class</span>=<span class="value">"nav-icon"</span> <span class="attribute">href</span>=<span class="value">"https://github.com/jr0cket"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"nav-linkedin-link"</span> <span class="attribute">class</span>=<span class="value">"nav-icon"</span> <span class="attribute">href</span>=<span class="value">"https://uk.linkedin.com/in/jr0cket"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"nav-twitter-link"</span> <span class="attribute">class</span>=<span class="value">"nav-icon"</span> <span class="attribute">href</span>=<span class="value">"https://twitter.com/jr0cket"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
        <span class="vbscript">&lt;% <span class="keyword">if</span> (theme.rss){ %&gt;</span>
          <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"nav-rss-link"</span> <span class="attribute">class</span>=<span class="value">"nav-icon"</span> <span class="attribute">href</span>=<span class="value">"&lt;%- theme.rss %&gt;"</span> <span class="attribute">title</span>=<span class="value">"RSS Feed"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
        <span class="vbscript">&lt;% } %&gt;</span>
        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"nav-search-btn"</span> <span class="attribute">class</span>=<span class="value">"nav-icon"</span> <span class="attribute">title</span>=<span class="value">"Search"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">nav</span>&gt;</span></span>
</pre></td></tr></table></figure>


<h1 id="The_finished_result">The finished result</h1>
<p>As soon as both files are saved, I can see the results as soon as I refresh the browser as I am running <code>hexo server</code>.  </p>
<p>My navigation bar now has more icons displayed, each icon linking to my other developer websites</p>
<img src="https://lh6.googleusercontent.com/-P-RG6-WX_B0/U4uBr9BuskI/AAAAAAAAOTI/TYhe9laTlyg/w279-h53-no/hexo-theme-navigation-bar-extra-icons.png" class="img-code">


<p>The navigation bar has a link for my Github, LinkedIn and Twitter profile pages.</p>
<p>Thank you<br><a href="https://twitter.com/jr0cket" target="_blank">@jr0cket</a></p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://hexo.io/css/images/logo.svg" class="img-thumbnail">


<p><a href="http://fortawesome.github.io/Font-Awesome/" target="_blank">FontAwesome</a> provides a lot of icons you can use in your website instead of including image logos of various sizes.  There are icons for twitter, linkedin, Github and RSS feeds.  Using these icons keeps your website fast on any device or network.</p>
<p>I’ll explain how I configured the standard <a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank">Hexo Landscape theme</a> to add icons in my blog website navigation bar, each icon linking to the developer related sites I use such as Github and Twitter.</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="Blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/Blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Managing Hexo blog content with Git Submodules]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/05/managing-hexo-blog-content-with-git-submodules/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/05/managing-hexo-blog-content-with-git-submodules/</id>
    <published>2014-05-27T06:09:44.000Z</published>
    <updated>2014-06-01T20:11:18.000Z</updated>
    <content type="html"><![CDATA[<img src="http://hexo.io/css/images/logo.svg" class="img-thumbnail">


<p> You can use Git to manage version of your content effectively.  You can also use Git to manage any changes you make to the theme you use.</p>
<p>Rather than keep all these seperate changes in one repository, here are some examples of using Git submodules to manage your theme and content changes seperately.</p>
<a id="more"></a>

<blockquote>
<p>In previous article I gave an [overview of Git Submodules] and how to [get started with Hexo]</p>
</blockquote>
<img src="https://lh3.googleusercontent.com/-VuoPUgPuNV8/U4uIHw5YjoI/AAAAAAAAOTs/7PF8HvWrwIQ/w320-h240-no/git-submodules-concept.png" class="img-code">


]]></content>
    <summary type="html"><![CDATA[<img src="http://hexo.io/css/images/logo.svg" class="img-thumbnail">


<p> You can use Git to manage version of your content effectively.  You can also use Git to manage any changes you make to the theme you use.</p>
<p>Rather than keep all these seperate changes in one repository, here are some examples of using Git submodules to manage your theme and content changes seperately.</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="git" scheme="http://jr0cket.github.io/hexo-themes-test/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git submodules pros and cons]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/05/git-submodules-pros-and-cons/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/05/git-submodules-pros-and-cons/</id>
    <published>2014-05-26T14:14:42.000Z</published>
    <updated>2014-05-27T06:18:40.000Z</updated>
    <content type="html"><![CDATA[<p>Git is the version control system of choice by most developers, however when it comes to Git Submodules there is some contention as to their value.  I will explain what Git Submodules as well as why some developers are using them and some developers warn you not to.</p>
<a id="more"></a>

<h1 id="Git_Submodules_Overview">Git Submodules Overview</h1>
<p>A submodule is a subdirectory of another git repository, which is actually a full and seperate git repository itself.  You can have many submodules within a git repository.</p>
<p>Submodules are useful if you have a code or content in one git repository that you want to use with several other git managed projects, yet you still want to keep the change history seperate.  For example, you may be using a library that is under active development and you need to develop you code along with any changes.</p>
<p>Git Submodules allow you to manage two or more repositories as though they were one.  Each repository maintains its own seperate change history and submodules are updated independently of the main repository.   </p>
<img class="img-code images/git-submodules-concept.png">


<h2 id="Examples_of_submodules_in_actions">Examples of submodules in actions</h2>
<p>I use a project calle Prezto which provides a great setup for using Zsh.  The Prezto project pulls in several other projects, each of which configures specific features of Zsh.  Rather than pull all the code into one repository, submodules means that updates from the other projects are easily incorporated into the main Prezto project.</p>
<p>I use a project called Hexo, a static website and blog generator.  Hexo provides a default theme which I customised to make my websites more unique.  This custom theme will be used across many Hexo website projects, I’ll also be updating the theme as I create more websites.  In order to manage theme updates across all my Hexo project I will add the theme as a submodule to each Hexo website project.    </p>
<h2 id="Git_Submodules_usage">Git Submodules usage</h2>
<p>To start using git submodules you first need a Git repository, this can be a new repository or an existing one.  Lets call this the <em>main repository</em>.</p>
<p>In the root of the main repository, you add a submodule using the <code>git submodule add</code> command as follows:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>git submodule  add -b &lt;branch&gt; --name &lt;name&gt;  &lt;repository&gt;

git submodule add &lt;repository-url&gt; &lt;sub-directory-name&gt;

git submodule add git://github.com/chneukirchen/rack.git rack

git submodule add -b master --name lib/rss-feed https://...
</pre></td></tr></table></figure>


<p>In the man repository you can now see a directory called … [TODO: Is the directory named after <name> ?]</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>git submodule [--quiet] status [--cached] [--recursive] [--] [&lt;path&gt;...]
</pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>git submodule [--quiet] init [--] [&lt;path&gt;...]
</pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>git submodule [--quiet] update [--init] [--remote] [-N|--no-fetch]
</pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>git submodule [--quiet] summary [--cached|--files] [(-n|--summary-limit) &lt;n&gt;]
</pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>git submodule [--quiet] sync [--] [&lt;path&gt;...]
</pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>git submodule [--quiet] foreach [--recursive] &lt;command&gt;
</pre></td></tr></table></figure>



<p>To see the full list of options, please read the <a href="http://git-scm.com/docs/git-submodule" target="_blank">Git Submodules onlne man pages</a>.</p>
<h1 id="A_simple_example_of_Git_Submodules">A simple example of Git Submodules</h1>
<h1 id="Reasons_not_to_use_Git_Submodules">Reasons not to use Git Submodules</h1>
<p>Git Submodules add complexity to your version control system and it can be easy to mess up commits and put them into the wrong repository [TODO: is that right?]</p>
<h1 id="In_Summary">In Summary</h1>
<p><a href="http://git-scm.com/docs/git-submodule" target="_blank">Git Submodules onlne man pages</a></p>
]]></content>
    <summary type="html"><![CDATA[<p>Git is the version control system of choice by most developers, however when it comes to Git Submodules there is some contention as to their value.  I will explain what Git Submodules as well as why some developers are using them and some developers warn you not to.</p>
]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Migrating articles to Hexo from blogger.com]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/04/migrating-articles-to-hexo-from-bloggercom/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/04/migrating-articles-to-hexo-from-bloggercom/</id>
    <published>2014-04-20T16:27:21.000Z</published>
    <updated>2014-05-23T21:58:10.000Z</updated>
    <content type="html"><![CDATA[<p>Writing articles with Blogger.com had become slow and a little frustrating, so I am moving to Hexo.io so I can write articles anywhere I have a text editor (usually Emacs).  Hexo also creates a responsive and fast website, so when people want to read the articles (including myself when I have forgotten something) then they can do so quickly and across multiple devices.</p>
<p>So how do I get all of that content I created out of Blogger and into Hexo.  Luckily Hexo has a migration tool to make things easier</p>
<a id="more"></a>

<h2 id="Hexo_migration_package">Hexo migration package</h2>
<p>Hexo has a seperate tool called <code>hexo-migrator</code> to pull in content from an RSS feed and there is a more specific migrator for Wordpress.  These migrators are installed as an npm package just like any other: </p>
<pre><code>npm install hexo<span class="attribute">-migrator</span> <span class="attribute">-g</span>
</code></pre><p>Unforntunatley the npm packaged version of hexo-migrator failed when I tried to import from blogger, regardless of whether I used the blog URL or by downloading the XML file generated by the RSS feed.  The error I got was already reported as <a href="https://github.com/hexojs/hexo-migrator-rss/issues" target="_blank">an issue on the hexo-migrator Github site</a> and a fix already applied.  This fix had not yet been packaged up as a new npm version at the time of writing.</p>
<h3 id="Hexo_migration_from_Github">Hexo migration from Github</h3>
<p>As a fix for the Blogger import problem exists in the Github repository, I installed the hexo migration tool directly from there.  Node package manager allows you to install directly from a Github repository (handy when someone has not patch an npm package yet).  So to install the latest version of hexo-migrator, I used the command:</p>
<pre><code>npm <span class="keyword">install</span> <span class="string">"git+https://github.com/hexojs/hexo-migrator-rss.git"</span>
</code></pre><p>I used the https address for the Github repository as I dont have SSH access.  However, to work you also have to put <strong>git+</strong> infront of the repository address for npm to work.  I am assuming <strong>git+</strong> tells npm that we are pulling from a github repository rather than a regular file system.</p>
<h2 id="Running_the_migration">Running the migration</h2>
<p>The migration to is very simple to use, simply run <code>hexo migrate</code> specifiying the type of input, <code>rss</code> and the location of your content.  In my case I just pulled the Blogger content directly from the website, although you could download the XML code generated by the RSS feed links and save them as a file for importing. following command and point it at the RSS feed of your website.  </p>
<p>I created a new hexo site specifically to import blogger posts, so I would not interfeir whith the posts that I had already written using Hexo.  So if everything went wrong I could easily delete the new site and still have my new posts running. </p>
<p>To import content directly from my blogger site into a new hexo project I used the following commands:</p>
<pre><code>hexo init hexo<span class="attribute">-blogger</span><span class="attribute">-import</span>
cd hexo<span class="attribute">-blogger</span><span class="attribute">-import</span>
hexo migrate rss http:<span class="comment">//blog.jr0cket.co.uk/default?alt=rss</span>
hexo server
</code></pre><p>It worked, brilliant.  I have a whole bunch of migrated articles in <strong>source/_posts/</strong> folder.  Running the <code>hexo server</code> allowed my to quickly see the results.</p>
<h2 id="Oh_not_everything_is_there">Oh not everything is there</h2>
<p>Whilst the hexo migration tool successfully grabbed articles from my blog, it only got the first 25 posts.  I have about 200 posts so my excitement was short lived.  It turns out that this is not a problem with the hexo migration tool, but a problem with the RSS feed from blogger.</p>
<p>I clicked the RSS link on the blogger website and looking at the XML (a horible thing to do) I saw that it was only giving me the first 25 posts.  </p>
<h2 id="Migration_by_labels">Migration by labels</h2>
<p>Checking on the sites I syndicate some of my blogs too, I noticed a different form for the RSS web address (URL).  I share selective posts with <a href="http://planet.clojure.in/" target="_blank">Planet Clojure</a> and <a href="http://planet.emacsen.org/" target="_blank">Planet Emacsen</a>. this is done using specific blogger labels (aka tags) (i.e. PlanetClojure, PlanetEmacsen).  These RSS syndication sites were given the following RSS URL’s</p>
<pre><code><span class="label">http:</span>//blog<span class="preprocessor">.jr</span>0cket<span class="preprocessor">.co</span><span class="preprocessor">.uk</span>/feeds/posts/default/-/PlanetClojure
<span class="label">http:</span>//blog<span class="preprocessor">.jr</span>0cket<span class="preprocessor">.co</span><span class="preprocessor">.uk</span>/feeds/posts/default/-/PlanetEmacsen
</code></pre><p>So by using the different labels (Blogger calls tags labels) I could pull out more posts from blogger, even though each request would only return a maximum of 25 posts.  So instead of the default rss feed used in the first hexo migration, I used the following commands:</p>
<pre><code>hexo migrate rss http://blog<span class="preprocessor">.jr</span>0cket<span class="preprocessor">.co</span><span class="preprocessor">.uk</span>/-/Clojure
hexo migrate rss http://blog<span class="preprocessor">.jr</span>0cket<span class="preprocessor">.co</span><span class="preprocessor">.uk</span>/-/Emacs
hexo migrate rss http://blog<span class="preprocessor">.jr</span>0cket<span class="preprocessor">.co</span><span class="preprocessor">.uk</span>/-/Ubuntu
hexo migrate rss http://blog<span class="preprocessor">.jr</span>0cket<span class="preprocessor">.co</span><span class="preprocessor">.uk</span>/-/Agile
hexo migrate rss http://blog<span class="preprocessor">.jr</span>0cket<span class="preprocessor">.co</span><span class="preprocessor">.uk</span>/-/Kanban
</code></pre><p>So I carried on for each blogger label I had defined on my post until I thought I had most of the posts migrated.  Not perfect, but until I know how to get blogger to give me more than 25 posts from its RSS feed that will have to do.</p>
<h2 id="Testing_the_migrated_content">Testing the migrated content</h2>
<p>As I was already running <code>hexo server</code> then I could see the results as I was importing each posts from a partiular blogger lable.  All I needed to do was refresh the browser each time and click on the relevant tag in the tag cloud sidebar.  </p>
<p>If you are not running the server during the migration, you can start it by using the following command in the root of your hexo project:</p>
<pre><code>hexo <span class="keyword">server</span> 
</code></pre><p>Now open your browser at <a href="http://localhost:4000" target="_blank">http://localhost:4000</a> and see the results of the migration.</p>
<p>Each of the posts I migrated is in my blog, although the tags need tidying up (I wasnt very consistent in blogger).  The great thing is that all the posts are in date order, as the published date of each blog was put into each markdown file generated by the migration.</p>
<h2 id="Migration_isnt_perfect">Migration isnt perfect</h2>
<p>Whist my articles were copied over to markdown files okay, some of my post brought along with them additional styles (div’s, class styles, non-breaking spaces, etc) and other artefacts that messed up the styles that Hexo applies.  </p>
<p>Some of the styling for headers and subheaders is using the markdown notation for bold, rather than heading.  Headers in particular are a good thing to correct, as search engines base some of the articles relevance on those headers.</p>
<p>With some of the migrated posts I open them up in an editor and delete any offending styling that came with them.  To tell which ones to open, I use the Unix command <code>grep</code> to find which of my posts have <strong>&lt;div</strong> in their text:</p>
<pre><code>grep <span class="string">"&lt;div"</span> <span class="built_in">source</span>/_posts/* 
</code></pre><p>It turns out that most of my posts do, so if I want to see which ones I really need to fix then it probably easiest to look at the locally running website created by <code>hexo server</code>.  So I opened my browser at <a href="http://localhost:4000" target="_blank">http://localhost:4000</a> and had a look at the posts to see which ones needed the most attention.</p>
<p>My basic strategy was to work from the most recent blog post, working backwards until I didnt care about any older posts.</p>
<h2 id="Updating_Categories_and_Tags">Updating Categories and Tags</h2>
<p>The Hexo rss migrator pulled in all the tags (labels) form my posts on Blogger and listed them correctly in the frontmatter of each post.  </p>
<p>Whilst editing the posts to remove the rogue style code, it was a chance to refine the tags I used and select a category for each post.  Using the local hexo server, it was quite quick to refine the tags I used by looking all all the words in the tag cloud sidebar.  Where I had used similar tags I could just pick one to make it easier and simpler to find the most relevant content on the site.</p>
<h2 id="Adding_Summary_breaks">Adding Summary breaks</h2>
<p>A nice feature of Hexo is that you can define how much of a summary view you want to have with each article.  The summary view is the main view of the blog and shows the title and the first part of your article.</p>
<p>You define where the summary view ends by using the following syntax in the article markdown file:</p>
<pre><code><span class="comment">&lt;!-- more --&gt;</span>
</code></pre><p>This is something you need to add manually to each article [TODO: check if there is a tool to do this], so if you have a lot of posts it may take a little while.  However it does help your audience (and yourself) scan through your content quickly.  </p>
<p>If you have a lot of older posts you are importing, then its not going to be a big problem as they will be many pages into your blog summary view. </p>
<h2 id="Images_still_on_Blogger">Images still on Blogger</h2>
<img src="https://lh5.googleusercontent.com/-2r7nkB71SpM/AAAAAAAAAAI/AAAAAAAAqOk/ea27J5tj5Mc/photo.jpg" class="img-topic">


<p>The migration is not yet finished, even after I tidy up my posts.  Many of the images in my posts are stored in Blogger, which is actually Google picasa and now Google Plus photos.  Again there is another hexo tool called <a href="https://github.com/akfish/hexo-migrator-image" target="_blank">hexo-migrator-image</a> which will copy all the remote images to your local filesystem and fix your links (hopefully).</p>
<p>Install hexo-migrator-image using the following command:</p>
<pre><code>npm install hexo<span class="attribute">-migrator</span><span class="attribute">-image</span>
</code></pre><p>Then run the hexo-migrator-image command and wait for all the images to download.</p>
<h3 id="Imaging_importing_was_not_so_successful">Imaging importing was not so successful</h3>
<p>The image migrator does not like https links and I had quite a lot of them.  When the image migrator hits an https link it just crashes too.</p>
<p>Even after changing all the https links to http the results were not as expected.  Whilst images had been copied to the local filespace, the names were all changed to long numbers rather than being the original descriptive filenames.  To compound the issue, the links in the posts were not updated with to point to the local images.</p>
<blockquote>
<p>I wonder if the hexo image migrator failed because the images were all within hypertext ancor links (a href’s).</p>
</blockquote>
<p>Rather than wrestle with the hexo image migrator, I decided to leave the images where they were on Google Plus.  </p>
<h2 id="Github_is_not_great_for_images">Github is not great for images</h2>
<img src="https://assets-cdn.github.com/images/modules/logos_page/Octocat.png" class="img-topic">

<p>There is not a lot of advantage putting your images in Github, except that they are right there where the rest of your website is.  However, using a good image repository that acts like a Content Delivery Network (CDN) should give you the same amount of speed and not waste space in the Github repository.</p>
<p>By keeping images out it also makes your Git repository quicker to fork and clone</p>
<p>So I will keep all my images on Google Plus.  Any photos I take with my Android phone end up on Google Plus anyway, so it makes sense to keep all my images there.</p>
<h2 id="Final_migration_check">Final migration check</h2>
<p>As a final sanity check that everything has been migrated correctly, I ran the <a href="https://github.com/sergiolepore/hexo-broken-link-checker" target="_blank">hexo-broken-link-checker</a>.  This Hexo plugin detects links that don’t work, missing images and redirects.</p>
<p>As I occasionally link to my own posts, it was good to check that these still links still worked.</p>
<h2 id="In_Summary">In Summary</h2>
<p>Although I had a bit of editing of my blog posts after the migration, it was worth it to have all my blog content in markdown.  Now I can manage my posts much easier and do any updates easily in my favourite editor, Emacs.</p>
<p>Thank you<br><a href="https://twitter.com/jr0cket" target="_blank">@jr0cket</a></p>
]]></content>
    <summary type="html"><![CDATA[<p>Writing articles with Blogger.com had become slow and a little frustrating, so I am moving to Hexo.io so I can write articles anywhere I have a text editor (usually Emacs).  Hexo also creates a responsive and fast website, so when people want to read the articles (including myself when I have forgotten something) then they can do so quickly and across multiple devices.</p>
<p>So how do I get all of that content I created out of Blogger and into Hexo.  Luckily Hexo has a migration tool to make things easier</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="migration" scheme="http://jr0cket.github.io/hexo-themes-test/tags/migration/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo theme tweaks - showing articles as titles only]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/04/hexo-theme-tweaks---showing-articles-as-titles-only/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/04/hexo-theme-tweaks---showing-articles-as-titles-only/</id>
    <published>2014-04-16T08:59:33.000Z</published>
    <updated>2014-04-16T22:56:56.000Z</updated>
    <content type="html"><![CDATA[<p>Hexo displays posts in a summary format by default, showing the title and content of the article up to the point where the <code>more</code> marker is used:</p>
<pre><code><span class="comment">&lt;!-- more --&gt;</span>
</code></pre><p>I like this summary format for the main page as its where people tend to browse a little more and usually want a little more information to help them decide if they want to read the whole article.  </p>
<p>[TODO: Insert picture of summary layout]</p>
<p>However when someone selects the archive, category or tags section, they are most likely looking for something specific and so just showing the titles of the posts helps them scan the articles quickly.</p>
<p>So this article we will cover how to modify the default Hexo theme, landscape, to show summar and title only views.</p>
<a id="more"></a>

<h2 id="Understanding_the_layout">Understanding the layout</h2>
<p>Layout of the page is defined mainly in <a href="https://github.com/visionmedia/ejs" target="_blank">EJS</a> format and then imported via the <code>theme/landscape/source/css/style.styl</code> file that is used to pull together a single <code>style.css</code> file for the whole site (once the site is generated).</p>
<p>All pages use the default <code>index.ejs</code> [is it index or layout - check the hexo docs] as a base template, over-riding it where desired.  For the front page of the blog this is fine.</p>
<p>The archive, categories and tag pages all use the same code, however these are the files we are going to change</p>
<pre><code>theme/landscape/layouts/_partial/archive<span class="preprocessor">.ejs</span>
theme/landscape/layouts/_partial/category<span class="preprocessor">.ejs</span>
theme/landscape/layouts/_partial/tag<span class="preprocessor">.ejs</span>
</code></pre><p>Lets first find out what changes need to be made and in what file.</p>
<h2 id="Using_Chrome_developer_tools">Using Chrome developer tools</h2>
<p>You can use the Chrome developer tools to find out the secion of CSS that controls the displaying of the summary part of the article.</p>
<p>It turns out this summary part of the content is managed by a section called <code>article-entry</code>.  This is included in the file <code>theme/landscape/layouts/_partial/article.ejs</code>:</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"article-entry"</span> <span class="attribute">itemprop</span>=<span class="value">"articleBody"</span>&gt;</span>
  <span class="vbscript">&lt;% <span class="keyword">if</span> (post.excerpt &amp;&amp; index){ %&gt;</span>
    <span class="vbscript">&lt;%- post.excerpt %&gt;</span>
    <span class="vbscript">&lt;% <span class="keyword">if</span> (theme.excerpt_link){ %&gt;</span>
      <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"article-more-link"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"&lt;%- config.root %&gt;&lt;%- post.path %&gt;#more"</span>&gt;</span><span class="vbscript">&lt;%= theme.excerpt_link %&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="vbscript">&lt;% } %&gt;</span>
</code></pre><p>I tested that this was the code rendering the article summary using the Chrome developer tools.  I right-clicked on the first line of the code, the opening <strong>div</strong> tag, and selected <code>delete node</code> </p>
<img src="/hexo-themes-test/images/hexo-theme-tweak-devtools-delete-node.png">



<h2 id="Making_the_changes_to_the_theme">Making the changes to the theme</h2>
<p>There may be better approaches than I have taken, however mine is fairly straight formward.  I simply take a copy of the archive.ejs file and called it archive-titles.ejs.</p>
<p>I then remove the above code completely from the <code>articles-titles.ejs</code> file and call that file instead from the <code>archive.ejs</code>, <code>category.ejs</code> and <code>tag.ejs</code> files.</p>
<p>So the archive, catagory and tag files are changed calling the archive.ejs:</p>
<pre><code>&lt;%- <span class="keyword">partial</span>(<span class="string">'_partial/archive'</span>, {pagination: <span class="number">2</span>, index: <span class="keyword">true</span>}) %&gt;
</code></pre><p>and now call <code>archive-titles.ejs</code>:</p>
<pre><code>&lt;<span class="string">%- partial('_partial/archive-</span>titles<span class="string">', {pagination: config.archive, index: true}) %&gt;</span>
</code></pre><p>With <code>hexo server</code> running these changes are picked up straight away, so we can easily see if the changes worked as expected</p>
<p>[TODO: image of changed archive]</p>
]]></content>
    <summary type="html"><![CDATA[<p>Hexo displays posts in a summary format by default, showing the title and content of the article up to the point where the <code>more</code> marker is used:</p>
<pre><code><span class="comment">&lt;!-- more --&gt;</span>
</code></pre><p>I like this summary format for the main page as its where people tend to browse a little more and usually want a little more information to help them decide if they want to read the whole article.  </p>
<p>[TODO: Insert picture of summary layout]</p>
<p>However when someone selects the archive, category or tags section, they are most likely looking for something specific and so just showing the titles of the posts helps them scan the articles quickly.</p>
<p>So this article we will cover how to modify the default Hexo theme, landscape, to show summar and title only views.</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="themes" scheme="http://jr0cket.github.io/hexo-themes-test/tags/themes/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Getting started with Hexo - a modern static site generator]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/04/getting-started-with-hexo---a-modern-static-site-generator/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/04/getting-started-with-hexo---a-modern-static-site-generator/</id>
    <published>2014-04-12T14:13:19.000Z</published>
    <updated>2014-04-15T19:09:18.000Z</updated>
    <content type="html"><![CDATA[<p>Hexo is a modern static website generator &amp; bloging platform written in Node.js. This is a quick guide to get going:</p>
<a id="more"></a>

<h2 id="Install_Node-js">Install Node.js</h2>
<p>If you havent already got node, go to <a href="http://nodejs.org/" target="_blank">http://nodejs.org/</a> and follow the instructions.  My own preference is to install node into a folder called <strong>app</strong> in my home folder.</p>
<h2 id="Install_Emacs_(optional)">Install Emacs (optional)</h2>
<p>This is not a requirement for Hexo. although Emacs and Emacs Live gives a fantastic experience when writing markdown content.  Emacs Live syntactically highlights your markdown content, so headings, links, bold and italic styles are shown in as you type your content.  Italic style content even displays in italic.</p>
<h2 id="Install_Hexo">Install Hexo</h2>
<p>There is really good documentation on the <a href="http://hexo.io" target="_blank">hexo.io</a> website, althought all you need to do to install is:</p>
<pre><code>npm <span class="keyword">install</span> hexo -g
</code></pre><h2 id="Create_a_Hexo_projects">Create a Hexo projects</h2>
<p>Create a new hexo project, I usually do this in a folder called projects in my home folder:</p>
<pre><code>hexo init <span class="keyword">my</span>-project-<span class="property">name</span>
cd <span class="keyword">my</span>-project-<span class="property">name</span>
</code></pre><p>This creates a new hexo project in a folder called <strong>my-project-name</strong>, so use what ever name you wish here.</p>
<h2 id="Configure_Hexo_to_your_will">Configure Hexo to your will</h2>
<p>[TODO] - just add the basics and come back for deployment.</p>
<h2 id="Version_your_Hexo_project">Version your Hexo project</h2>
<p>If you are deploying your website to Github pages then the generated content is versioned by Github.  However, the markdown content for your websites and any configuration changes you make will not be versioned.</p>
<p>If you are going to use this site for any important content, I’d recommend putting the Hexo project into a github repository (or similar service).  This will also make it easier to migrate your content to an alternative tool than Hexo.</p>
<h2 id="Running_a_local_Hexo_server">Running a local Hexo server</h2>
<p>Although you wont have much content at this stage, you can still see what the website looks like by running Hexo server locally:</p>
<pre><code>hexo <span class="keyword">server</span> 
</code></pre><p>By default this runs a node application on port 4000, so open your browser at: <a href="http://localhost:4000/" target="_blank">http://localhost:4000/</a></p>
<h2 id="Adding_blog_posts_to_your_Hexo_projects">Adding blog posts to your Hexo projects</h2>
<p>The easiest way to add a new blog post is to let Hexo generate it for you from its template, this will ensure your post picks up the current them and any blog specific styling:</p>
<pre><code>hexo <span class="keyword">new</span> <span class="string">"name of my blog post with full on SEO"</span>
</code></pre><p>Hexo will return with the full path to the file it has created for you.  Edit this file in your favourite editor (surely this is Emacs).  Becareful to add your content after the <strong>frontmatter</strong>, this is the first few lines that define the title, date, style and tags used for the post.  Add your markdown </p>
<h2 id="Adding_images_to_your_posts">Adding images to your posts</h2>
<p>If you are going to use a great many images on your website (1,000’s), you may be better off keeping those images in some kind of image service (Google+ photos) or content delivery network(CDN).</p>
<p>Using a CDN will incure a small cost, but unless are using terrabytes of bandwidth to serve up your images this will only a few dollars a year.  Examples of CDNs <a href="http://aws.amazon.com/cloudfront/" target="_blank">Amazon CloudFront</a>, <a href="http://www.akamai.com/" target="_blank">Akamai Technologies</a>, <a href="http://www.edgecast.com/" target="_blank">EdgeCast</a>, or <a href="http://www.level3.com/" target="_blank">level3</a>.  Alternatively you could use an <a href="http://aws.amazon.com/s3/" target="_blank">Amazon S3 bucket</a>.</p>
]]></content>
    <summary type="html"><![CDATA[<p>Hexo is a modern static website generator &amp; bloging platform written in Node.js. This is a quick guide to get going:</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo theme building with Chrome developer tools]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/04/hexo-theme-building-with-chrome-developer-tools/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/04/hexo-theme-building-with-chrome-developer-tools/</id>
    <published>2014-04-10T18:27:33.000Z</published>
    <updated>2014-04-10T18:49:14.000Z</updated>
    <content type="html"><![CDATA[<p>I’m using Hexo as my blogging platform and wanted to customise the theme, which is broken down into many different parts to make it easier to manage and customise.  In order to understand what the different parts did I fired up Google Chrome deverloper tools to quickly explore the styles of Hexo’s default theme.</p>
<a id="more"></a>

<h2 id="Google_Chrome_browser_developer_tools">Google Chrome browser developer tools</h2>
<p>With Chrome developer tools you can explore the source code (HTML, CSS and JavaScript) of any web page and see which part of the page each line of code is responsible for.  This is a great way for quickly seeing which CSS classes and ID’s are used to control styles, as well as seeing which block of JavaScript is providng dynamic behaviour on the page. </p>
<h3 id="Running_the_Chrome_developer_tools">Running the Chrome developer tools</h3>
<p>Right-click and select “Inspect Element” on any page you are browsing to bring up the developer tools console.  You can navigate through </p>
]]></content>
    <summary type="html"><![CDATA[<p>I’m using Hexo as my blogging platform and wanted to customise the theme, which is broken down into many different parts to make it easier to manage and customise.  In order to understand what the different parts did I fired up Google Chrome deverloper tools to quickly explore the styles of Hexo’s default theme.</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="themes" scheme="http://jr0cket.github.io/hexo-themes-test/tags/themes/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo - why I prefer it over Octopress]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/04/hexo---why-i-prefer-it-over-octopress/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/04/hexo---why-i-prefer-it-over-octopress/</id>
    <published>2014-04-02T12:55:29.000Z</published>
    <updated>2014-04-11T16:43:54.000Z</updated>
    <content type="html"><![CDATA[<p>There are several static website &amp; blogging platforms available, so why did I choose <a href="http://hexo.io" target="_blank">Hexo</a> over things like Jekyll, Octopress, DocPad or writing my own?  Let me elaborate.</p>
<a id="more"></a>

<h2 id="I_write_more_JavaScript_than_Ruby">I write more JavaScript than Ruby</h2>
<p>Ruby is a great language but one I rarely use it for development anymore.  </p>
<p>The languages I use the most are Clojure and JavaScript, so ideally the tools I use should be written in one of those languages.  Why, well I already have the environment set up to support tools in those languages and if I need to extend the tool then I have the skills to do so relatively quickly.</p>
<h2 id="Ruby_is_a_pain_to_install">Ruby is a pain to install</h2>
<p>I have had a lot of problems with Ruby on MacOSX and Ubuntu, with only compilation from source code being successful.  This takes a bit of time and requires extra packages to be installed I otherwise wouldnt need.  RVM did strange things to my bash resource files last time I tried it out and the install failed on both MacOSX and Ubuntu.</p>
<h2 id="New_is_often_Better">New is often Better</h2>
<p>Hexo is relatively new and yet has learnt a lot from Octopres.  So has the advantage of not baking in any technical debt or having language specific quirks.  One example of why I like Hexo better is very simple.  To create a new file for a blog post in Hexo you use the command:</p>
<pre><code>hexo <span class="keyword">new</span> <span class="string">"title of blog post"</span>
</code></pre><p>With Octopress the command is similar, but just a bit more trickyer to remember and to type:</p>
<pre><code>rake new_post[<span class="string">"Title of blog post"</span>]
</code></pre><p>The differeces are relatively small, but in terms of usabiltity I feel a big difference especially as I write several blog posts a week. </p>
<p>Rather than using the command <code>octopress</code> you have to remember that you are using the command <code>rake</code>.  This is fine if you are used to Ruby every day, but I am not.  The form of the command also makes it difficult to rember (eg, that you have to use brackets and which ones were they again) and its actually harder to type, especially for a touch typist.</p>
<h2 id="Great_feedback_process">Great feedback process</h2>
<p>If you run the Hexo server then any changes you make, either to the content of your site or the design (CSS, theme, etc) is automatically picked up and rendered.  So if you are curious about how your changes look, then you just need to point your browser to the hexo server, usually running on port 4000.</p>
<p>So to run the hexo server you use the command:</p>
<pre><code>hexo <span class="keyword">server</span>
</code></pre><p>Then to see the results you open the link <a href="http://localhost:4000/" target="_blank">http://localhost:4000/</a></p>
<p>When you make a change you get output in the console that is currently running the Hexo server, for example</p>
<img src="/images/hexo-server-example-output-on-changes.png">


<p>This allows me to work locally on my laptop and see the results instantaineously.  Only when I am ready to share my changes with the world do I need to generate the static content and push it to Github pages.</p>
<p>This simple process should support me event when I have hundereds of blog posts and pages of content.  I wont have to wait for the generation of the site (although Hexo is pretty quick anyway, generating the site as it is in about 5 seconds).</p>
<h2 id="Responsive_community">Responsive community</h2>
<p>There is a healthy community around Hexo.  There are already lots of articles about configuring Hexo and creating your own themes.  I have found the project itself very responsive to issues and I even had a couple of pull requests accepted.</p>
<h2 id="Multi-threaded_processing">Multi-threaded processing</h2>
<p>As I plan to use one platform for all my static web content, blogging, tutorials, slides and technology micro-sites, then I need something that works pretty quick.</p>
<h2 id="Customisation">Customisation</h2>
<p>I also want to be able to put my own look onto my websites.  Most tools of this kind provide some nice sites, but I dont want something that just looks exactly like every other site out there.</p>
<p>However, I dont want to spend a long time configuring themes, so it should be really easy to tweak exiting themes.  </p>
<p>So far I have found Hexo easier to understand the theme structure from reading the default landscape theme.  Although I dont believe there is a vast difference between Hexo and Octopress themes.  It seems a few</p>
]]></content>
    <summary type="html"><![CDATA[<p>There are several static website &amp; blogging platforms available, so why did I choose <a href="http://hexo.io" target="_blank">Hexo</a> over things like Jekyll, Octopress, DocPad or writing my own?  Let me elaborate.</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="octopress" scheme="http://jr0cket.github.io/hexo-themes-test/tags/octopress/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo Static site generator - modifying exiting themes]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/04/hexo-static-site-generator---modifying-exiting-themes/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/04/hexo-static-site-generator---modifying-exiting-themes/</id>
    <published>2014-04-02T06:45:21.000Z</published>
    <updated>2014-04-09T17:12:03.000Z</updated>
    <content type="html"><![CDATA[<p>Hexo is a great way to create a blog or static website and comes with some responsive and great looking themes.  However, so your site doesnt look like everyone elses, you may want to customise the look and the easiest way is to modify an existing theme.</p>
<a id="more"></a>

<h2 id="Landscape_-_the_default_theme">Landscape - the default theme</h2>
<p>There are a wide range of themes to choose from, althought Landscape is one of the newest and is also the default so you dont need to instal it.</p>
<h3 id="Location_of_themes">Location of themes</h3>
<p>In the themes folder of your hexo project </p>
<pre><code>hexo init 
</code></pre><h2 id="Making_your_changes_work">Making your changes work</h2>
<p>If you have already generated or deployed your site with a theme and then you modify it. it seems hexo does not pick up those changes.  First you need to run the command</p>
<pre><code>hexo clean 
</code></pre><p>This will remove the cache and the .deploy folders.  So now when you do</p>
<pre><code>hexo <span class="keyword">generate</span>
</code></pre><p>all new files are added to public.</p>
]]></content>
    <summary type="html"><![CDATA[<p>Hexo is a great way to create a blog or static website and comes with some responsive and great looking themes.  However, so your site doesnt look like everyone elses, you may want to customise the look and the easiest way is to modify an existing theme.</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="themes" scheme="http://jr0cket.github.io/hexo-themes-test/tags/themes/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Testing Hexo themes]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/testing-hexo-themes/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/testing-hexo-themes/</id>
    <published>2014-03-29T01:02:50.000Z</published>
    <updated>2014-04-09T17:11:21.000Z</updated>
    <content type="html"><![CDATA[<p>Lets see how different themes look like when in Hexo.  This is just some basic content to help me see what they look like with content.</p>
<h2 id="Trying_out_code">Trying out code</h2>
<p>I wonder what code looks like when you look at it in this theme:</p>
<pre><code><span class="list">(<span class="title"><span class="built_in">defn</span></span> clojure-function <span class="collection">[paramter]</span>
  <span class="list">(<span class="title"><span class="built_in">str</span></span> <span class="string">"Lets do"</span> <span class="string">" "</span> <span class="string">"something simple"</span> <span class="string">", "</span> <span class="string">"using Clojure"</span>)</span>)</span>
</code></pre><p>That should be a simple Clojure example using markdown indentation.  Lets try using a codeblock to see if there is any difference.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>(<span class="function"><span class="keyword">def</span> <span class="title">authors</span> [:</span>name <span class="string">"John Stevenson"</span>])

(defn show-author [authors]
  (str authors))
  
(show-author authors)￿<span class="number">1</span>￿
</pre></td></tr></table></figure>
]]></content>
    
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="themes" scheme="http://jr0cket.github.io/hexo-themes-test/tags/themes/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/hello-world/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/hello-world/</id>
    <published>2014-03-29T00:28:16.000Z</published>
    <updated>2014-03-29T00:28:16.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://zespia.tw/hexo" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://zespia.tw/hexo/docs" target="_blank">documentation</a> to learn how to use.</p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[Deploying hexo sites to Github pages]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/deploying-hexo-sites-to-github-pages/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/deploying-hexo-sites-to-github-pages/</id>
    <published>2014-03-27T09:32:32.000Z</published>
    <updated>2014-06-01T20:01:12.000Z</updated>
    <content type="html"><![CDATA[<img src="http://hexo.io/css/images/logo.svg" class="img-thumbnail">


<p>Hexo is a great way to easily generate content and publish it use Github pages. </p>
<blockquote><p>See my previous articles on setting up <a href="/tags/hexo">Hexo</a> and creating content</p>
</blockquote>




<h2 id="Configuring_your_site_name">Configuring your site name</h2>
<p>Its important to add the URL of your github pages site to the Hexo configuraiton </p>
<figure class="highlight"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre># URL
## <span class="keyword">If</span> your site <span class="keyword">is</span> put <span class="keyword">in</span> a subdirectory, <span class="keyword">set</span> url <span class="keyword">as</span> <span class="string">'http://yoursite.com/child'</span> <span class="keyword">and</span> root <span class="keyword">as</span> <span class="string">'/child/'</span>
url: http:<span class="comment">//jr0cket.github.io/hexo-blog-test</span>
root: /hexo-blog-test/￿<span class="number">1</span>￿
</pre></td></tr></table></figure>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[Creating your first post with Hexo]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/creating-your-first-post-with-hexo/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/creating-your-first-post-with-hexo/</id>
    <published>2014-03-27T01:36:58.000Z</published>
    <updated>2014-06-01T15:38:54.000Z</updated>
    <content type="html"><![CDATA[<p>So you have installed Hexo (and nodejs), so now you are ready to start blogging.  Use the following command to create a new blog post entry (blog posts are the default type of content, although this can be changed in _config.yml):</p>
<pre><code>hexo <span class="keyword">new</span> <span class="string">"Meaningful blog post title with a hint of SEO"</span>
</code></pre><p>Hexo will create a new file under source/_posts using the name provided.  You can then edit this file and start creating your content using Markdown.</p>
<a id="more"></a>

<h2 id="Generating_and_viewing_your_blog">Generating and viewing your blog</h2>
<p>When you have finished writing your content, you can generate your blog posts using the command:</p>
<pre><code>hexo <span class="keyword">generate</span> 
</code></pre><p>This will convert your markdown content into a static website.  Then you can view the site by running it on a server that Hexo provides:</p>
<pre><code>hexo <span class="keyword">server</span> 
</code></pre><p>If everything looks good then you may want to publish the generated website somewhere it can be more readily accessed via the Internet.  Once such place is Github Pages (cover this later).</p>
<p>Later on you may want to tweak your theme and general configurations for the website.</p>
<h2 id="Tweaking_the_site_configurations">Tweaking the site configurations</h2>
<p>Just like with Octopress, you edit the _config.yml file and add your name, URL and any other details and settings you want to apply to the general blog.</p>
<h2 id="Reminder:_Seting_up_Hexo">Reminder: Seting up Hexo</h2>
<p>In case you forgot how to set Hexo up, then it is basically:</p>
<ul>
<li>Download the nodejs binaries (or compile from source if you have time to kill)</li>
<li>Add nodejs to the path (a setting in your shell rc file - eg. ~/.bashrc or ~/.zshrc)</li>
<li>Install hexo using: npm install hexo -g (wait for npm to download all the node packages)</li>
<li>Create a new website using: hexo init website-name (where website-name is just the folder name for your website project)</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>So you have installed Hexo (and nodejs), so now you are ready to start blogging.  Use the following command to create a new blog post entry (blog posts are the default type of content, although this can be changed in _config.yml):</p>
<pre><code>hexo <span class="keyword">new</span> <span class="string">"Meaningful blog post title with a hint of SEO"</span>
</code></pre><p>Hexo will create a new file under source/_posts using the name provided.  You can then edit this file and start creating your content using Markdown.</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Heroku deploy - a lot happens in 1 minute]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/heroku-deploy-a-lot-happens-in-1-minute/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/heroku-deploy-a-lot-happens-in-1-minute/</id>
    <published>2014-03-26T19:36:33.000Z</published>
    <updated>2014-04-10T13:26:12.000Z</updated>
    <content type="html"><![CDATA[<p>As technology progresses then taking a few minutes to deploy your app can seem like a long time, but when you consider everything Heroku is doing during that time then its quite amazing</p>
<a id="more"></a>

<h2 id="Provision_server_resources_&amp;_managing_traffic">Provision server resources &amp; managing traffic</h2>
<p>Heroku creates a new “server” each time you deploy, so that the currently live application can still handle reuests until the new version is ready.  Rather than a whole bloated server, Heroku actually creates a new Linux container with a running OS.  This Linux container usually takes a second or less to create with a running operating system.</p>
<h2 id="The_environment_is_then_established">The environment is then established</h2>
<p>Every language you use to write your application needs some kind of runtime, eg. if you need Java you need the JVM, Ruby apps need a particular version of Ruby, Javascript probably needs nodejs and PHP needs a webserver.  As part of the Heroku buildpack used during the deployment, the relevant libraries and platforms are brought in.  Unless you change the configuration of your build or the buildfile you use, Heroku will always bring in the same version of the environment you need to run your app each time you deploy.</p>
<h2 id="Compilation_of_code">Compilation of code</h2>
<p>If your app is compiled, then the build process is run so you have a deployment made from your standard production build.</p>
<p>Environment variables are set for the applications and any services (caching, logging, monitoring, etc) or datastores (postgres, redis, mongodb) are therefore automatically connected too.</p>
<p>All the relevant processes are run and scalled (can you scale your app to a certain level when you deploy)</p>
]]></content>
    <summary type="html"><![CDATA[<p>As technology progresses then taking a few minutes to deploy your app can seem like a long time, but when you consider everything Heroku is doing during that time then its quite amazing</p>
]]></summary>
    
      <category term="heroku" scheme="http://jr0cket.github.io/hexo-themes-test/tags/heroku/"/>
    
      <category term="cloud" scheme="http://jr0cket.github.io/hexo-themes-test/categories/cloud/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Emacs Org-mode for all your content]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/emacs-org-mode-for-all-your-content/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/emacs-org-mode-for-all-your-content/</id>
    <published>2014-03-16T12:35:37.000Z</published>
    <updated>2014-04-09T17:10:37.000Z</updated>
    <content type="html"><![CDATA[<p>Emacs is a tool that just keeps on giving and Org-mode is a fantantastic way to create text based content and manage it effectively.  Unfortunately, outside of Emacs nothing uses Org-mode formating.  However, as Org-mode is just a text format then it can be easily converted by Emacs into other things.  I’ll show you how to create other formats from Org-mode, so you can confidently write everything in Org-mode and generate any other formats you need.</p>
<p><a id="more"></a><br>[TODO: a bit too wordy]</p>
<blockquote><p>  In previous articles I have covered generating presentations from Org-mode using Reveal.js.</p>
</blockquote>


<h2 id="Why_write_in_Org-mode">Why write in Org-mode</h2>
<p>If you are writing anything more than a few paragraphs of text then it gets quite easy to become lost in your own writing.  Having to scroll around to see what you covered earlier can slow down your creative process.</p>
<p>With Org-mode you can structure you content easily, as your “topics or table of contents” are your structure.  Every heading and sub-heading can fold away the content underneath it, unfolding the only the parts of your writing you want to see.</p>
<p>Another useful aspect of Org-mode is that it hides the link part of the URL, so you only see the text part of the link.  This helps keep your text easy to read.</p>
<p>As with many other languages supported by Emacs you also get colour highlighting for different styles along with spell checking and suggested words as you type.</p>
<p>[TODO: Insert picture of Org-mode - or maybe even a video]</p>
<h2 id="Reasons_I_need_to_use_Markdown">Reasons I need to use Markdown</h2>
<p>I use markdown for my Jekyll based blog and website and as these are relativley small I often just write them directly in Markdown.  However, if its a series of posts on the same topic then I can easily structure that series using Org-mode and generate the markdown content when I am ready to add it to my blog.</p>
<p>I also need to use markdown for the self-publishing book website, <a href="LeanPub">https://leanpub.com/</a>.  I write the whole book in Org-mode, again so I can structure it sensibly and jump to specific parts of the content easily.  I can also see topics (headings) I have written about in each chapter of the book very easily by open and closing sections of the Org-mode file.</p>
<h2 id="Generating_Markdown_from_Org-mode">Generating Markdown from Org-mode</h2>
<p>In Emacs, open your Org-mode file (or switch to the buffer containing it).  Then export a copy of then content into markdown with one of the following commands</p>
<pre><code>M<span class="attribute">-x</span> org<span class="attribute">-md</span><span class="attribute">-export</span><span class="attribute">-to</span><span class="attribute">-markdown</span>
C<span class="attribute">-c</span> C<span class="attribute">-e</span> m m
</code></pre><p>Exports the current Org-mode file as a new text file of the same name but with the .md extension rather than .org.  </p>
<p>When you export again, the .md file will be overwritten without warning, so if you want to make changes you edit the Org-mode file and re-generate the markdown file.</p>
<p>If you want to see the markdown file as soon as it is created, use the following command to open it in Emacs:</p>
<pre><code><span class="keyword">C</span>-c <span class="keyword">C</span>-e m o
</code></pre><p>If you do not wish to create a file from the export, the following command generated markdown and places it inside a tempory Emacs buffer:</p>
<pre><code>M<span class="attribute">-x</span> org<span class="attribute">-md</span><span class="attribute">-export</span><span class="attribute">-as</span><span class="attribute">-markdown</span>
C<span class="attribute">-c</span> C<span class="attribute">-e</span> m M 
</code></pre><p>[TODO: what does this command do?]<br>    M-x org-md-convert-region-to-markdown</p>
<p>The Markdown export is build on top of the <a href="HTML export">http://orgmode.org/manual/HTML-export.html#HTML-export</a> and anything not supported by the markdown syntax will be converted by that HTML export process.  See the Org-mode website for more details on <a href="exporting markdown">http://orgmode.org/manual/Markdown-export.html#Markdown-export</a> and other formats.</p>
<blockquote><p>Note: for the header and sectioning structure the Markdown export can generate both atx and setext types for headlines, according to org-md-headline-style. ATX introduces a hard limit of two levels of headings, whereas Setext pushes it to six. Headings below that limit are exported as lists. You can also set a soft limit before that one (see <a href="Export settings">http://orgmode.org/manual/Export-settings.html#Export-settings</a>).</p>
</blockquote>

]]></content>
    <summary type="html"><![CDATA[<p>Emacs is a tool that just keeps on giving and Org-mode is a fantantastic way to create text based content and manage it effectively.  Unfortunately, outside of Emacs nothing uses Org-mode formating.  However, as Org-mode is just a text format then it can be easily converted by Emacs into other things.  I’ll show you how to create other formats from Org-mode, so you can confidently write everything in Org-mode and generate any other formats you need.</p>
<p>]]></summary>
    
      <category term="emacs" scheme="http://jr0cket.github.io/hexo-themes-test/tags/emacs/"/>
    
      <category term="org-mode" scheme="http://jr0cket.github.io/hexo-themes-test/tags/org-mode/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Updating Octopress with bug fixes and enhancments]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/updating-octopress-with-bug-fixes-and-enhancments/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/updating-octopress-with-bug-fixes-and-enhancments/</id>
    <published>2014-03-13T19:32:54.000Z</published>
    <updated>2014-04-09T17:14:42.000Z</updated>
    <content type="html"><![CDATA[<p>For each Octopres project you have created (ie. for each blog / website you created with Octopress) you need to pull some code from Github remote (octopress master) and run a few rake tasks.</p>
<p>Before you start with an update, check you Octopress projects files have been added to the Git repository or Stashed out of the way - as Octopress will try and overwrite them (although as its using git it will fail and warn you about a merge conflict).</p>
<pre><code>git pull octopress master     <span class="comment"># Get the latest Octopress</span>
bundle install                <span class="comment"># Keep gems updated</span>
rake update_<span class="built_in">source</span>            <span class="comment"># update the template's source</span>
rake update_style             <span class="comment"># update the template's style</span>
</code></pre><p><a href="http://octopress.org/docs/updating/" target="_blank">http://octopress.org/docs/updating/</a></p>
<p>Thank you</p>
]]></content>
    
    
      <category term="octopress" scheme="http://jr0cket.github.io/hexo-themes-test/tags/octopress/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Creating content in markdown for your Octopress blog]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/creating-content-in-markdown-for-your-octopress-blog/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/creating-content-in-markdown-for-your-octopress-blog/</id>
    <published>2014-03-13T19:32:20.000Z</published>
    <updated>2014-04-09T17:07:01.000Z</updated>
    <content type="html"><![CDATA[<p>Octopress enables the creation of great looking blog post using simple markdown text.  This gives you a no-fuss way of writing your blogs without getting distracted.  Here I will cover how to add formatting to you text and embedding code and other useful media into your blog posts.</p>
<blockquote><p>In my previous blog on Octopress I covered the blogging workflow and the handful of rake commands that help you create and deploy your blog posts consistently. </p>
</blockquote>


<a id="more"></a>

<h2 id="Adding_styles_to_text">Adding styles to text</h2>
<p>Headings<br>Bold, italic </p>
<h2 id="Adding_images">Adding images</h2>
<p>Images are always a good way to explain concepts or to just get attendtion for your writing.</p>
<p>To add an image to your post, you add the following code </p>
<figure class="highlight"><figcaption><span>[Insert an image in your post]</span><a href="http://octopress.org/docs/plugins/image-tag/" target="_blank">link</a></figcaption><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>  <escape><img src="/path/to/image" class="[class names]" title="[width] [height] [title text [alt text]]">

<p></pre></td></tr></table></figure></escape></p>
<p>Here is an example with my two cute cats:</p>
<img src="/images/kittens-snuggled.png">


<h3 id="More_examples">More examples</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>  <escape><img src="http://placekitten.com/890/280">

<img src="http://placekitten.com/320/250" class="left" title="Place Kitten #2">

<img src="http://placekitten.com/300/500" class="right" width="150" height="250" title="Place Kitten #3">

<img src="http://placekitten.com/300/500" class="right" width="150" height="250" title="Place Kitten #4" alt="An image of a very cute kitten">

<p></pre></td></tr></table></figure></escape></p>
<h2 id="Showing_code">Showing code</h2>
<h3 id="Code_blocks">Code blocks</h3>
<p>You can embed code snippets directly in the markup of the blog posts you write using the codeblock directive.<br><a href="http://octopress.org/docs/plugins/codeblock/" target="_blank">http://octopress.org/docs/plugins/codeblock/</a></p>
<p>These are okay but I have not figured out a way to stop Octopress examples from rendering incorrectly (unless there is an Octopress update that fixes this)</p>
<p>[TODO - figure out how to show code snippets that are also liquid calls]</p>
<h3 id="Github_Gists">Github Gists</h3>
<p>I am used to using Github and Gists for sharing and collaborating around code, so as Octopress can use Gits then I have started using the gist directive.</p>
<script src="https://gist.github.com/9532424.js"></script>


<p>See the <a href="Octopress article on Github gists">http://octopress.org/docs/plugins/gist-tag/</a> for a few more examples.</p>
<h2 id="Adding_Video">Adding Video</h2>
<p>You can add embedded videos from YouTube and Vimeo very easily, you just need to know the id of the video which is the last characters of the </p>
<p>For example, there is a great video by Lindsey Stirling at <a href="https://www.youtube.com/watch?v=DHdkRvEzW84" target="_blank">https://www.youtube.com/watch?v=DHdkRvEzW84</a>, so to include this video in a post I would use the video id at the end of that web address (after the watch?v=).  So I would add the following code to my code</p>
<p>  youtub DHdkRvEzW84</p>
<p>You can use either YouTube or Vimeo for your video souce using the following syntax:</p>
<p>   youtube video-id<br>   vimeo video-id</p>
<h3 id="Example">Example</h3>
<p>A beautiful video with amazing music from Lindsey Stirling:</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/DHdkRvEzW84" frameborder="0" allowfullscreen></iframe></div>


]]></content>
    <summary type="html"><![CDATA[<p>Octopress enables the creation of great looking blog post using simple markdown text.  This gives you a no-fuss way of writing your blogs without getting distracted.  Here I will cover how to add formatting to you text and embedding code and other useful media into your blog posts.</p>
<blockquote><p>In my previous blog on Octopress I covered the blogging workflow and the handful of rake commands that help you create and deploy your blog posts consistently. </p>
</blockquote>


]]></summary>
    
      <category term="octopress" scheme="http://jr0cket.github.io/hexo-themes-test/tags/octopress/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Octopress tips - using rake tasks for blogging]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/octopress-tips-using-rake-tasks-for-blogging/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/octopress-tips-using-rake-tasks-for-blogging/</id>
    <published>2014-03-12T17:00:29.000Z</published>
    <updated>2014-04-09T17:13:41.000Z</updated>
    <content type="html"><![CDATA[<p>Abandoned this in favour of Hexo and Node.js.  No more Ruby installs for this developer.</p>
]]></content>
    
    
      <category term="to-delete" scheme="http://jr0cket.github.io/hexo-themes-test/categories/to-delete/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Customise Octopress themes for fun and your profit]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/customise-octopress-themes-for-fun-and-your-profit/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/customise-octopress-themes-for-fun-and-your-profit/</id>
    <published>2014-03-12T16:28:28.000Z</published>
    <updated>2014-04-09T17:07:53.000Z</updated>
    <content type="html"><![CDATA[<p>Octopress themes are stored in the the root folder of your project in a folder called .themes.  If you installed one of the custom themes for Octopress [link], the .themes folder is where the instructions tell you to clone the theme git repository.</p>
<p>Themes can also be installed by passing a parameter to the rake install command. the default theme being “classic”.</p>
<p>Using the .theme folder for your themes helps ensure that your customisations do not get over-written by Octopress updates .</p>
<a id="more"></a>

<h2 id="Including_font_families">Including font families</h2>
<p>You can add hosted fonts just like you do with HTML pages using a link reference.  There are a large number of fonts from Google.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>&lt;link href=<span class="string">'http://fonts.googleapis.com/css?family=Lato'</span> rel=<span class="string">'stylesheet'</span> <span class="keyword">type</span>=<span class="string">'text/css'</span>&gt;
</pre></td></tr></table></figure>


<p>I like the Ubuntu font so I add the Ubutu and Ubunto Mono font families using the following code:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>&lt;link href=<span class="string">'http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu'</span> rel=<span class="string">'stylesheet'</span> <span class="keyword">type</span>=<span class="string">'text/css'</span>&gt;
</pre></td></tr></table></figure>


<p>You can select your own fonts to use by visiting <a href="Google fonts">http://www.google.com/fonts/</a> and adding the font families you like to your collection and Google Fonts will generate the line of code you need to add.</p>
<p>To add Ubuntu fonts directly to your CSS you would use the following:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="attribute">font-family</span><span class="value">: <span class="string">'Ubuntu Mono'</span>, sans-serif;</span>
<span class="attribute">font-family</span><span class="value">: <span class="string">'Ubuntu'</span>, sans-serif;</span>
</pre></td></tr></table></figure>




<h2 id="Changing_Colours">Changing Colours</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>sass/<span class="keyword">custom</span>/_colors.scss
</pre></td></tr></table></figure>


<h2 id="Example_-_light_colour_scheme">Example - light colour scheme</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="variable">$header</span><span class="attribute">-title</span><span class="attribute">-font</span><span class="attribute">-family</span>:
<span class="string">"Lato"</span>,
<span class="string">"Fontdiner Swanky"</span>,
<span class="string">"Germania One"</span>,
<span class="string">"Poller One"</span>,
<span class="string">"Georgia"</span>,
<span class="string">"Helvetica Neue"</span>,
Arial,
sans<span class="attribute">-serif</span> <span class="subst">!</span>default;
</pre></td></tr></table></figure>






<h2 id="Chainging_Style">Chainging Style</h2>
<p>Change width of the body, the size of the dates and article titles as well as the codeblocks in </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>sass/<span class="keyword">custom</span>/_styles.scss
</pre></td></tr></table></figure>


<p>Example</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="tag">body</span> {
  <span class="attribute">max-width</span><span class="value">: <span class="number">1100</span>px;</span>
}
<span class="tag">time</span> {
  <span class="attribute">font-size</span><span class="value">: <span class="number">14</span>px;</span>
}
<span class="tag">h1</span> {
  <span class="attribute">font-size</span><span class="value">: <span class="number">2.2</span>em;</span>
}
<span class="tag">section</span> {
  &gt; <span class="tag">h1</span> {
    <span class="attribute">font-size</span><span class="value">: <span class="number">1.5</span>em;</span>
  }
}
codeblock {
    <span class="attribute">font-size</span><span class="value">: <span class="number">1.1</span>em;</span>
}
</pre></td></tr></table></figure>



<h2 id="Icons">Icons</h2>
<p><a href="Social media">http://www.elegantthemes.com/blog/resources/free-social-media-icon-set</a></p>
<h2 id="Header_images">Header images</h2>
<p>adding a CSS-styled header image isn’t immediately obvious—at least, not to web-tards like me. My first inclination was to do a bunch of surgery on ~/octopress/source/_includes/custom/header.html and stuff an image in there; that worked, but it didn’t take more than a glance at the CSS behind the Octopress default site to see that the method used there didn’t involve any additional code going into the header section. Plus, just adding an image in there didn’t really fit with the HTML5 fanciness of Octopress and Jekyll—it didn’t resize or reflow as the page was changed.</p>
<p>The key ended up being the realization that the header styling and its reflowing was coded in ~/octopress/sass/base/_layout.scss. True to form, that file has an override in ~/octopress/sass/custom/_layout.scss, and to that I made the following changes:</p>
<h3 id="Example">Example</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="code"><pre><span class="tag">body</span> &gt; <span class="tag">header</span> <span class="tag">h1</span> {
      <span class="attribute">padding-left</span><span class="value">:<span class="number">2.5</span>em;</span>
      <span class="attribute">text-align</span><span class="pseudo">:right</span>;
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 432px</span>) {</span>
              <span class="attribute">text-align</span><span class="pseudo">:left</span>;
      }
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 768px</span>) {</span>
              <span class="attribute">padding-left</span><span class="value">:<span class="number">3</span>em;</span>
      }
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 992px</span>) {</span>
              <span class="attribute">padding-left</span><span class="value">:<span class="number">2</span>em;</span>
      }
}

<span class="tag">body</span> &gt; <span class="tag">header</span> <span class="tag">h2</span> {
      <span class="attribute">padding-left</span><span class="value">:<span class="number">5.62</span>em;</span>
      <span class="attribute">text-align</span><span class="pseudo">:right</span>;
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 432px</span>) {</span>
              <span class="attribute">text-align</span><span class="pseudo">:left</span>;
              <span class="attribute">padding-left</span><span class="value">:<span class="number">3.9</span>em;</span>
      }
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 768px</span>) {</span>
              <span class="attribute">padding-left</span><span class="value">:<span class="number">5</span>em;</span>
      }
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 992px</span>) {</span>
              <span class="attribute">padding-left</span><span class="value">:<span class="number">2.9</span>em;</span>
      }
}

<span class="tag">body</span> &gt; <span class="tag">header</span> <span class="tag">h1</span><span class="pseudo">:before</span> {
      <span class="attribute">content</span><span class="value">:<span class="string">""</span>;</span>
      <span class="attribute">position</span><span class="value">:absolute;</span>
      <span class="attribute">left</span><span class="value">:<span class="number">0</span>em;</span>
      <span class="attribute">right</span><span class="value">:<span class="number">0</span>;</span>
      <span class="attribute">top</span><span class="value">:<span class="number">1.5</span>em;</span>
      <span class="attribute">height</span><span class="value">:<span class="number">110</span>px;</span>
      <span class="attribute">width</span><span class="value">:<span class="number">110</span>px;</span>
      <span class="attribute">overflow</span><span class="value">:hidden;</span>
      <span class="attribute">text-align</span><span class="pseudo">:right</span>;
      <span class="attribute">background-image</span><span class="value">:url(<span class="string">'/images/bigdino-blog-head3.png'</span>);</span>
      <span class="attribute">background-repeat</span><span class="value">:no-repeat;</span>
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 432px</span>) {</span>
              <span class="attribute">top</span><span class="value">:.<span class="number">32</span>em;</span>
      }
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 768px</span>) {</span>
              <span class="attribute">left</span><span class="value">:.<span class="number">75</span>em;</span>
      }
}
</pre></td></tr></table></figure>



<p>The changes are divided up into three sections: the first part styles the main title (“Bigdinosaur Blog”), the second styles the subtitle (“Tales of hacking and stomping on things”), and the third places and styles the background image. Each section also contains instructions on how the styles should change as the browser window’s width changes (the lines beginning with @media only).</p>
<p>The most important thing, and the thing that wasn’t obvious to me at first but is actually really obvious in hindsight, is that the initial parameters for each section describe how the thing should look at its smallest, and then each min-width section describes how the thing should look starting at when the browser window is that wide or wider. So, look at header h1. This is the styling applied to the main title in the header. When the browser window is anywhere from 0 to 431 pixels wide, the title should be right-aligned with a bit of padding on its left to keep it from overlapping with the background dinosaur (more on overlapping in a bit). This is how things get displayed on, say, an iPhone.</p>
<p>The instant the browser window is 432 pixels wide—which is the point at which the “Bigdinosaur Blog” text wraps to a single line—the text switches to left-aligned and the amount of padding changes, again to keep it from overlapping with the background dino. Another shift comes again at 768 pixels of width, and then final shift to the title’s most sprawling layout happens at 992 pixels.</p>
<p>The subtitle, styled in the header h2 section, has similar directives—it starts out right-aligned, shifts to left-aligned at a certain point, and the amount of padding around it shifts as the browser window moves. The challenge with the subtitle is that I wanted it to maintain a consistent position relative to the main title, and since I’m doing my spacing using em values (which are themselves relative units), each new width setting required tuning by hand.</p>
<p>The last section places the background image itself. In order to have the most control about where the image appears and where it reflows to, I’ve given it a position:absolute tag, which means that other styled elements ignore the background when figuring out their own layouts—hence all the fiddling about with padding for the header text. Instead of standard image floating behavior, an absolutely positioned image can sit on top of other page elements. This can be used to creative effect, like on the Octopress home page titlebar, but you do have to be mindful with the spacing and padding of your other elements so that they don’t get eaten.</p>
<p>In its most narrow configuration, the background image sits on the far left of the page, with 1.5 ems of space from the top of its section to ensure that it doesn’t poke up past the main title, and with background-repeat:no-repeat set so that it only displays once rather than tiling or repeating itself. I also found that if I didn’t explicitly declare the height and width of the image, it wouldn’t display at all. Finally, there are two width settings that reposition the image as the page widens so that it maintains a visually pleasing position relative to the title.</p>
<p>I mentioned it above, but it’s worth repeating: the values above are what work for my typeface choice and image size, and you will have to tweak your own to taste. Once I had decided exactly what I wanted to do and figured out what files to edit, it took probably an hour of making small changes and previewing and making small changes and previewing over and over again before I was happy with the way things lined up. I spent so much time fiddling, in fact, that I elected to abandon the idea of having the dino pic resize itself. Dinosaurs, I suppose, are meant to be displayed as large as possible, all the time, and would never consent to any funny-business resizing.</p>
<p><a href="http://blog.bigdinosaur.org/changing-octopresss-header/" target="_blank">http://blog.bigdinosaur.org/changing-octopresss-header/</a></p>
]]></content>
    <summary type="html"><![CDATA[<p>Octopress themes are stored in the the root folder of your project in a folder called .themes.  If you installed one of the custom themes for Octopress [link], the .themes folder is where the instructions tell you to clone the theme git repository.</p>
<p>Themes can also be installed by passing a parameter to the rake install command. the default theme being “classic”.</p>
<p>Using the .theme folder for your themes helps ensure that your customisations do not get over-written by Octopress updates .</p>
]]></summary>
    
      <category term="octopress" scheme="http://jr0cket.github.io/hexo-themes-test/tags/octopress/"/>
    
      <category term="themes" scheme="http://jr0cket.github.io/hexo-themes-test/tags/themes/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Why go to a conference]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/why-go-to-a-conference/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/why-go-to-a-conference/</id>
    <published>2014-03-08T16:07:47.000Z</published>
    <updated>2014-04-09T17:15:09.000Z</updated>
    <content type="html"><![CDATA[<p>There are a great many developer and tech conferences to got to, some are free, some are relativley cheap and some you hope you can get your company to pay for.  But why should you even consider going to a conference in the first place?</p>
<a id="more"></a>

<h2 id="As_a_speaker">As a speaker</h2>
<p>free entry - maybe even invite a friend of two for free<br>wined and dined by the organisers</p>
<p>Best way I know of checking you understand something.<br>In fact, presenters are usually the ones that get the most from a conference, they present there ideas and then have some one in the crowd as for “a real world example”.  Putting yourself on the spot like that and learning how to deal with it puts you in a good place when you go back to work and have to deal with all sorts of other less than plesant situations.</p>
<p>Its fun being a speaker, you get respect for just standing up in front of a crowd and speaking.</p>
<p>Its a great way to develop your career.  Are you tired of boring interview questions or dumb tests that only test your memory rather than your understanding?  A reputation of speaking at conferences goes a long way to cut through the crap that you often get at interview time.</p>
<p>Working a crowd at a presetation helps inmprove you team skills and helps you understand how you can inspire and influence people.  It is good training for real leadership.</p>
<p>I dont know of any speakers who ended up on the IT scrap-heap…</p>
<h2 id="As_an_attendee">As an attendee</h2>
<p>Its a chance to get away from work for a few days and actually think about things.  It can be hard to see the big picture in terms of what you are trying to achieve at work when you are head down getting things done (or fire fighting).</p>
<p>Its good to fine out what is happening in technology and see how others are applying the same tools and languages you use to great value.  Even some small change in approach can make you more effective.</p>
<p>Meet new people and discuss each others concerns.  Its a great chance to meet people in your situation and do some venting, talk about how you face your challenges, swap ideas and </p>
<p>Find out what people are doing and what they are excited about, why they get out of bed in the morning</p>
<p>Its good to put conferences on your CV - shows initiative, shows you are interested in learing and developing yourself</p>
<p>Its a great way to learn new things, or at least learn what things you should be looking at for the next 6 months - unless you like turning up to work and doing the same old crap week in week out !!!</p>
<p>It gives you something to talk about with your team when you get back to work, something other than what was on TV last night.</p>
<p>How boring is it to just work with someone who just turns up 9-5 and does nothing else.  I want to work with people who are inspired, passionate and enthusiastic about what they do.  As an employer, why would you ever hire someone who wasnt like this ??  Oh yes, because that employer has either no respect for thier staff or just wants them to do some grunt work - the IT factory in its worse sense.</p>
<p>Most employeers have no idea about IT and many do not need to know that much, except that they should respect the knowledge workers they hire and empower them to deliver the best possible service they can.  Unfortunately managment has been trained to measure and manage people like a time and cost study, rather than considering the value that their staff can bring them.</p>
<p>Quote:<br>Manager “What happens if I train my staff and they all leave”<br>Entreprenure “What happens if you dont train your staff and they all stay”</p>
<p>If you want a successful business then you need successful people, people who will help you drive the business forward and not be a blocker to the delivery of your ideas. </p>
<p>There have been quite a few organisations that are now able to deliver at the speed of thought, deploying hundereds of ideas a day and getting the best feedback you can in the world - the customers recieving your service.</p>
]]></content>
    <summary type="html"><![CDATA[<p>There are a great many developer and tech conferences to got to, some are free, some are relativley cheap and some you hope you can get your company to pay for.  But why should you even consider going to a conference in the first place?</p>
]]></summary>
    
      <category term="motivation" scheme="http://jr0cket.github.io/hexo-themes-test/tags/motivation/"/>
    
      <category term="dev-events" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create great looking website content with Twitter Bootstrap]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/create-great-looking-website-content-with-twitter-bootstrap/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/create-great-looking-website-content-with-twitter-bootstrap/</id>
    <published>2014-03-08T08:16:30.000Z</published>
    <updated>2014-05-14T00:11:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="What_is_Twitter_bootstrap?">What is Twitter bootstrap?</h2>
<p>Bootstrap is an HTML5 toolkit from Twitter to help kickstart webapps and web content sites.  It includes a base Cascading Style Sheet (CSS) and HTML for forms, buttons, typography, tables, grids, navigation and much more.</p>
<p>Bootstrap stylesheet provides an easy-to-implement 960 grid for efficient layout, as well as expertly crafted styles for typography, navigation, tables, forms, buttons, and more. To take care of everyday JavaScript touches, Bootstrap provides a well built set of jQuery plugins for drop-down menus, tabs, modal boxes, tooltips, alert messages, and more.</p>
<p>This helps you create a standards compliant, responsive, user-friendly, professionally built HTML5 website, right out of the box. </p>
<a id="more"></a>

<h2 id="Licencing">Licencing</h2>
<p>Bootstrap is under the Apache 2.0 license, provide a great deal of creative freedom. So long as you give the good folks at Twitter due credit for their work, you’re free to take, tweak, and customize everything to your heart’s content.</p>
<h2 id="Getting_started_with_Bootstrap">Getting started with Bootstrap</h2>
<p>If you just want to use Bootstrap for your project you can simply include the minified libraries from a content delivery network </p>
<figure class="highlight html"><figcaption><span>Use Bootsrapt from a Content Delivery Network (CDN)</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre> 
<span class="doctype">&lt;!DOCTYPE html&gt;</span>
 <span class="tag">&lt;<span class="title">html</span>&gt;</span>
 <span class="tag">&lt;<span class="title">head</span>&gt;</span>
   <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span>
   <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1"</span>&gt;</span>
   <span class="tag">&lt;<span class="title">title</span>&gt;</span>Hack the Tower - London hackday<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
   <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>&gt;</span>     
   <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"http://netdna.bootstrapcdn.com/bootswatch/3.1.1/united/bootstrap.min.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>&gt;</span>
   <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"css/hackthetower.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
</pre></td></tr></table></figure>


<p>In the example, lines 8 &amp; 9 include minified bootstrap using the <strong>netdna</strong> content delivery network (CDN), so where ever people view your site from around the world it should not slow down due to loading these styleheets.</p>
<p>You can now use elements from Bootstrap in your project and view the results anywhere you have an internet connection.  To learn what these are, take a look at <a href="http://getbootstrap.com/" target="_blank">Get Bootstrap</a> or Google for some of the very many examples out there.</p>
<h2 id="Working_with_Bootstrap">Working with Bootstrap</h2>
<p>If you want to see the styles that bootstrap uses or carry out some significant customisations, you can also download bootstrap to your laptop as normal CSS files.  Its common practice to put cascading stylesheets into a folder called CSS and JavaScript in a folder called javascript.</p>
<p>If you are doing significant customisation then you could edit the twitter bootstrap files directly.  Alternativley you can create your own CSS and JavaScript files that over-ride the bootstrap styles and scripts.</p>
<h2 id="Resources">Resources</h2>
<p>The following links will give you ideas on how to make the most out of Bootstrap:</p>
<ul>
<li><a href="http://getbootstrap.com/getting-started/" target="_blank">Get Bootstrap - Getting Started</a></li>
<li>Tutorial: <a href="http://www.revillweb.com/tutorials/twitter-bootstrap-tutorial/" target="_blank">Up and running with Twitter Bootstrap in 20 minutes</a></li>
<li>Tutorial: <a href="http://www.w3resource.com/twitter-bootstrap/tutorial.php" target="_blank">w3resource: Twitter Bootstrap 3 tutorial</a></li>
<li>Video: <a href="https://www.youtube.com/watch?v=no-Ntkc836w" target="_blank">Bootstrap Tutorial For Beginners - Responsive Design with Bootstrap</a></li>
<li><a href="http://blog.getbootstrap.com/" target="_blank">Official Bootstrap blog</a></li>
<li><a href="http://stackoverflow.com/questions/tagged/twitter-bootstrap-3" target="_blank">StackOverflow - Twitter-Bootstrap-3</a></li>
<li><a href="https://twitter.com/twbootstrap" target="_blank">@twbootstrap</a></li>
</ul>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank">@jr0cket</a></p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="What_is_Twitter_bootstrap?">What is Twitter bootstrap?</h2>
<p>Bootstrap is an HTML5 toolkit from Twitter to help kickstart webapps and web content sites.  It includes a base Cascading Style Sheet (CSS) and HTML for forms, buttons, typography, tables, grids, navigation and much more.</p>
<p>Bootstrap stylesheet provides an easy-to-implement 960 grid for efficient layout, as well as expertly crafted styles for typography, navigation, tables, forms, buttons, and more. To take care of everyday JavaScript touches, Bootstrap provides a well built set of jQuery plugins for drop-down menus, tabs, modal boxes, tooltips, alert messages, and more.</p>
<p>This helps you create a standards compliant, responsive, user-friendly, professionally built HTML5 website, right out of the box. </p>
]]></summary>
    
      <category term="bootstrap" scheme="http://jr0cket.github.io/hexo-themes-test/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Creating blog posts with Octopress]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/creating-blog-posts-with-octopress/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/creating-blog-posts-with-octopress/</id>
    <published>2014-03-04T15:46:14.000Z</published>
    <updated>2014-04-09T17:05:53.000Z</updated>
    <content type="html"><![CDATA[<p>Octopress provides an easy way to create blog posts by proving a task that will automatically place and name your markdown file.  This helps manage your blog posts in a sensible structure and avoids conflicts.</p>
<p>To create a new post, use the following command inside your Octopress project folder:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>rake new_post[<span class="string">"Title of your blog post"</span>]
</pre></td></tr></table></figure>


<p>This will create a markdown file including frontmatter to apply the blog post style.  The task creates the file under the _source folder and included the date at the start of the filename.</p>
<p><a id="more"></a><br>Now you can edit the file and simply add your content.  Once you have written your blog post you can ask Octopress to generate the html for your new post.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>rake <span class="keyword">generate</span> 
</pre></td></tr></table></figure>


<p>You can view the results locally, or simply deploy up to your chosen location (eg. github pages)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>rake preview
rake deploy  
</pre></td></tr></table></figure>


<p>If you are confident about the changes you are making, or have a test website you are deploying to, then you can use a single command to generate the new version of the site and publish it directly.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>rake gen_deploy
</pre></td></tr></table></figure>



<h2 id="Summary">Summary</h2>
<p>This covers the bloggine workflow for Octopress.  Next we will cover adding content in your blog post markdown files, inlcuding text formatting, images, code snippets, embedded video, etc</p>
<p>Thank you</p>
]]></content>
    <summary type="html"><![CDATA[<p>Octopress provides an easy way to create blog posts by proving a task that will automatically place and name your markdown file.  This helps manage your blog posts in a sensible structure and avoids conflicts.</p>
<p>To create a new post, use the following command inside your Octopress project folder:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>rake new_post[<span class="string">"Title of your blog post"</span>]
</pre></td></tr></table></figure>


<p>This will create a markdown file including frontmatter to apply the blog post style.  The task creates the file under the _source folder and included the date at the start of the filename.</p>
<p>]]></summary>
    
      <category term="octopress" scheme="http://jr0cket.github.io/hexo-themes-test/tags/octopress/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[First blog post ever - awesome]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/octopress-first-blog-post-ever-awesome/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/octopress-first-blog-post-ever-awesome/</id>
    <published>2014-03-03T00:08:42.000Z</published>
    <updated>2014-04-09T17:14:18.000Z</updated>
    <content type="html"><![CDATA[<p>This is the first blog post of many in my adventures in learning how to publish a blog using Octopress.  </p>
<p>As a developer I want a lightweight tool to create and easily publish content interesting to other developers in the community.  Although I can write HTML, CSS and JavaScript for webapps, I dont want to be slowed down writing these things when I am doing creative writing.</p>
<p>Using Octopress, which is a blogging framework on top of Jekyll, I can write my content using Markdown.  As Markdown is just simple text with a few characters and indents used for formating, I can focus on the writing and make it as appealing as I can.  I dont get distracted by the visual layout of the content and a standard design for the blog is consistently applied.<br><a id="more"></a><br>The only challenge I had intially was to get a working copy of Ruby running on my Ubuntu laptop.  Jekyll and therefore Octopress requires Ruby version 1.9.3 or greater and Unfortunately I seemed to have a mix of 1.9.1 and 1.9.3.  In Ubuntu 13.10 there is a strange stiuation where the 1.9.3 version of ruby was installed along side version 1.9.1 and therefore errors arrose when trying to generate the site.</p>
<p>To fix Ruby on Ubuntu, I loaded up Synaptic package manager and removed all Ruby packages and anything related, such as gem and bundler.  Then I installed the package ruby2.0 along with the docs and dev packages for that version.  With only the latest version of Ruby installed, Octopress worked perfectly.</p>
<p>I look forward to sharing my further experiences blogging with Octopress</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<p>This is the first blog post of many in my adventures in learning how to publish a blog using Octopress.  </p>
<p>As a developer I want a lightweight tool to create and easily publish content interesting to other developers in the community.  Although I can write HTML, CSS and JavaScript for webapps, I dont want to be slowed down writing these things when I am doing creative writing.</p>
<p>Using Octopress, which is a blogging framework on top of Jekyll, I can write my content using Markdown.  As Markdown is just simple text with a few characters and indents used for formating, I can focus on the writing and make it as appealing as I can.  I dont get distracted by the visual layout of the content and a standard design for the blog is consistently applied.<br>]]></summary>
    
      <category term="octopress" scheme="http://jr0cket.github.io/hexo-themes-test/tags/octopress/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Share your Revealjs slides on Github pages]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/01/share-your-revealjs-slides-on-github-pages/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/01/share-your-revealjs-slides-on-github-pages/</id>
    <published>2014-01-03T23:50:00.000Z</published>
    <updated>2014-05-13T22:21:45.000Z</updated>
    <content type="html"><![CDATA[<p>In previous articles I showed how to <a href="http://jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html" target="_blank">setup Emacs Org-reveal &amp; Reveal.js</a> to <a href="http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html" target="_blank">generate your own presentations</a> from Emacs Org-mode files.  This time I’ll show you how to publish those presentations on <a href="http://pages.github.com/" target="_blank">Github Pages</a> as I have done for <a href="http://jr0cket.github.io/slides" target="_blank">my own presentations</a>.</p>
<a id="more"></a>

<p><a href="http://pages.github.com/" target="_blank">Github Pages</a> are a great place for publishing your <a href="http://lab.hakim.se/reveal-js/" target="_blank">Reveal.js</a> presentations or any static web content.  For existing repositories you simply commit your content to a <code>gh-pages</code> branch or you can create a specific user or organisation repository and commit to the <code>master</code> branch.</p>
<blockquote><p>Github Pages are great for any websites that is self-contained, in that there is no reliance on a database or other services running locally.  You can even create great looking pages without any coding by using the Github authoring tool, as I have done with my Github user home page.</p>
</blockquote>


<h2 id="How_to_use_Github_pages">How to use Github pages</h2>
<p><strong>Existing code repositories</strong><br>If you already have a repository for your code and want to add web page documentation, then you can simply add a <code>gh-pages</code> branch and commit all your documentation to that branch.</p>
<p><strong>Content only repositories</strong><br>If you only have content then you can create a user or organisation repository.  This is a specifically named repository in the form of <code>name.github.io</code>  where name is the exact name of your Github user account or the Github organisation you are part of.</p>
<p>As my Github user account name is jr0cket I created an repository named <code>jr0cket.github.io</code>.</p>
<p>Once created, you can type in the name of this repository into your browser and it will display any content you have committed into the repository (and pushed it to Github).</p>
<p><strong>Separating slide content into their own repository</strong><br>As I planed to create a number of presentations, I use both an account repository as the home page and created a new repository called slides to host all my presentations.  This allows all my presentations to be easily cloned or forked by others easily without getting content that is only relevant to me on my Github pages home page. </p>
<p>Keeping the presentations all in one repository keeps things simple should I define my own Reveal.js themes or if there are Reveal.js updates.</p>
<p>I added  everything to the gh-pages branch (reveal.js, images, org &amp; generated html files).  Then I generate the Reveal.js slides locally using org-reveal in Emacs, so I can check they look okay.  Once I am happy with the slides I commit the html and .org files to Git and push them up to Github.</p>
<h2 id="Setting_up_a_Github_Pages_account_repository">Setting up a Github Pages account repository</h2>
<p>Creating an user repository on Github is just the same as for any other repository, except that the name must match the form name.github.io - where name is exactly the same as you Github user name.</p>
<p>I created a new repository called <code>jr0cket.github.io</code>, this has a web address (URL) of <a href="http://jr0cket.github.io" target="_blank">http://jr0cket.github.io</a></p>
<p>I used the Automatic Page Generator from Github to create the site without coding and with a handful of nice templates to choose from.  You can of course add your own HTML, CSS &amp; JavaScript if you wish.  The Automatic Page Generator is in on the Settings page of your repository, under the Github pages section.  This section shows you the repository URL and a button to generate a page for you.</p>
<p>If you are going to use your user or org repository for your slides, then jump to the secion on “Adding Reveal.js to your repository”<br>Creating a repository for your Reveal.js slides</p>
<p>If you don’t already have a Github repository for your slides (and are not using your user or org repository), go to your account on Github and create a new repository.</p>
<p>Then clone your Github repository locally (substituting the address of your repository)<br>git clone <a href="https://github.com/user/repository.git" target="_blank">https://github.com/user/repository.git</a></p>
<h2 id="Create_an_orphaned_gh-pages_branch">Create an orphaned gh-pages branch</h2>
<p>Github pages publishes content only from the branch gh-pages (unless you are using a user or org repository).  In your local repository, create a new branch called gh-pages.  According to Github, the gh-pages branch should be an orphaned branch.</p>
<pre><code><span class="built_in">cd</span> repository
git checkout --orphan gh-pages
</code></pre><p>An orphaned branch is one that is not connected to another branch, in this case its not attached to master.  Technically I don’t think gh-pages branch needs to be orphaned to publish your content, but this is the approach that Github recommends.</p>
<p>Once you have the gh-pages branch you can commit your files to that branch as normal. </p>
<pre><code>git <span class="keyword">add</span> .
git commit -m <span class="string">"First pages commit"</span>
git <span class="keyword">push</span> origin gh-pages
</code></pre><p>Pushing your Reveal.js slides at this point will not give you the desired results, as we haven’t added the Reveal.js files to the repository.  So lets do that next.</p>
<h2 id="Adding_Reveal-js_to_your_repository">Adding Reveal.js to your repository</h2>
<p>You need to provide the JavaScript and CSS files from Reveal.js to make your slides display correctly.  I copy the following folders from within the reveal.js folder into the root of my slides project</p>
<pre><code>cp /path/<span class="keyword">to</span>/revealjs/css    ~/<span class="keyword">my</span>-slides
cp /path/<span class="keyword">to</span>/revealjs/js     ~/<span class="keyword">my</span>-slides
cp /path/<span class="keyword">to</span>/revealjs/lib    ~/<span class="keyword">my</span>-slides
cp /path/<span class="keyword">to</span>/revealjs/plugin ~/<span class="keyword">my</span>-slides
</code></pre><p>You also need to check that the HTML for your web pages references Reveal.js files correctly.  The best way to do this is in the configuration for Emacs Org-reveal.</p>
<p>In my Org-reveal setup, I have defined the root for the Reveal.js files in my live-pack init.el file as follows:</p>
<pre><code><span class="list">(<span class="title">setq</span> org-reveal-root <span class="string">""</span>)</span>
</code></pre><p>So long at this org-reveal setting is loaded, it shouldn’t matter which file you add it to in your Emacs configuration.</p>
<p>The HTML you generate with Org-reveal in Emacs should have references to the Reveal.js includes in the <head> section.  Here is an example:</p>
<pre><code><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span>
<span class="tag">&lt;<span class="title">head</span>&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">title</span>&gt;</span>(My presentation title)<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"author"</span> <span class="attribute">content</span>=<span class="value">"(John Stevenson)"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"./css/reveal.min.css"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"./css/theme/jr0cket.css"</span> <span class="attribute">id</span>=<span class="value">"theme"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"./css/print/pdf.css"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">media</span>=<span class="value">"print"</span>/&gt;</span>
  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"description"</span> <span class="attribute">content</span>=<span class="value">"My presentation title"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">head</span>&gt;</span>
</code></pre><h2 id="The_final_push">The final push</h2>
<p>Then push the Reveal.js files to your Github repository (and any updated to your Org &amp; html files)</p>
<pre><code>git <span class="keyword">add</span> .
git commit -m <span class="string">"Adding Reveal.js files for presentation"</span>
git <span class="keyword">push</span> origin gh-pages
</code></pre><h2 id="Browsing_your_Slides">Browsing your Slides</h2>
<p>If you added your slides to a user or org repository, then you should be able to browse to <a href="http://name.github.io" target="_blank">http://name.github.io</a> where name is your Github user or org name (eg. <a href="http://jr0cket.github.io" target="_blank">http://jr0cket.github.io</a>).</p>
<p>If, like me, you created a seperate repository for all your slides, you can brows them by going to <a href="http://name.github.io/repo-name" target="_blank">http://name.github.io/repo-name</a> where name is your Github user name and repo-name is the name of the repository you added Reveal.js and your slides to (eg. <a href="http://jr0cket.github.io/slides" target="_blank">http://jr0cket.github.io/slides</a>).</p>
<p>Note that you need to add the html filename to the URL to browse your presentation, or as I have done add links to the page on jr0cket.github.io</p>
<h2 id="Using_Hub_as_an_alternative_way_to_create_your_Github_pages_repository">Using Hub as an alternative way to create your Github pages repository</h2>
<ul>
<li>Install <a href="http://hub.github.com/" target="_blank">Hub</a></li>
<li>Create a folder called <code>name.github.io</code> on your laptop, where <em>name</em> is your Github user name or organisation name</li>
<li>Inside that folder, initialise a git repository - <code>git init</code></li>
<li>Rename the master branch to gh-pages - <code>git branch -m gh-pages</code></li>
<li>Use hub to to create the repository on github - <code>hub create -d &quot;optional description of the repository&quot;</code></li>
</ul>
<p>If you want to specify the repository name using hub, use the command form - <code>hub create account-name.github.io -d &quot;optional description of the repository&quot;</code></p>
<ul>
<li>Create and commit your content in the local repository on the gh-branch, then push the <code>gh-pages branch to github - github push -u origin gh-pages</code></li>
</ul>
<p>The <code>-u</code> option sets github to be the default remote repository to and the gh-pages the default branch.  So when you do a push or pull you dont need to specify remote repository or branch you can just do git push and git pull</p>
<h2 id="Example_Reveal-js_presentations_on_Github_pages">Example Reveal.js presentations on Github pages</h2>
<p>See my <a href="http://jr0cket.github.io/slides" target="_blank">Github page</a> for a list of my presentations created with Emacs Org-mode and Reveal.js.</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<p>In previous articles I showed how to <a href="http://jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html" target="_blank">setup Emacs Org-reveal &amp; Reveal.js</a> to <a href="http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html" target="_blank">generate your own presentations</a> from Emacs Org-mode files.  This time I’ll show you how to publish those presentations on <a href="http://pages.github.com/" target="_blank">Github Pages</a> as I have done for <a href="http://jr0cket.github.io/slides" target="_blank">my own presentations</a>.</p>
]]></summary>
    
      <category term="revealjs" scheme="http://jr0cket.github.io/hexo-themes-test/tags/revealjs/"/>
    
      <category term="emacs" scheme="http://jr0cket.github.io/hexo-themes-test/tags/emacs/"/>
    
      <category term="presenting" scheme="http://jr0cket.github.io/hexo-themes-test/categories/presenting/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu Gnome - is it better than Ubuntu?]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2013/10/ubuntu-gnome-is-it-better-than-ubuntu.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2013/10/ubuntu-gnome-is-it-better-than-ubuntu.html/</id>
    <published>2013-10-14T22:17:00.000Z</published>
    <updated>2014-05-15T18:52:43.000Z</updated>
    <content type="html"><![CDATA[<img src="http://www.gnome.org/wp-content/themes/gnome-grass/images/gnome-logo.png" class="img-thumbnail">


<p>With a new version of <a href="http://www.ubuntu.com/" target="_blank">Ubuntu</a> this month, I asked myself if I would get more out of one of the many other Linux distributions.  Here is what I learnt.</p>
<a id="more"></a>

<p>I’ve used Ubuntu as my main Linux distribution since I changed from <a href="http://www.debian.org/" target="_blank">Debian</a> in 2005.  I started using Debian in 1995, so if I did change distributions I wanted to stay with the <em>.deb</em> packaging system which I value so much.  </p>
<p>Although I am weary of the reductions of features the Gnome team have made recently, <a href="http://ubuntugnome.org/" target="_blank"><strong>Ubuntu Gnome</strong></a> was the first alternative distribution I tried and was surprised to find I quite like it.</p>
<img src="http://3.bp.blogspot.com/-jRj631yZJzY/UlsS3eLBbrI/AAAAAAAAL3U/FKLSLdKGn_I/s1600/ubuntu-gnome-my-basic-desktop.png" class="img-code">


<p>My Ubuntu Gnome desktop using Gnome Shell and a few extensions</p>
<h2 id="Installing_Ubuntu_Gnome">Installing Ubuntu Gnome</h2>
<p>This is not any different from the normal Ubuntu install and everything went well on my Lenovo x201T.</p>
<p>I selected to install Ubuntu Gnome over the entire hard drive (SSD) and use an encrypted disk and LVM (just in case I want to re-organise partitions at a later date).  I chose to get updates and multi-media codecs (for playing music and videos) during the installation too.</p>
<p>After about 20-30 minutes I had a new OS for my laptop, all ready to use.  A quick reboot and within 10 seconds I am logging in to Ubuntu Gnome.</p>
<h2 id="First_Impressions">First Impressions</h2>
<p>Ubuntu Gnome uses Gnome shell and there is a lot of commonality between it and Ubuntu Unity desktop.  To my surprise though I found I quickly started liking Ubuntu Gnome for lots of little reasons.  It helped that I had a quick look at the <a href="https://wiki.gnome.org/GnomeShell/CheatSheet" target="_blank">Gnome Shell cheat sheet</a> which gives a great overview of the main features.</p>
<h2 id="Performance">Performance</h2>
<p>Gnome shell is really fast and responsive and I haven’t had any slow-downs as I increase the amount of apps running. As Ubuntu Unity is pretty quick too, then I don’t see any speed advantage.</p>
<p>Ubuntu Unity seems to use just a little bit more memory, but that may be due to more packages installed and extra services running (eg. UbuntuOne). Its not a significant difference.</p>
<h3 id="Automatic_Virtual_Desktops">Automatic Virtual Desktops</h3>
<p>Gnome shell automatically creates new virtual desktops as you add applications and deletes desktops when you close all apps on that desktop.  I like to keep one app per desktop, so its great that you can launch an app from the dash with the middle mouse button (the Lenovo laptops have 3 buttons) and it opens in a new desktop. When I close the app, Gnome shell tidies away my desktop, helping me keep more organised.  This is a feature I would love to have in Ubuntu.</p>
<p>Gnome Shell has vertically arranged desktops, so each desktop is stacked one on top of the other.     I quickly came to prefer this over the default grid of Ubuntu Unity.  Although you can change Unity’s grid layout with Ubuntu Tweak, I haven’t seen the ability to automatically create an delete desktops.</p>
<h2 id="The_Dash">The Dash</h2>
<p>The Gnome Shell launcher similar to Ubuntu Unity, however in Gnome Shell its attached to the overlay rather than being their on the desktop.  So with Gnome shell I only see the launcher when I press the Super key (as I always run my apps maximised).  This keeps my desktop very simple.</p>
<p>Whilst the launcher in Ubuntu Unity has lots of great features to help you launch and switch to your apps, I found I didn’t really use them.  I just set Unity to auto-hide the launcher </p>
<h2 id="Notifications">Notifications</h2>
<p>Gnome shell displays notifications on the bottom of the desktop rather than the top right corner in Ubuntu Unity. I prefer the placement in Ubuntu Unity, although they both could be smaller so they are less intrusive.</p>
<h2 id="Unwanted_software">Unwanted software</h2>
<p>There were a few packages and services that came with Ubuntu Gnome I didnt require, but not many.  The main packages I removed were:</p>
<ul>
<li>epiphany - an messaging client (I use Google for that)</li>
<li>spamassassin - email spam service (again I use Google)</li>
</ul>
<p>To remove the packages I just used the command line, as I knew the specific package names it was quicker than launching the Ubuntu software center</p>
<pre><code>apt-<span class="keyword">get</span> remove --purge <span class="package"><span class="keyword">package</span>-<span class="title">name</span></span>
</code></pre><p>To find out if there were any services running that I didnt need I use the command line again to list the status of all services currently installed:</p>
<pre><code><span class="built_in">sudo</span> service --status-all
</code></pre><p>From this command I discovered spam assassin and removed it as above.</p>
<h2 id="Gnome_Shell_Extensions"><a href="https://extensions.gnome.org/" target="_blank">Gnome Shell Extensions</a></h2>
<p>Gnome Shell allows customisations via extensions (written in JavaScript and possibly other languages) and there is <a href="https://extensions.gnome.org/" target="_blank">a website full of them</a>.  The Gnome Shell extensions are really easy to use, its just like using the Chrome or Firefox extensions.</p>
<p>Each extension on the website has an on/off switch.  Switching on prompts you to accept that the package will be installed.  For some extensions there is also a tool icon that you can press to configure the extensions once installed.  You can manage your installed extensions from <a href="https://extensions.gnome.org/local/" target="_blank">https://extensions.gnome.org/local/</a>.</p>
<p>These extensions give a really easy way to add features and Gnome Shell and without them it would have diminished the experience amd I would have stopped using Gnome Shell then and there.</p>
<p>The only issue with these extensions is that they can become outdated and break, with each release of Gnome Shell.</p>
<h3 id="Extensions_added">Extensions added</h3>
<p><strong>AppIndicator Status</strong></p>
<p>I use Dropbox to sync important files between different laptops (Linux, Mac) and although its easy to install Dropbox in Ubuntu Gnome, the status panel indicator for dropbox does not display.  By adding AppIndicator extension then the dropbox icon appears and I can control syncing of my files again.</p>
<p><strong><a href="https://extensions.gnome.org/extension/55/media-player-indicator/" target="_blank">Media Player Indicator</a></strong></p>
<p>In Ubuntu Unity you can start and control the default music player (Rhythmbox) from the volume indicator.  The Media Player Indicator adds that functionality in Gnome Shell.  It worked for Rhythmbox although the Playlists didnt show up in the volume indicator.</p>
<p><strong> <a href="https://extensions.gnome.org/extension/545/hide-top-bar/" target="_blank">Hide Top bar</a></strong></p>
<p>The biggest thing that put me off Gnome Shell at first was the wasted space at the top of the screen.  First there is the Gnome Shell menu bar, then the window decoration for the application, then the application menu and then the content of the app. From what I have read (cheat sheet) Gnome Shell will go the same route as Ubuntu Unity and put app menus in the top panel, making better use of the space.  Until then, I find <a href="https://extensions.gnome.org/extension/545/hide-top-bar/" target="_blank">Hide Tob Bar</a> very welcome.  I have it set to auto hide and only show when the mouse approaches it.</p>
<p><strong><a href="https://extensions.gnome.org/extension/690/easyscreencast/" target="_blank">EasyScreenCast</a></strong></p>
<p>Gnome Shell as screen casting software built in so you can record your desktop using <code>Control+Shift+Alt+R</code>.  Rather than have to remember that keyboard combo, EasyScreenCast gives you and indicator to control the recording.</p>
<p>EasyScreenCast seems to work really well and uses the <a href="http://www.webmproject.org/" target="_blank">webm codec</a> by default, so you can just upload that straight to YouTube.</p>
<h3 id="Extensions_to_look_at_later">Extensions to look at later</h3>
<p><a href="https://extensions.gnome.org/extension/719/fast-user-switch/" target="_blank">Fast user switch</a> - enables you to switch users without having to go via gdm</p>
<p><a href="https://extensions.gnome.org/extension/584/taskbar/" target="_blank">Task bar</a> - displays icons of running applications on the top panel.  If I run more than one app per desktop this may be useful.</p>
<p><a href="https://extensions.gnome.org/extension/508/uptime-indicator/" target="_blank">Uptime indicator</a> - shows how long in minutes it has been since the last boot.  Clicking on the indicator shows you the time Ubuntu Gnome was started.</p>
<p><a href="https://extensions.gnome.org/extension/53/pomodoro/" target="_blank">Pomodoro time</a> - gives you a countdown to timebox work into 25 minute sessions. This pomodoro technique helps you concentrate on one task and get it done well.</p>
<p><a href="https://extensions.gnome.org/extension/11/monitor-status-indicator/" target="_blank">Monitor status indicator</a> - a short-cut for the display controls to quickly manage your display settings.  I had a few problems with a second monitor, not sure if its this extension of Gnome Shell.</p>
<h2 id="Summary">Summary</h2>
<p>I like Ubuntu Gnome and Gnome Shell enough to give it a try for a few more weeks until the final versions of <a href="http://www.ubuntu.com/" target="_blank">Ubuntu</a> and <a href="http://ubuntugnome.org/" target="_blank">Ubuntu Gnome</a> are released. My Lenovo X201T is my spare laptop, so it doesn’t matter if something breaks, I can still do work on my my Lenovo X1 carbon, running Ubuntu.</p>
<p>Things in Ubuntu Gnome are changing quite a bit and there is a tendency for Gnome Shell extensions to break with new releases.  To see what is coming next have a look at the <a href="http://www.omgubuntu.co.uk/2013/09/10-best-features-gnome-3-10" target="_blank">Gnome 3.10 features and changes</a>.</p>
<p>One thing that may make a difference is that both distributions will be replacing X windows.  Ubuntu has created <a href="https://wiki.ubuntu.com/Mir/" target="_blank">Mir</a> and the Gnome project is behind <a href="https://wiki.gnome.org/Wayland" target="_blank">Wayland</a>.  Its going to be interesting to see which approach works out best over the next few releases.</p>
<blockquote><p>I did try <a href="https://www.archlinux.org/" target="_blank">Arch Linux</a> for a weekend and although there are some great things with the distribution, for now it just seems to eat too much time in setting everything up and learning the different tooling.  Although there is a lot of documentation, I found myself having to read pages and pages of content and not always finding the answers I was looking for.</p>
</blockquote>


<h2 id="6_month_later">6 month later</h2>
<p>I am still using Ubuntu as my prefered Linux distribution.  Gnome Shell has still a long way to come to offer the features I need and the extensions I want to use break to often to be fun fixing.</p>
<p>When Gnome Shell becomes more evolved and incorporates Wayland, then it will be time to give it another try and see how it stacks up to Ubuntu, Unity and Mir.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank">@jr0cket</a></p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://www.gnome.org/wp-content/themes/gnome-grass/images/gnome-logo.png" class="img-thumbnail">


<p>With a new version of <a href="http://www.ubuntu.com/" target="_blank">Ubuntu</a> this month, I asked myself if I would get more out of one of the many other Linux distributions.  Here is what I learnt.</p>
]]></summary>
    
      <category term="ubuntu" scheme="http://jr0cket.github.io/hexo-themes-test/tags/ubuntu/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.github.io/hexo-themes-test/categories/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sublime Text on Ubuntu]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2013/09/sublime-text-on-ubuntu.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2013/09/sublime-text-on-ubuntu.html/</id>
    <published>2013-09-03T11:32:00.000Z</published>
    <updated>2014-05-09T20:34:47.000Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-zZtRA_8X4Xg/UiXECID9V5I/AAAAAAAAK9s/ucg-FQrgWso/s1600/sublime-text-screenshot.png" class="img-thumbnail">


<p><a href="http://www.sublimetext.com/" target="_blank">Sublime Text</a>&nbsp;is a really popular text editor will great language support and a lot of plugin features that are geared towards software developers.</p>
<p>Although I’m usually in Emacs, lots of people have asked me how best to set Sublime Text on Ubuntu, so here is my prefered method.</p>
<a id="more"></a>

<h2 id="Download_Sublime_Text">Download Sublime Text</h2>
<p>As Sublime is not part of the Ubuntu package management system (apt-get), it requires a manual download and install. &nbsp;Download the latest version from the <a href="http://www.sublimetext.com/" target="_blank">Sublime Text front page</a> (it should give you a button specific to the OS you are currently using, i.e. Ubuntu). </p>
<p>The download will be an archive file like zip but using the Unix commands tar and bzip2.</p>
<h2 id="Extract_the_Sublime_Text_archive">Extract the Sublime Text archive</h2>
<p>You can extract the whole archive by right-clicking on the file in the file browser (nautilus) and selecting <em>Extract here</em></p>
<blockquote>
<p>You can also double clicking and selecting the Extract button when the archive manager app opens or use the following command in a terminal: tar jvxf “Sublime Text 2.0.2 x64.tar.bz2”</p>
</blockquote>
<h2 id="Install_Sublime_Text_in_/opt">Install Sublime Text in /opt</h2>
<p>I usually place 3rd party software in the folder <code>/opt</code> although you could use <code>/usr/local</code>.</p>
<blockquote>
<p>You just create an apps folder in your own home directory if you use only one login account with Ubuntu.</p>
</blockquote>
<p>Create a &nbsp;folder to contain the Sublime Text app using the following command in a terminal: </p>
<pre><code><span class="built_in">sudo</span> mkdir /opt/sublime
</code></pre><blockquote>
<p>I am assuming that we will download new versions occasionally and have other apps installed in /opt.</p>
</blockquote>
<p>Move the folder and all its contents extracted from the sublime text archive file:</p>
<pre><code>sudo mv ~<span class="regexp">/Downloads/</span><span class="constant">Sublime</span>\ <span class="constant">Text</span>\ <span class="number">2</span> &amp;nbsp;<span class="regexp">/opt/sublime</span>
</code></pre><p>Create a symbolic link called <code>current</code> that points to the folder you have just moved. </p>
<pre><code>ln -s /opt/sublime/Sublime<span class="command">\ </span>Text<span class="command">\ </span>2 <span class="special">&amp;</span>nbsp;/opt/sublime/current
</code></pre><blockquote>
<p>If you do upgrade the version of Sublime, simply download the new version and extract it into the /opt/sublime folder, then just delete the symbolic link and create a new one to point to the new folder.</p>
</blockquote>
<h2 id="Add_Sublime_Text_to_path_to_run_it_from_anywhere">Add Sublime Text to path to run it from anywhere</h2>
<p>Rather than add the sublime folder to the path and making it messy, I create a little bash script that simply calls sublime. &nbsp;Create a new file by launching an editor, use <span style="font-family: Courier New, Courier, monospace;">gksudo</span> if you are launching a graphical editor as the file will be created in the protected part of the file system:</p>
<pre><code>gksudo gedit /usr/<span class="keyword">local</span>/bin/sublime
</code></pre><p>Add the following script to this file that will change to the folder where the sublime binaries live and then run its usual starup script. &nbsp;The <code>$*</code> ensures that any parameters such as file names you pass to the script are passed on to the sublime start-up script.</p>
<pre><code><span class="shebang">#!/bin/sh</span>
<span class="built_in">cd</span> /opt/sublime/current
./sublime_text $* &amp;
</code></pre><p>Save the file and close the editor.  You have make a new script called sublime on the executable path. &nbsp;However, we still need to give this new script permission to be executed.</p>
<p>Use the following command in a terminal window to make the bash script file executable for every user:</p>
<pre><code>sudo chmod <span class="operator">a</span>+x /usr/<span class="built_in">local</span>/bin/sublime
</code></pre><p>You can now call sublime from anywhere and even call it with a file name or path/file name arguments.</p>
<p>Enjoy Sublime text and if you find its not for you there is always Emacs :)</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-zZtRA_8X4Xg/UiXECID9V5I/AAAAAAAAK9s/ucg-FQrgWso/s1600/sublime-text-screenshot.png" class="img-thumbnail">


<p><a href="http://www.sublimetext.com/" target="_blank">Sublime Text</a>&nbsp;is a really popular text editor will great language support and a lot of plugin features that are geared towards software developers.</p>
<p>Although I’m usually in Emacs, lots of people have asked me how best to set Sublime Text on Ubuntu, so here is my prefered method.</p>
]]></summary>
    
      <category term="sublimetext" scheme="http://jr0cket.github.io/hexo-themes-test/tags/sublimetext/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.github.io/hexo-themes-test/tags/ubuntu/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Manage your developer life with Emacs Org-mode - an overview]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2013/08/manage-dev-life-with-emacs-org-mode.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2013/08/manage-dev-life-with-emacs-org-mode.html/</id>
    <published>2013-08-22T12:39:00.000Z</published>
    <updated>2014-05-13T17:41:05.000Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">


<p>As a busy developer I end up working on several projects, documents &amp; books at the same time. &nbsp;I want a simple way to capture notes where I don’t have to worry about formatting. &nbsp;I also want to keep a track on all the things I am working on. &nbsp;As I do most of my coding &amp; writing with Emacs, then I was sure it had something that could help.</p>
<a id="more"></a>

<h2 id="Enter_Org-mode">Enter Org-mode</h2>
<p>Org-mode is a really simple and beautiful way to take notes, create presentations, organise thoughts and help you manage tasks across all your work. &nbsp;The latest versions of Emacs (23.x / 24.x) have Org-mode built in, so you can use it straight away with <code>M-x org-mode</code>.</p>
<p>Org-mode documents are plain text, so they are easy to write and understand even outside of Emacs. &nbsp;The magic is happens when Org-mode interacts with that text. &nbsp;Org-mode understands the structure of the text and lets you easily organise everything into something useful.</p>
<p>I have written <a href="http://jr0cket.co.uk/2013/08/config-emacs-org-mode-to-manage-tasks.html" target="_blank"><strong>a simple guide to configuring Org-mode and Org-capture</strong></a>, as well as<strong> <a href="http://jr0cket.co.uk/2013/08/defining-custom-workflow-with-Emacs-org-mode.html" target="_blank">a guide to creating your own task workflow</a></strong> for Org-mode.</p>
<p>Here is a quick YouTube video overview of Org-mode for Emacs by <a href="http://www.youtube.com/user/rpdillon?feature=watch" target="_blank">Richard Dillon</a>, to understand the keyboard short-cuts used (key bindings) then see his <a href="https://github.com/rpdillon/hack-emacs-notes" target="_blank">Org-mode notes</a> on Github. &nbsp;Or if you are already hooked on the idea of Org-mode then see the In-depth guide at the end of this article.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/6W82EdwQhxU" frameborder="0" allowfullscreen></iframe></div>

<p><em>Hack Emacs: Introduction to Org-mode</em></p>
<p>You can also take a look at&nbsp;<a href="http://www.youtube.com/watch?v=oJTwQvgfgMM" target="_blank">Carsten Dominik&nbsp;talking about Org-mode</a> from the Google Tech Talks back in 2008, the content is still relevant.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/oJTwQvgfgMM" frameborder="0" allowfullscreen></iframe></div>



<h2 id="Using_Org-capture_to_track_tasks">Using Org-capture to track tasks</h2>
<p>Org-capture provides an easy way to create a list of all those tasks you want to do across all the text files you are working with. &nbsp;You create a comment in the file you are working in then with the cursor over that comment you create a new task using <strong>org-capture</strong>.  This opens up a file that holds your current tasks and using a template it creates a task that links back to the file where you made your comment. &nbsp;When you open this link it takes you back to the file and to the exact position you created the task from.</p>
<p>I will show you how to set up and use org-capture with Emacs and Emacs live in the next article of this series.</p>
<h2 id="Creating_presentations_for_developers">Creating presentations for developers</h2>
<p>You can easily create an interactive presentation with org-mode and more importantly for developers interact with real source code in a tool that knows how to process that code. &nbsp;If you want to publish this you can put your <code>.org</code> file on Github or export your presentation as HTML and other formats.</p>
<p>so you dont need to spend time on creating fancy spinning presentations with JavaScript or yet another boring power point presentation and fill it with static screen shots.</p>
<h2 id="Learning_Org-mode">Learning Org-mode</h2>
<p>The best place to start learning Org-mode is its website:&nbsp;<a href="http://orgmode.org/" target="_blank">http://orgmode.org/</a>. &nbsp;I found the <a href="http://orgmode.org/guide/" target="_blank">compact guide</a> a great introduction and it got me going quickly. &nbsp;I will also be writing a few follow-on articles on specific topics like task management and presentations.</p>
<p>You can also watch the <a href="http://www.youtube.com/watch?v=nsGYet02bEk" target="_blank">Emacs Org-mode In-depth video</a>, again by&nbsp;<a href="http://www.youtube.com/user/rpdillon?feature=watch" target="_blank">Richard Dillon</a></p>
<div class="video-container"><iframe src="//www.youtube.com/embed/nsGYet02bEk" frameborder="0" allowfullscreen></iframe></div>

<p><em>Emacs Org-mode in depth</em></p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">


<p>As a busy developer I end up working on several projects, documents &amp; books at the same time. &nbsp;I want a simple way to capture notes where I don’t have to worry about formatting. &nbsp;I also want to keep a track on all the things I am working on. &nbsp;As I do most of my coding &amp; writing with Emacs, then I was sure it had something that could help.</p>
]]></summary>
    
      <category term="emacs" scheme="http://jr0cket.github.io/hexo-themes-test/tags/emacs/"/>
    
      <category term="orgmode" scheme="http://jr0cket.github.io/hexo-themes-test/tags/orgmode/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Starting Nodejs development on Ubuntu]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2013/03/starting-nodejs-development-on-ubuntu.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2013/03/starting-nodejs-development-on-ubuntu.html/</id>
    <published>2013-03-25T14:37:00.000Z</published>
    <updated>2014-05-14T00:11:08.000Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-bIFaJwok1vI/UVA3jCluB-I/AAAAAAAAJM0/-rtRbVUQ4no/s1600/Nodejs_logo_light.png" class="img-thumbnail">


<p><a href="http://nodejs.org/" target="_blank">nodejs</a> is a very popular framework for JavaScript development, but as I found out at the <a href="http://www.meetup.com/London-MongoDB-User-Group/events/106898042/" target="_blank">MongoDB hackathon</a>  its not that straight forward to get going.  So here is a quick guide to get going with Node.js on <a href="http://www.ubuntu.com" target="_blank">Ubuntu</a>.</p>
<a id="more"></a>

<h2 id="Installing_nodejs_on_Ubuntu">Installing nodejs on Ubuntu</h2>
<p>Whilst there is a nodejs package in Ubuntu, it is version 0.6.9 and therefore quite a way behind the current version on the nodejs website.  So lets do a manual install with the latest version, 0.10.1.</p>
<blockquote>
<p>I since found an <a href="http://slopjong.de/2012/10/31/how-to-install-the-latest-nodejs-in-ubuntu/" target="_blank">alternative approach using ppa’s</a> but haven’t tried it out.</p>
</blockquote>
<img src="http://4.bp.blogspot.com/-WY7IRkhNpOU/UVA0m8Ly9cI/AAAAAAAAJMk/Sb1d7i8Mocs/s1600/nodejs-homepage-install.png" class="img-code">


<p>Download the install archive file and extract it.  I chose to do this in a folder called apps in my home folder.  Alternatively you could install it in <code>/opt/</code> or <code>/usr/local</code></p>
<pre><code>mkdir ~/apps/nodejs
tar zvxf node-v0<span class="number">.10</span><span class="number">.1</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>
</code></pre><h2 id="Compile_nodejs">Compile nodejs</h2>
<p>As we are doing a manual install, we need to build nodejs to get the actual executable files.  This requires a C compiler on your laptop which is not installed by default.  So either use the Ubuntu software center to install the package <code>g++</code> or use the command line</p>
<pre><code><span class="built_in">sudo</span> apt-get install g++
</code></pre><p>To compile nodejs, first we run configuration to check all the neccessary external libraries are there and then we make node:</p>
<pre><code>./configure
<span class="built_in">make</span>
</code></pre><h2 id="Adding_node_to_your_command_path">Adding node to your command path</h2>
<p>Add the following to your environment in your <code>~/.bashrc</code> file (or <code>.zshrc</code> file if you are running zshell).  I moved the node executable file created by the compile process into a folder called bin, so I knew which was the right file to run.  Then I added that folder to the path.</p>
<pre><code><span class="keyword">export</span> NODEJS_HOME=/home/jr0cket/apps/nodejs/bin
<span class="keyword">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$NODEJS_HOME</span>
</code></pre><p>I am using an environment variable called NODEJS_HOME as a convienience.  You can just add the whole path in one line.</p>
<h2 id="Installing_NPM_-_the_node_package_manager">Installing NPM - the node package manager</h2>
<img src="http://3.bp.blogspot.com/-JJakqhflSfw/UVA4AMjSKAI/AAAAAAAAJM8/BbLzQXPlQbw/s1600/npm-logo.png" class="img-thumbnail">


<p>The node package manager is a great way to get additional libraries into  your node projects.  It does not come with node itself, so you have to install it seperately.  Npm also needs node installed first.</p>
<p>On the node package manager website, the install process is defined as the following command:</p>
<pre><code>curl https://npmjs<span class="preprocessor">.org</span>/install<span class="preprocessor">.sh</span> | sh
</code></pre><p>In my manual install (not using Ubuntu packages) then node and npm are created in different folders.  So I put the npm executable file in the same bin folder I created previously for node, which I had already added that to the executable path.</p>
<p>Once npm is installed you can search for and install packages.  If you the <code>-g</code> option for npm install then the modules will be installed globally, otherwise any modules will be local to your project in an npm-modules folder.</p>
<p>Search for modules:</p>
<pre><code><span class="built_in">npm</span> search mongodb <span class="reserved">native</span>
</code></pre><p>Install modules locally or globally:</p>
<pre><code>npm <span class="keyword">install</span> mongodb
npm <span class="keyword">install</span> -g mongodb
</code></pre><h2 id="Testing_out_node_locally">Testing out node locally</h2>
<p>You can run an interactive session for nodejs (the node REPL) using the command:</p>
<pre><code>node
</code></pre><p>Then you can just enter JavaScript code and it is evaluated immediately.  You can also run code in files by using the command:</p>
<pre><code>node filename<span class="preprocessor">.js</span>
</code></pre><p>So lets create a simple “Hello World” app for nodejs in a file called web.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);
<span class="keyword">var</span> app = express.createServer(express.logger());

app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span><span class="params">(request, response)</span> {</span>
  response.send(<span class="string">'Hello World!'</span>);
});

<span class="keyword">var</span> port = process.env.PORT || <span class="number">5000</span>;
app.listen(port, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  console.log(<span class="string">"Listening on "</span> + port);
});
</pre></td></tr></table></figure>


<p>Running this with <code>node web.js</code> we get “Hello World” as the output.</p>
<h2 id="Testing_out_node_on_Heroku">Testing out node on Heroku</h2>
<p>nodejs is one of the languages supported on Heroku (a cloud service that gives developers a sane way to deploy and scale their apps).  Deploying this nodejs app on Heroku is therefore really trivial.</p>
<p>Heroku can usually work out what to do with many projects, based on the language and framework used.  However, just to be specific lets create a <code>Procfile</code> to tell node which is our entry point to our application.  In  this case we want node to start with the file <code>web.js</code></p>
<pre><code><span class="attribute">web</span>: <span class="string">node web.js</span>
</code></pre><p>Lets version the project with git</p>
<pre><code>git init
git add .
git <span class="operator"><span class="keyword">commit</span> -m <span class="string">"Initial project setup"</span></span>
</code></pre><p>Then we can create an app on Heroku that we can deploy too - you will need an <a href="http://www.heroku.com" target="_blank">Heroku account</a> and download the <a href="http://toolbelt.heroku.com" target="_blank">Heroku toolbelt</a>.</p>
<pre><code>heroku <span class="operator"><span class="keyword">create</span></span>
</code></pre><p>Heroku adds a new remote to our git project called heroku, so we can push our code to our app.</p>
<p>Now that our project is ready to deploy, lets push all the code to the  heroku application you created using git push, specifying the branch you are pushing (usually <code>master</code>)</p>
<pre><code>git <span class="keyword">push</span> heroku master
</code></pre><p>Now open the node website in a browser using the URL given after the upload of your code via git push, or just the command</p>
<pre><code>heroku <span class="keyword">open</span>
</code></pre><img src="http://1.bp.blogspot.com/-m6l3bhlBB-Q/UVAoqU5PTeI/AAAAAAAAJMU/7OwfgCtBlTY/s1600/nodejs-website-helloworld.png" class="img-code">


<p>There is a nice <a href="https://devcenter.heroku.com/articles/nodejs" target="_blank">article about nodejs on heroku</a> with examples of wiring node up to various data sources too.</p>
<h2 id="Learning_JavaScript_nodejs">Learning JavaScript nodejs</h2>
<p>Now for the fun part, learning how to program in nodejs and seeing how much JavaScript I can remember.  Here are some resource I found in the few hours I spent trying to learn about nodejs.</p>
<p>David Crockford has lots of great resources to help you write great JavaScript: </p>
<ul>
<li><a href="http://javascript.crockford.com/" target="_blank">JavaScript website</a></li>
<li><a href="http://www.youtube.com/results?search_query=crockford+on+javascript" target="_blank">YouTube videos</a> </li>
<li><a href="http://yuiblog.com/crockford/" target="_blank">Crockford on Javascript video series</a></li>
<li><a href="http://nodejs.org/" target="_blank">NodeJS</a></li>
<li><a href="https://npmjs.org/" target="_blank">Node Package Manager</a></li>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/node-js-for-beginners/" target="_blank">Nodejs for beginners</a></li>
<li><a href="http://howtonode.org/" target="_blank">HowToNode</a> - community supported blog to teach fundamental concepts for writing effective code along with various other tips.</li>
<li><a href="http://requirejs.org/" target="_blank">RequireJS</a> - optimising file and module loader for JavaScript, can combine all your code into one file for faster loading</li>
<li><a href="https://github.com/dannycoates/node-inspector" target="_blank">Node-inspector</a> - Web Inspector based nodeJS debugger</li>
<li><a href="http://docs.nodejitsu.com/" target="_blank">Nodejitsu</a> - a growing collection of node.js how-to articles from the community, range from basic to advanced.</li>
<li><a href="http://superherojs.com/" target="_blank">Superhero.js</a> - a collection of articles, presentations and videos </li>
<li><a href="https://groups.google.com/forum/?fromgroups=#!forum/nodejs" target="_blank">Nodejs google group</a>** </li>
<li><a href="http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js" target="_blank">Suggestions of learning materials on Stack Exchange</a></li>
</ul>
<h3 id="Some_semi-related_links">Some semi-related links</h3>
<ul>
<li><a href="http://blog.deadpansincerity.com/2011/05/setting-up-emacs-as-a-javascript-editing-environment-for-fun-and-profit/" target="_blank">Setting up emacs as a javascript editing environment</a></li>
<li><a href="http://playground.webflow.com/" target="_blank">Webflow CSS3 playground</a></li>
</ul>
<p>Good luck with your JavaScript and node projects.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank">@jr0cket</a></p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-bIFaJwok1vI/UVA3jCluB-I/AAAAAAAAJM0/-rtRbVUQ4no/s1600/Nodejs_logo_light.png" class="img-thumbnail">


<p><a href="http://nodejs.org/" target="_blank">nodejs</a> is a very popular framework for JavaScript development, but as I found out at the <a href="http://www.meetup.com/London-MongoDB-User-Group/events/106898042/" target="_blank">MongoDB hackathon</a>  its not that straight forward to get going.  So here is a quick guide to get going with Node.js on <a href="http://www.ubuntu.com" target="_blank">Ubuntu</a>.</p>
]]></summary>
    
      <category term="javascript" scheme="http://jr0cket.github.io/hexo-themes-test/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://jr0cket.github.io/hexo-themes-test/tags/nodejs/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.github.io/hexo-themes-test/tags/ubuntu/"/>
    
      <category term="javascript" scheme="http://jr0cket.github.io/hexo-themes-test/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu on Lenovo X1 Carbon - Tweaking the desktop]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2013/03/ubuntu-on-lenovo-x1-carbon-tweaking-the-desktop/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2013/03/ubuntu-on-lenovo-x1-carbon-tweaking-the-desktop/</id>
    <published>2013-03-16T14:42:00.000Z</published>
    <updated>2014-05-08T23:08:56.000Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-pfixqqRGL5c/UUOcTFUeF4I/AAAAAAAAJLE/6sPtWcG4gEs/s1600/ubuntu-tweak-home-page.png" class="img-thumbnail">


<p>There are a few little tweaks that I find make using <a href="Ubuntu">http://www.ubuntu.com</a> desktop just that little bit nicer.  The easiest way I have found to make these changes is using <a href="http://ubuntu-tweak.com/" target="_blank">Ubuntu Tweak</a>.</p>
<a id="more"></a>

<h2 id="Installing_Ubuntu_Tweak">Installing Ubuntu Tweak</h2>
<p>The easiest way is to go to the Ubuntu Tweak website and click on the Download Now button.  This asks you to save a .deb file.  Double clicking on this .deb file opens the Ubuntu software center and lets you install the software and any depenencies.</p>
<h2 id="Natural_Scrolling_(like_the_new_Mac_OSX)">Natural Scrolling (like the new Mac OSX)</h2>
<p>Having used a MacBook Pro for work for the last 6 months I got used to the <em>reversed</em> way of scrolling, introduced to make desktops scroll like tablets.  After a few weeks I grew to like this “reversed” scrolling so wanted it for the new laptop.</p>
<p>In the next version of Ubuntu, 13.04, this reversed scrolling is called Natural Scrolling.  For Ubuntu 12.04 it can be switched on using Ubuntu Tweak in the section <strong>Tweaks &gt; Accessories</strong></p>
<img src="http://3.bp.blogspot.com/-tXORsbuAXR8/UUOf11ZFPtI/AAAAAAAAJLM/qYLjs_kvQMw/s1600/ubuntu-tweak-natural-scrolling.png">


<h2 id="Virtual_Desktops">Virtual Desktops</h2>
<p>I usually like to have one application running per desktop and often have quite a few apps running at any one time.  Whilst Ubuntu has 4 virtual desktops by default, I prefer to go one level bigger and have 9.  Again this is easily done with Ubuntu Tweak in section <strong>Tweaks &gt; Workspaces</strong>.</p>
<img src="http://1.bp.blogspot.com/-BHqEWKbB6y4/UUOjQWG7ckI/AAAAAAAAJLU/AHQ-FE5ftsE/s1600/ubuntu-tweak-nine-workspaces.png">


<p>With nine virtual desktops I can now get going with some coding, once I have set up my development environments.  That will be in the next post.</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-pfixqqRGL5c/UUOcTFUeF4I/AAAAAAAAJLE/6sPtWcG4gEs/s1600/ubuntu-tweak-home-page.png" class="img-thumbnail">


<p>There are a few little tweaks that I find make using <a href="Ubuntu">http://www.ubuntu.com</a> desktop just that little bit nicer.  The easiest way I have found to make these changes is using <a href="http://ubuntu-tweak.com/" target="_blank">Ubuntu Tweak</a>.</p>
]]></summary>
    
      <category term="lenovo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/lenovo/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.github.io/hexo-themes-test/tags/ubuntu/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.github.io/hexo-themes-test/categories/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu on Lenovo X1 Carbon - let there be light and sound]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2013/03/ubuntu-on-lenovo-x1-carbon-let-there-be-light-and-sound/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2013/03/ubuntu-on-lenovo-x1-carbon-let-there-be-light-and-sound/</id>
    <published>2013-03-16T09:00:00.000Z</published>
    <updated>2014-05-13T23:13:13.000Z</updated>
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJJ8/oNaVgTQmlWA/s1600/lenovo-carbon1.jpg" class="img-thumbnail">


<p>So I bought the Lenovo X1 Carbon for development and an important part of that is having some good tunes to listen too.  As I also travel a lot, its also useful to have a good display for movies and screen-casts.</p>
<p>Well, the X1 Carbon give great results in both sound and vision.</p>
<a id="more"></a>

<h2 id="Testing_the_speakers">Testing the speakers</h2>
<img src="http://1.bp.blogspot.com/-HBV4FJ9nfD8/UUN6M0NG16I/AAAAAAAAJKs/N83SXlOiA14/s1600/Rhythmbox-Is-the-Default-Player-for-Ubuntu-12-04.jpg" class="img-code">


<p>Ubuntu comes with Rythmbox music player and manager installed by default, so all it took to test the sound was to copy over some mp3 and flac audio files. </p>
<blockquote><p>When installing Ubuntu, I selected the option to install the software needed to play proprietary music formats like mp3</p>
</blockquote>


<p>The sound came through brilliantly through stereo speakers located near the front of each side of the laptop.  There are two thin slits that let produce great sound without letting any dirt in.</p>
<p>As noted in <a href="http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-first.html" target="_blank">my first post on the X1 Carbon</a>, the volume controls work just fine in Ubuntu (although the mic mute button does not work).</p>
<h2 id="Testing_video_playback">Testing video playback</h2>
<p>To test the playback I fired up YouTube and played some HD def music videos.  I have been enjoying Lindsey Sterling the last few months, so I fired up a few of her videos.  There is a great one where she is in a man made giant ice structure.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/aHjpOzsQ9YI" frameborder="0" allowfullscreen></iframe></div>


<p>The video playback is just as great as the sound and not sign of jumping even with High Definition video.</p>
<img src="http://3.bp.blogspot.com/-lQv0hasSvy8/UUN81JyKaWI/AAAAAAAAJK0/n_SMXLPXX9E/s1600/Lindsey-Sterling-Crystalise-video-dark-sky.png" class="img-code">


<p>A screen grab of Lindsey Sterling, Crystallize from her <a href="http://www.youtube.com/user/lindseystomp" target="_blank">YouTube channel</a>.  The screen-shot doesn’t really do the actual video playback justice.  Even on farily low brightness, the display really shows off the quality of the screen.</p>
<p>With a matt screen in widescreen format and IPS giving lots of brightness, the Lenovo X1 Carbon will be a a great portal movie player on long trips.</p>
<p>Finally I tested my <a href="http://www.amazon.co.uk/Logitech-981-000177-Gaming-Headset-G330/dp/B002KKM5GA/" target="_blank">Logitech gaming headset</a> and Ubuntu detected them correctly and they show up in the Sound settings.</p>
<p>More adventures with Ubuntu on Lenovo in future posts.</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJJ8/oNaVgTQmlWA/s1600/lenovo-carbon1.jpg" class="img-thumbnail">


<p>So I bought the Lenovo X1 Carbon for development and an important part of that is having some good tunes to listen too.  As I also travel a lot, its also useful to have a good display for movies and screen-casts.</p>
<p>Well, the X1 Carbon give great results in both sound and vision.</p>
]]></summary>
    
      <category term="lenovo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/lenovo/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.github.io/hexo-themes-test/tags/ubuntu/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.github.io/hexo-themes-test/categories/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu on Lenovo X1 Carbon - Tweaking the bios and added security]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2013/03/ubuntu-on-lenovo-x1-carbon-tweaking-bios-and-security/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2013/03/ubuntu-on-lenovo-x1-carbon-tweaking-bios-and-security/</id>
    <published>2013-03-15T18:00:00.000Z</published>
    <updated>2014-05-13T22:36:24.000Z</updated>
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJKA/-3aHKq5wJwc/s1600/lenovo-carbon1.jpg" class="img-thumbnail">


<p>I have a lovely new Lenovo X1 Carbon and to make it even better I am installing <a href="http://www.ubuntu.com" target="_blank">Ubuntu</a>.  The installation should be a breeze as Lenovo laptops are usually well supported, the only thing I configured was in the BIOS.  I wanted to check the boot order and see what the boot menu key was so I could install Ubuntu from a USB memory stick (boot menu key is F12).</p>
<a id="more"></a>

<p>Pressing the little “Thinkpad” button next to the volume controls whist the laptop is first booting gives you an option to go into the bios. </p>
<h2 id="Secure_Boot_and_the_boot_order">Secure Boot and the boot order</h2>
<p>Once the BIOS control panel had loaded up, In the overview section I noticed that Secure Boot was enabled.  So I looked through all the sections and found an option to turn it off.  I also changed the boot order so that USB memory sticks can be used to boot from.  Saving the changes rebooted the machine and I pressed F12 on restart to select the USB stick I had created for the Ubuntu installation.</p>
<p>Apart from thinking of a good name for my new laptop, the install was really easy.  I decided to use the whole hard drive (SSD) space for Ubuntu and ditch windows 8 completely.  There were 3 recovery partitions that come with the laptop if I wanted to keep windows for a later date.  I did not.</p>
<img src="http://3.bp.blogspot.com/-i09UXqkk_3E/UUMtyYQNciI/AAAAAAAAJKc/N1oz7QeNT5E/s1600/ubuntu-install-cfdisk.png" class="img-code">


<p><em>Disk partition information from: sudo cfdisk</em></p>
<h2 id="Added_security_and_partition_flexibility">Added security and partition flexibility</h2>
<p>I decided to encrypt the whole laptop and this works really well.  For the rare occasion I shut down or restart the laptop, I get prompted as Ubuntu starts up to enter the password to unlock the encrypt drive.</p>
<p>I also decided to install Logical Volume Managment (LVM), just in case I needed to play around with the partition sizes.  As I have a 180GB SSD hard drive, I probably wont need to but it should not add a noticeable overhead.</p>
<p>One thing that is missing is a swap partition, but the only upshot of this on a laptop with 8GB is that hibernate has knowhere to write to, so its currently disabled.  I’ll probably manually partition the laptop when Ubuntu 13.04 comes out (25th April).</p>
<p>To finish off the install I just chose a name for the laptop and the usual username/password and everything was done in less than 30 minutes. I didn’t need to do anything to boot into the installed version of Ubuntu.</p>
<p>Next I’ll check out how well sound and video works.</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJKA/-3aHKq5wJwc/s1600/lenovo-carbon1.jpg" class="img-thumbnail">


<p>I have a lovely new Lenovo X1 Carbon and to make it even better I am installing <a href="http://www.ubuntu.com" target="_blank">Ubuntu</a>.  The installation should be a breeze as Lenovo laptops are usually well supported, the only thing I configured was in the BIOS.  I wanted to check the boot order and see what the boot menu key was so I could install Ubuntu from a USB memory stick (boot menu key is F12).</p>
]]></summary>
    
      <category term="lenovo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/lenovo/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.github.io/hexo-themes-test/tags/ubuntu/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.github.io/hexo-themes-test/categories/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu on Lenovo X1 Carbon - First Impressions are great]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2013/03/ubuntu-on-lenovo-x1-carbon-first.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2013/03/ubuntu-on-lenovo-x1-carbon-first.html/</id>
    <published>2013-03-14T23:21:00.000Z</published>
    <updated>2014-05-13T22:40:43.000Z</updated>
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJJ8/oNaVgTQmlWA/s1600/lenovo-carbon1.jpg" class="img-thumbnail">


<p>After a bit of research on the level of <a href="Ubuntu">http://www.ubuntu.com</a> support, I decided to get a Lenovo X1 Carbon for my new development machine.  </p>
<p>If you have never seen the X1 Carbon, its like a really special edition of a Mac Book Air, except much more awesome and more powerful.  Here are my impressions so far.</p>
<a id="more"></a>

<p>The things I value the most are:</p>
<ul>
<li>Fast Processor - i7 cpu @ 2GHz dual core &amp; hyperthreading CPU (virtual 4 cores)</li>
<li>Decent size RAM - 8 Gb</li>
<li>14” Matt screen display with IPS for a very bright screen</li>
<li>Thin bezel around the display means it sits in a 13” form factor</li>
<li>High Definition resolution - 1600x900</li>
<li>Decent battery life, 4 to 5 hours and a 30 minute quick charge to 80% full</li>
<li>A really great keyboard - perfect for Emacs and command line junkies</li>
<li>A hardware switch for WiFi and  Bluetooth</li>
<li>It comes in black, as all technology should </li>
</ul>
<p>The most important thing is that it runs <a href="Ubuntu">http://www.ubuntu.com</a> and it runs Ubuntu very fast!!</p>
<h2 id="Great_Ubuntu_support_so_far">Great Ubuntu support so far</h2>
<img src="http://2.bp.blogspot.com/-2mypf120DAY/UUJbM-fswYI/AAAAAAAAJKE/DBZmPK7F9c0/s1600/ubuntulogo.png" class="img-topic">


<p>I have not found anything that does not work as yet (although its only been 2 hours).</p>
<p><strong>WiFi network</strong> - this worked without any problems (even after suspend).  I did pick up a USB ethernet connector just in case, but have not needed that as yet.  The WiFi is very fast, especially when connected to a 5GHz network.  The WiFi also works with 2.5GHz networks too.</p>
<p><strong>Back-light keyboard</strong> - use <code>Fn + Space</code> keys to cycle through 2 different levels of brightness and off.  Unlike the Mac, there is no low-light level detector, but I can provide that service myself :)</p>
<p><strong>Display brightness</strong> - use <code>Fn + F8 / F9</code> to change the brightness of the screen and there is a decent stepping range of brightness.</p>
<p><strong>Volume level &amp; sound mute</strong> - these buttons all work, although the microphone mute button does not seem to work.</p>
<p><strong>Suspend</strong> on closing the laptop lid works just fine and the WiFi network came back along with everything else when opening the lid.  The Ubuntu installer does not create a swap space by default (or this may be because I selected an encrypted disk partition), so hibernate does not work at present.</p>
<p><strong>Lock Screen</strong> button <code>Fn + F3</code> works just fine and is a quick way to put the screen to sleep.</p>
<p><strong>External monitor</strong> also tested okay.  I plugged in a Dell 24” monitor using the Display Port to VGA adaptor (additional purchase) and got the full 1920 x 1200 output.  The Lenovo display can also run its display of 1600x900 at the same time and I notice no loss of responsiveness in either display. </p>
<p><strong>Web Camera</strong> works very well and I tested it out via a Google hangout with myself.</p>
<img src="http://3.bp.blogspot.com/-KRS_H5QxupU/UUJbYAPH3aI/AAAAAAAAJKM/6j6wVSlJGjk/s1600/ubuntu1210installation-large_014.jpg" class="img-code">


<h2 id="Impressions_overall">Impressions overall</h2>
<p>The Lenovo X1 Carbon laptop is a pretty impressive piece of kit on paper.  I was excite when I was reading about it and worried it would not live up to the hype.</p>
<p>I didn’t have to worry.  From the moment I pulled it out of the box it has been a joy.  I still cant believe how light it is, it feels half the weight of any laptop I’ve ever held.  Despite the light weight, it feels very robust and seems like it will last a long time.</p>
<p>Using the laptop is a joy, mainly down to the keyboard.  Its a full size keyboard and has the keys laid out in there correct places.  I dont have to go hunting for the @ ~ | and # keys.</p>
<p>Battery life seems pretty good.  I have been writing this article on an off over the last 4 an a bit hours.  There is still an hour and a half left on the battery indicator.  Admittedly I haven’t run any websites running flash or played any games, but I am pretty sure I can last all day at a conference using WiFi.  I will test out the 30 minute quick charge over the next few days.</p>
<blockquote><p>Update: The Lenovo X1 Carbon charges up really quickly, easily charging to over 80% capacity in 30 minutes and full charge in about 45 minutes.</p>
</blockquote>


<p>Compared to the Mac Book Pro I was given via the company I work for, the Lenovo X1 Carbon wins on every count.</p>
<p>In the next few blogs I’ll cover setting up this great laptop to be an awesome development machine.</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJJ8/oNaVgTQmlWA/s1600/lenovo-carbon1.jpg" class="img-thumbnail">


<p>After a bit of research on the level of <a href="Ubuntu">http://www.ubuntu.com</a> support, I decided to get a Lenovo X1 Carbon for my new development machine.  </p>
<p>If you have never seen the X1 Carbon, its like a really special edition of a Mac Book Air, except much more awesome and more powerful.  Here are my impressions so far.</p>
]]></summary>
    
      <category term="lenovo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/lenovo/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.github.io/hexo-themes-test/tags/ubuntu/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.github.io/hexo-themes-test/categories/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MonkiGras 2013 aftermath - bigger, bolder and craftier]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2013/02/monkigras-2013-aftermath-bigger-bolder.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2013/02/monkigras-2013-aftermath-bigger-bolder.html/</id>
    <published>2013-02-05T11:49:00.000Z</published>
    <updated>2014-05-13T23:04:53.000Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-k14DzhO7g38/TzASLJEEtpI/AAAAAAAAEa0/yHjSub8rNSg/s1600/monki-gras-2012-banner.jpg" class="img-thumbnail">


<p>Monki Gras conference has only just had its second outing and already its become a bit of a legend.  Its one of those conferences that is highly social and highly stimulating and also quite exhausting in a good way.  Here is some of the excitmemet I managed to capture.</p>
<a id="more"></a>

<p>Amazingly this years event only started half an hour late and was even bigger than <a href="http://jr0cket.co.uk/2012/02/monki-gras-london-craft-of-conferences.html" target="_blank">last year</a>.  Here are some highlights from the 2013 event.</p>
<h2 id="James_Governor_setting_the_tone">James Governor setting the tone</h2>
<img src="http://3.bp.blogspot.com/-8gOVnx6gJWQ/UHg6D67NjrI/AAAAAAAAIYM/um3MEP7lMOM/s1600/james-govenor.jpg" class="img-thumbnail">


<p>In the passed, companies turned to mass production to optimise for productivity and  by consequence turned people who work in that environment into faceless drones.</p>
<p>What we need are tools and practices that support people rather than replace people.</p>
<p>As developers we have a thirst for learning how to use our tools well and how to adopt and adapt a variety of practices to improve our work.  This is now starting to become wide-spread across many other industries.</p>
<h2 id="Coffee_as_collaboration_at_Heroku">Coffee as collaboration at <a href="http://www.heroku.com/" target="_blank">Heroku</a></h2>
<img src="http://farm6.static.flickr.com/5297/5396355671_d21981c6db.jpg" class="img-thumbnail">


<p><a href="https://twitter.com/craigkerstiens" target="_blank">Craig Kerstiens</a> &amp; <a href="https://twitter.com/mattt" target="_blank">Matt Thompson</a> - <a href="http://www.heroku.com/" target="_blank">Heroku</a></p>
<p>Some revellers enjoyed a rather liquid breakfast, for those that felt it was just a little too early for beer then it was coffee time with Heroku. </p>
<p>Matt and Craig Kerstiens talked about how the team at <a href="http://www.heroku.com/" target="_blank">Heroku</a>, the Herokai, manage to maintain the collaboration within a growing startup.</p>
<p><a href="http://www.heroku.com/" target="_blank">Heroku</a> now has 85 people, loosely organised into 21 teams.  Overall the company manages 5000 internal heroku apps and schedules 500 releases a day.  Much of the code is available in close to 200 <a href="https://github.com/organizations/heroku" target="_blank">public Github repos</a>.</p>
<p>As a developer you spend a lot of time with your head down working and that limits your level of communicating.  A good balance is important for a healthy company.  Communication however is different from interruption and its well agreed fact that one interruption costs 20 minutes.  What is less well understood is that a developer gets typically 2 hours of uninterrupted working in an 8 hour day. </p>
<h3 id="So_how_do_you_encourage_communication_with_Coffee?">So how do you encourage communication with Coffee?</h3>
<p>Actually, its very hard to make a single cup of coffee at the Heroku office.  All the coffee making machines are geared up for several cups.  So you have to find someone to share coffee with you and you end up having a conversation as you are waiting.</p>
<p>Making Coffee in this way is also a great way break the ice.  Its easy to learn and as a simple craft you can show new people how to make coffee as a way of introduction to the company.  The Coffee mentioning role gives a way to demonstrate and convey some of the values of the company at the same time.</p>
<img src="http://sphotos-b.xx.fbcdn.net/hphotos-ash4/300731_349185285162367_2128347492_n.jpg" class="img-thumbnail">


<h3 id="Headphone_rule">Headphone rule</h3>
<p>Its an unwritten rule in Heroku that when someone has their headphones on it means “Do not disturb”.  This allows developers to focus on their work without haviing to justify that focus to anyone else.</p>
<p>In Heroku this approch is seen as an engineers thing and sometimes others in the company dont get it at first.</p>
<h3 id="Makers_day_is_Thursday">Makers day is Thursday</h3>
<p>Every Thursday is sacred at Heroku and no meetings should be scheduled.  This allows engineers to easy to turn down a meeting on makers day without feeling awkward.</p>
<p>On Wednesdays Heroku have their all hands day right after lunch.  Because of this interuption, engineers typically arrange all their meetings that day.  This makes the rest of the week pretty effective for getting things done.  It also encourages others to think about the value of a meeting.</p>
<img src="http://si0.twimg.com/profile_images/2524040807/xgkj38d7afwtq7rbrfa3_normal.jpeg" class="img-thumbnail"><br> <a href="https://twitter.com/sjmaple" target="_blank">sjmaple</a> Great heroku talk! At ZeroTurnaround you’re not allowed to book meetings on Wednesday or Thursday! productivity++ #monkigras<br><br>### Encouraging ad-hoc Communication<br>Sometimes the best conversations happen at random, so lunch is catered every day.  As well as a great perk it also is very communal.  The dining area has a few long tables for about 12 people, helping group discussions.  The eclectic variety of food make people more willing to communicate, often asking “how do we eat this”.<br><br>Friday is beer day.  This is more than just drinking beer, Herokai are encouraged to suggest drinks that should be ordered.  Its also a great way to get everyone reflect on the week just gone.<br><br>### Challenges still remaining<br><br><img src="http://1.bp.blogspot.com/-lSm0m8MOyj4/URDjKBU15UI/AAAAAAAAJAk/f1aAuDtuHdE/s1600/curva-allen-curve.png" class="img-code">


<p>There is an increasing number of remote employees and maintaining regular communication is tough.</p>
<p>There is also the effect of the <a href="http://en.wikipedia.org/wiki/Allen_curve" target="_blank">Allen curve</a>, which shows the exponential drop in freqnuecy of communication between engineers as the distance between them grows.</p>
<p>To help everyone understand the challenges and crowd source for ideas, Heroku hold a remote week where their office is closed.  Everyone in the company works remotely, from home, on the road or out and about in their location.</p>
<p>This type of activity could also help with focusing on common tools and service consolidation.  As each team has ownership of their own practices, then tools and services have exponentially spread.  Some concensus and culling of stuff would be help communication.</p>
<h2 id="Making_for_makers">Making for makers</h2>
<p><a href="https://twitter.com/mnowster" target="_blank">Mazz Mosley</a> &amp; <a href="https://twitter.com/nickstenning" target="_blank">Nick Stenning</a> - GDS</p>
<p>Imaging you are a craftsman with years of experience, what would happen if all of the people you dealt with were gone?  Could you imaging the emmense chain of resorces that allow you to practice your craft?</p>
<h3 id="Enter_Quantum_Physics">Enter Quantum Physics</h3>
<p><a href="http://bouman.chem.georgetown.edu/general/feynman.html" target="_blank">I think I can safely say that nobody understands quantum mechanics - Richard P. Feynman_</a>.  There are very few people who claim to understand quantum physics, although every JavaScript programmer fundamentally relies on the principles of quantum mechanics.  Rather than make JavaScript developer spend years studying quantum physics they use <a href="http://angeleah.com/blog/2012/11/02/black-box-abstraction.html" target="_blank">black box abstraction</a>.</p>
<p>We have relationships with people who can do all the things we need to do our almost everything we use is an abstraction that allows us to use it effectively rather than trying to understand how its made.  The exception being soap which is a harder abstraction than the process it is supposed to encapsulate.</p>
<h3 id="Users_are_users_even_if_they_are_makers-">Users are users even if they are makers.</h3>
<blockquote>
<p>Or in my words “Developers are people too” @jr0cket</p>
</blockquote>
<p>You should  understand the complexity that you pass on to your users, especially if you want to keep them!</p>
<blockquote>
<p>kenneth reitz <a href="http://kennethreitz.org/expressions/how-i-develop-things-and-why" target="_blank">the user api is all that matters everything else is secondary </a></p>
</blockquote>
<h3 id="Scaling_the_new_Government_website">Scaling the new Government website</h3>
<img src="http://3.bp.blogspot.com/-ndLKp9hcA5Q/URDt3Uyc3zI/AAAAAAAAJBU/-rPdlzH2TQQ/s1600/alpha_homepage_grab.jpg" class="img-topic">


<p>In 12 weeks, a dozen people built alpha.gov.uk website from scratch to deployment and much rejoycing was had by all.</p>
<p>In 8 months, a team of 48 people built the beta version of the website.  In october 2012, the real site was launched using a team of 200 people.</p>
<p><em>So how did they scale the team in a short amount of time?</em></p>
<p>No rockstar, wizzards or ninjas were hired.  These types of developer egos all seem to drink from the ego boosting cool aid, making the same kind of mistakes as they have the same kind of attitude.  Rockstars are bullsh*t, Rockstars are not webscale!.  Rockstars are not used to listening to there users and that includes those other developers they work with every day.  A good team needs diverse set of people, to create a passionate team.</p>
<p><em>Assembling a team is a skill in its own right.</em></p>
<p>At GDS it was about hiring people who understood what the company was trying to achieve. When something is hard and not very well defined the best way to deal with this is to give it to people,  lots of diverse people who understand the goal you are working towards and have a diverse set of experiences to draw from.</p>
<p>On paper, going from alpha to beta to production in such a short time frame you need to leave your ego at the door to get stuff done</p>
<blockquote>
<p>Mazz, Uncle Bob &amp; Stan Lee: With great diversity comes great collective intelligence and power!</p>
</blockquote>
<h2 id="Scaling_happiness">Scaling happiness</h2>
<p><a href="https://twitter.com/tnm" target="_blank">Ted Nyman</a> - Github </p>
<p>Plato on love:</p>
<blockquote>
<p>Why do you love someone?  If you love someone for intelligence or bone structure,  then you should also love people who have even nicer examples of these things.</p>
</blockquote>
<img src="http://3.bp.blogspot.com/-10Ndc3AUd7c/URDsrM19YBI/AAAAAAAAJBI/4BC0CmkLKTg/s1600/perks-are-best-here.jpg" class="img-topic">


<p>Perks do not make people happy, they come and go and you cant build culture with tokens.  Token freedom perks are transitory and eventually make you wonder why a positive thing is only available a small part of the time.  If your company said you could go out in the sun for two hours once a month then you have to come inside.  You would quickly come to realise that going back inside is not where you want to be.</p>
<p>The real way you make people happy is in the organisation of the people in the company.  At Github there are no formal managers.  Cultural and technology adaptations grow naturally from this.  For example, everyone becomes part of the traditional management functions and that role becomes dispersed.  Everyone becomes responsible from hiring and ensuring people are happy.</p>
<p>If you create the structure that lets the culture form, then a culture grows to reinforces that structure.  The structure at Github being that we dont have a structure.  Everything that people need taken care of get taken care of as otherwise people complain.  Sometimes this means people doing things for themselves, or collaborating with others to get it done.</p>
<p>There are probably good managers out there, Ted just cant thing of any, well except for <a href="http://en.wikipedia.org/wiki/Julius_Caesar" target="_blank">Julius Caesar</a>, he was a good manager!</p>
<p>The challenge remaining is that nothing actually scales, this is especially true when it comes to people.</p>
<h2 id="Summary">Summary</h2>
<p>There is so much more to Monki Gras that what I managed to capture here (or would care to share in public).  The conference is really engaging and it will take a while for all the ideas and practices I experienced to peculate through my brain.</p>
<p>The evening event was amazing too, with fine food arranged to match the Craft brewed beer we were sampling.  Its a good job the conference ends on Fridays, so I could recover over the weekend.</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-k14DzhO7g38/TzASLJEEtpI/AAAAAAAAEa0/yHjSub8rNSg/s1600/monki-gras-2012-banner.jpg" class="img-thumbnail">


<p>Monki Gras conference has only just had its second outing and already its become a bit of a legend.  Its one of those conferences that is highly social and highly stimulating and also quite exhausting in a good way.  Here is some of the excitmemet I managed to capture.</p>
]]></summary>
    
      <category term="monkigras" scheme="http://jr0cket.github.io/hexo-themes-test/tags/monkigras/"/>
    
      <category term="events" scheme="http://jr0cket.github.io/hexo-themes-test/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[London Salesforce Developer meetup - January 2013]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2013/01/london-salesforce-developer-meetup.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2013/01/london-salesforce-developer-meetup.html/</id>
    <published>2013-01-23T20:30:00.000Z</published>
    <updated>2014-05-15T19:09:45.000Z</updated>
    <content type="html"><![CDATA[<p>Its been a cold week in London so its great to see so many venture out to the latest meetup of the London Salesforce Developer community.</p>
<p>Thanks to our hosts, <a href="http://www.makepositive.com/" target="_blank">Make Positive</a>, there was plenty of pizza to warm everyone up and plenty of drinks to cool everyone down again.  Make positive have a very roomy office to work in and its a great space to talk to other developers and admins involved in forcedotcom projects.</p>
<!-- meetup -->

<p>We had a great talk from Rob Cowel, giving his insight into developing applications and system integrations across three cloud platforms: forcedotcom, heroku and <a href="https://www.iriscouch.com/" target="_blank">IrisCouch</a> (CouchDB).</p>
<p>I also gave a quick update of Salesforce news, up coming events, new organisers for the community and a collection of resources for developers getting started with the force.</p>
<iframe allowfullscreen="" frameborder="0" height="356" marginheight="0" marginwidth="0" mozallowfullscreen="" scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/16138024" style="border-width: 1px 1px 0; border: 1px solid #CCC; margin-bottom: 5px;" width="427"> </iframe> 

<p><a href="http://www.slideshare.net/JR0cket/london-salesforce-developers-meetup-january-2013" title="London Salesforce Developers Meetup January 2013" target="_blank">London Salesforce Developers Meetup January 2013</a> from <a href="http://www.slideshare.net/JR0cket" target="_blank">John Stevenson</a></p>
<p>t of people whist not playing ping pong. As always there is a good mix of people, including Salesforce staff, the Make Postive team, developers from Tquila and many more.</p>
<p>I met a developer who has been working on a blog, <a href="http://www.cloudfollows.com/" target="_blank">www.cloudfollows.com</a>, with others around the world aimed at those relatively new to the forcedotcom platform.  A quick glance had me very interested.  It looks a well presented site with lots of handy tips.</p>
<p>I caught up with Salesforce MVP’s Francis Pindar and Keir Bowden and they are keen to run some workshops to help people gain experience with the platform.  We’ll be running our first workshops in Tower42 on the 11th April.  There will be room for approximately 10 developers. </p>
<p>There is always so much conversation going on and I often hate to break it up for the talks.</p>
<h2 id="The_Talks">The Talks</h2>
<p>I  gave a quick overview of coding events we are running for the community.  This includes <strong><a href="http://jr0cket.co.uk/2013/02/hack-tower-february-2013.html" target="_blank">Hack the Tower</a></strong> and the upcoming coding dojo for Salesforce developers at Tquila.</p>
<p><strong>John Mahoney, Clerisoft.com</strong> gave a quick demo of Steroid, a custom components framework for the forcedotcom platform.  It provides a  library of re-usable custom components for both desktops &amp; mobile  devices.  Clerisoft developers pick ideas that are requested on … but are not planned to be added to the platform by Salesforce engineers.</p>
<p>John was looking for feedback on the concept, what components developers would find valuable and any for pepole to go try them out.</p>
<p><strong>Keir Bowden, Salesforce MVP</strong> gave a quick run  through of the <a href="http://certification.salesforce.com/Developers" target="_blank">developer certification</a> process.  Each level of certification has been designed to help you grow your  skills and get great roles in industry.  Salesforce and it customers really value the certification process, as it gives a measure of confidence in the ability to deliver projects successfully.</p>
<p>Keir is also driving the  formation of the EMEA TA review board, which is a peer review process  for the top level of Salesforce developer certification.</p>
<p>Keir has now experienced the review board from the inquisitor side, being involved in the first EMEA review board. As Keir is now on the EMEA review board he is no longer in a position to offer advice on how to pass the TA certification.</p>
<p>Keir invited Chris Eales along to share his experiences, as Chris is the latest Technical Architect to pass the certification level.</p>
<h2 id="Next_months_meetup">Next months meetup</h2>
<p>The next monthly meetup for the <a href="http://www.meetup.com/LondonSalesforceDevelopers/events/96135922/" target="_blank">London Salesforce developers</a> is at Make Positive on the 27th March.  If you want to speak about anything please get in touch or leave a message on the meetup event. </p>
<p>Sign up at: <a href="http://www.meetup.com/LondonSalesforceDevelopers/events/96135922/" target="_blank">http://www.meetup.com/LondonSalesforceDevelopers/events/96135922/</a></p>
<p>See you there.<br>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank">@jr0cket</a></p>
]]></content>
    
    
      <category term="salesforce1" scheme="http://jr0cket.github.io/hexo-themes-test/tags/salesforce1/"/>
    
      <category term="cloud" scheme="http://jr0cket.github.io/hexo-themes-test/categories/cloud/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown driven developer sites on Heroku - easily create an online workshop]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2013/01/markdown-driven-developer-sites-on.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2013/01/markdown-driven-developer-sites-on.html/</id>
    <published>2013-01-21T13:58:00.000Z</published>
    <updated>2014-05-13T22:47:28.000Z</updated>
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-yIBn-HYfxeA/UI_UGVJF6AI/AAAAAAAAIdo/MLPDWYCbX2Q/s1600/heroku-logo-light-300x100.png" class="img-thumbnail">


<p><a href="http://www.heroku.com/" target="_blank">Heroku</a> is a great platform to deploy your web apps, in a way that just works  for developers.  What isnt obvious is you can also deploy static sites too.</p>
<p>As Markdown is now common way for developers to  create documentation, why not use Heroku to deploy your markdown driven content site.</p>
<a id="more"></a>

<h2 id="Collaborating_force">Collaborating force</h2>
<p>The <a href="http://developer.salesforce.com/" target="_blank">Salesforce developer evangelist team</a> are doing just this, creating workshops written in markdown.  The workshops are deployed on Heroku and we collaborate via Github.  This is a really effective way to collaborate as we are remote workers and often on our travels. </p>
<h2 id="Markdown_is_simple">Markdown is simple</h2>
<img src="http://2.bp.blogspot.com/-vdbLJDFnR7Q/UPxhMffM05I/AAAAAAAAI8k/1HLAKXNX5jU/s1600/markdown-logo.gif" class="img-topic">


<p>Markdown is really easy to learn and really easy to read.  Its much better to read in its raw form than most Wiki Markup languages.  If you have a good editor (Emacs &amp; Emacs Live) then reading and writing markdown is a great experience.</p>
<p>Its also pretty easy to convert Markdown to different formats such as HTML and PDF.</p>
<p>I picked up all the markdown syntax from working with Github readme.md files and from writing markdown in Emacs.  SimpleCode.me also has a really good <a href="http://www.simplecode.me/2011/12/11/getting-started-with-markdown/" target="_blank">getting started with markdown guide</a>. </p>
<h2 id="Creating_the_content_in_markdown">Creating the content in markdown</h2>
<img src="http://2.bp.blogspot.com/-hiVZZWkLlbg/UPAGL_h-U4I/AAAAAAAAI5Q/J3CzFdhvziw/s1600/emacs-live-docs-themed.png" class="img-topic">


<p>Any editor can be used two work on the content for the workshops, this is another beauty of markdown.  I recommend Emacs with <a href="http://blog.jr0cket.co.uk/2013/01/emacs-live-great-clojure-developer.html" target="_blank">Emacs Live setup</a> or you are using MacOSX, then <a href="http://mouapp.com/" target="_blank">Mou</a> gives you live rendering of you content as you type.</p>
<p>To make the markdown render in HTML and PDF similar to the style used on github, a fairly simple css file is added to the project. </p>
<h2 id="Creating_your_app_on_Heroku">Creating your app on Heroku</h2>
<p>As Heroku and Github are both going to be used then the projects are versioned with Git.  A git repository is created on Github at the start of a new workshop.  A github  organisation is used to keep al the projects together.  The new Github repository is cloned and development of the content commences.</p>
<blockquote>
<p>As its a static site then there is not much need for a .gitignore file, assuming you have <a href="http://jr0cket.co.uk/2012/12/gitignore-for-clojure-and-emacs-ignore.html" target="_blank">a ~/.gitignore_global file for any backup files</a> that your editor creates.  </p>
</blockquote>
<p>Once the workshop content is good enough to deploy, a new Heroku application is created.  A specific <a href="https://devcenter.heroku.com/articles/buildpacks" target="_blank">build pack</a> is used to tell Heroku how to assemble and deploy the markdown as a web  application.  This build pack defines how the HTML is generated from  the markdown, based on a css file included in the project.  The whole  app runs on a HTTP server called SimpleHTTPServer, written in Python.</p>
<p>The app is created on Heroku app using the <a href="https://github.com/jamesward/heroku-buildpack-markdown" target="_blank">markdown build pack</a> created by James Ward.  The command line for this is:</p>
<pre><code>heroku <span class="built_in">create</span> workshop-name  <span class="comment">--buildpack https://github.com/jamesward/heroku-buildpack-markdown.git</span>
</code></pre><h2 id="Telling_Heroku_how_to_run_your_app">Telling Heroku how to run your app</h2>
<p>A procfile is a simple text  file that tells Heroku what to do with you application when its ready to  run it.  For the markdown site we simply start up a simple HTTP server  which runs on python (we dont need all the bells and whistles of something like Apache).</p>
<p>The <code>web:</code> directive at the front tells heroku to create a process that listens to requests from the Internet.  As we are not  specifying a port number, it will pick up the default port to listen on  from the Heroku environment variables.</p>
<pre><code><span class="attribute">web</span>: <span class="string">python -m SimpleHTTPServer $PORT</span>
</code></pre><h2 id="Deploying_the_markdown_site">Deploying the markdown site</h2>
<img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-topic">


<p>As soon as you are ready for your  markdown content to go live, simply push your local repository up to the  Heroku repostiory with the git push command.</p>
<pre><code>git <span class="keyword">push</span>
</code></pre><p>If you have more than one remote repository specified in your git configuration, then all you need to do is specify the specific repository to push to.  By default the heroku create command adds a remote called heroku.</p>
<p>To check what your heroku repository is called you can use the command:</p>
<pre><code>git <span class="comment">remote -v</span>
</code></pre><p>To push to a remote repository called heroku, use the command:</p>
<pre><code>git <span class="keyword">push</span> heroku master
</code></pre><h2 id="In_summary">In summary</h2>
<p>It is really easy to create content based on markup. Collaborating on this content is really easy when using Github and deploying this content as a static website is only a git push away with heroku.</p>
<p>Other aspects were are adding to this workshop creation process include:</p>
<ul>
<li>create a staging heroku app to allow testing of content once the site has gone live;</li>
<li>automatically generating a pdf copy of each page every time you deploy a new version.</li>
</ul>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-yIBn-HYfxeA/UI_UGVJF6AI/AAAAAAAAIdo/MLPDWYCbX2Q/s1600/heroku-logo-light-300x100.png" class="img-thumbnail">


<p><a href="http://www.heroku.com/" target="_blank">Heroku</a> is a great platform to deploy your web apps, in a way that just works  for developers.  What isnt obvious is you can also deploy static sites too.</p>
<p>As Markdown is now common way for developers to  create documentation, why not use Heroku to deploy your markdown driven content site.</p>
]]></summary>
    
      <category term="heroku" scheme="http://jr0cket.github.io/hexo-themes-test/tags/heroku/"/>
    
      <category term="markdown" scheme="http://jr0cket.github.io/hexo-themes-test/tags/markdown/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Git Father - a forking badass t-shirt]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2013/01/the-git-father-forking-badass-t-shirt.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2013/01/the-git-father-forking-badass-t-shirt.html/</id>
    <published>2013-01-09T16:29:00.000Z</published>
    <updated>2014-05-15T18:46:00.000Z</updated>
    <content type="html"><![CDATA[<p>The Git Father. The only t-shirt to wear when teaching other people who to use git and Github. </p>
<img src="http://1.bp.blogspot.com/-l8pchRzUta0/UO2ZNVdVokI/AAAAAAAAI4I/BU5cyWtJmeA/s1600/the-git-father-forking-badass-clearvision.png" class="img-code">


<p><em>One day I will actually iron my t-shirts :)</em></p>
<p>Thanks to <a href="http://www.clearvision-cm.com/" target="_blank">Clearvision</a> for creating such a great t-shirt.  Check out their <a href="http://www.go-git.com/" target="_blank">Go Git website</a> for ideas on adopting git in your organisation.  </p>
<p>Thank you.<br><a href="http://www.twitter.com/jr0cket" target="_blank">@jr0cket</a></p>
]]></content>
    
    
      <category term="git" scheme="http://jr0cket.github.io/hexo-themes-test/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tweeking Emacs modeline for Clojure Development]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2013/01/tweeking-emacs-modeline-for-clojure.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2013/01/tweeking-emacs-modeline-for-clojure.html/</id>
    <published>2013-01-04T11:01:00.000Z</published>
    <updated>2014-05-13T23:47:20.000Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">


<p>Emacs is fun to configure and if you have the basics of LISP or Clojure then its pretty easy too.  After reading how to <a href="http://www.masteringemacs.org/articles/2012/09/10/hiding-replacing-modeline-strings/" target="_blank">replace the text on the modeline</a> I decided to customise my mode-line to make it more efficient for Clojure development.  I’ll cover how I tweaked the mode line and added this customisation to my <a href="https://github.com/overtone/emacs-live" target="_blank">Emacs Live</a> based configuration.</p>
<a id="more"></a>

<p>Instead of a long list of Major and Minor modes that are active, I now have symbols representing those modes.</p>
<p>In the screen-shot you can see I have the following modes running</p>
<p>λ    Clojure mode<br>τ    undo-tree<br>γ    yas<br>υ    volatile highlights<br>ηζ  nREPL minor mode<br>α    auto-complete<br>φ    paredit</p>
<img src="http://3.bp.blogspot.com/-vfMe4acOK5w/UOQuzoDiRBI/AAAAAAAAI3Q/53fhjdSEpHU/s1600/Emacs-clean-mode-line-for-clojure-and-nrepl.png" class="img-code">


<p>Some other modes are active, but hidden with a null string as I am assuing they are running all the time.</p>
<h2 id="Configuring_Emacs_Live">Configuring Emacs Live</h2>
<p>Adding these to the Emacs Live configuration I use is easy, assuming you used the “bro-grammer” script provided by <a href="http://plus.google.com/104881409052969541540" target="_blank">+Sam Aaron</a>.  This script creates a <code>~/.live-pack</code> folder where you can add your own keybindings and configuration without it getting hit by Emacs Live updates.</p>
<p>I created a file called <code>clean-mode-line.el</code>, based on the one in the Mastering Emacs article.  The file is located in my personal live-packs folder at:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>~/.live-packs/jr0cket-pack/config/clean-mode-line.el
</pre></td></tr></table></figure>


<p>The code for the mode-line tweaks is a Github Gist:</p>
<script src="https://gist.github.com/4434524.js?file=clean-mode-line.el"></script>


<p>To use this new mode-line tweak, we ask Emacs Live to load the configuration in clean-mode-lime.el.  To do this, edit the <code>init.el</code> file in your live pack</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>~/.live-packs/jr0cket-pack/init.el 
</pre></td></tr></table></figure>


<p>Then add the following code:</p>
<script src="https://gist.github.com/4434605.js?file=init.el"></script>


<h2 id="Emacs_Tweaked">Emacs Tweaked</h2>
<p>When you open a Clojure document, the mode line now displays the major and minor modes as symbols.</p>
<img src="http://2.bp.blogspot.com/-yYcO9X9AGWU/UOQu0wmhK3I/AAAAAAAAI3g/rZxXuAQ1Z1E/s1600/Emacs-clean-mode-line-for-clojure.png" class="img-code">


<p>Starting the Clojure REPL using <code>M-x nrepl-jack-in</code> gives you a similar modeline, this time with the major mode being <code>nrepl-mode</code>.</p>
<img src="http://3.bp.blogspot.com/-vEeUhbx-sWo/UOQu0OplJJI/AAAAAAAAI3Y/wF_I-g9J3rc/s1600/Emacs-clean-mode-line-for-clojure-nrepl.png" class="img-code">


<p>Switching back to a Clojure file after running nREPL shows <code>Clojure</code> as the major mode and <code>nREPL</code> running as the minor mode.</p>
<img src="http://3.bp.blogspot.com/-vfMe4acOK5w/UOQuzoDiRBI/AAAAAAAAI3Q/53fhjdSEpHU/s1600/Emacs-clean-mode-line-for-clojure-and-nrepl.png" class="img-code">


<h2 id="In_Summary">In Summary</h2>
<p>The custom mode line was really easy to set up, thanks to the great info in the <a href="http://www.masteringemacs.org/articles/2012/09/10/hiding-replacing-modeline-strings/" target="_blank">Matering Emacs article</a>.  The tricky part was finding the specific name for the nREPL minor mode that was running.  Other than that it took a couple of minutes, most of which was deciding which symbols to use.  I added a few others at the end of the file in case I change my mind or you want to use something more meaningful to yourself. </p>
<p>I havent tried this with Swank, but I assume that all it would take is adding of the swank mode to the clean-mode-line.el file.</p>
<p>When I get round to using other modes, I will see if I can add other symbols to my configuration where it makes sense.  Let me know if you find this useful and what symbols you use.   </p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">


<p>Emacs is fun to configure and if you have the basics of LISP or Clojure then its pretty easy too.  After reading how to <a href="http://www.masteringemacs.org/articles/2012/09/10/hiding-replacing-modeline-strings/" target="_blank">replace the text on the modeline</a> I decided to customise my mode-line to make it more efficient for Clojure development.  I’ll cover how I tweaked the mode line and added this customisation to my <a href="https://github.com/overtone/emacs-live" target="_blank">Emacs Live</a> based configuration.</p>
]]></summary>
    
      <category term="emacs" scheme="http://jr0cket.github.io/hexo-themes-test/tags/emacs/"/>
    
      <category term="clojure" scheme="http://jr0cket.github.io/hexo-themes-test/tags/clojure/"/>
    
      <category term="emacs live" scheme="http://jr0cket.github.io/hexo-themes-test/tags/emacs%20live/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Password protected SSH key for Github for Mac & Linux]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2012/12/password-protected-ssh-key-for-github.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2012/12/password-protected-ssh-key-for-github.html/</id>
    <published>2012-12-31T15:57:00.000Z</published>
    <updated>2014-05-13T23:56:56.000Z</updated>
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-vIpCWBThzsw/T8ZKPxPTC8I/AAAAAAAAIHU/di86sKgUYA8/s1600/public-private-keys.jpg" class="img-thumbnail">


<p>Secure Shell (SSH) is an invaluable tool to help developers manage code and data over different computers and services, eg. <a href="http://github.com" target="_blank">Github</a>, <a href="http://www.heroku.com" target="_blank">Heroku</a>.  By creating a public/private key it also means you dont have to enter a username &amp; password each time you use the service.  Ideally you should create a public/private key using a long passphrase, so that is what I will cover here.</p>
<a id="more"></a> 

<h2 id="Why_use_a_secure_key?">Why use a secure key?</h2>
<p>To make using SSH a great experience to use and yet keeping it secure as possible requires you to set up an public / private key combination that is protected by a long pass-phrase.  Specifically you are protecting your private key as you distribute your public key (which is why its called public).  Imagine the pass-phrase as a kind of long password, which you will add to something called a keychain on your laptop so you only have to enter this long password once.</p>
<img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-topic">


<h2 id="I_don’t_want_to_keep_typing_my_long_password_on_every_commit?">I don’t want to keep typing my long password on every commit?</h2>
<p>Of course not, that would be a real pain.</p>
<p>When using a password protected SSH key with Mac OSX and Linux you can add your SSH key password to the keychain (keyring in Linux, but its the same thing) of your login account.</p>
<p>When you first connect to github using your newly added key you will be prompted with a dialog box to add the password for your SSH key to your keychain.  Enter the password for your keychain in this prompt, it should be the same as your computer login password (unless you specifically changed it).</p>
<h2 id="Creating_a_password_protected_SSH_key">Creating a password protected SSH key</h2>
<p>Creating an SSH key pair with a long pass-phrase is just the same process as that without, except you obviously specify the long password.</p>
<p>In the following example, I am specifying the email I used for the Github account I own, using the <code>-C</code> option for <code>ssh-keygen</code>.</p>
<p>I am also using a custom file name.  In doing so, I need to provide the full path to the file or otherwise ssh-keygen fails to create the file.  It seems that even the <code>~/</code> shortcut to your home folder also fails.</p>
<p>As I am using a custom name for the keys, then I will need specific a host configuration before I am done.</p>
<img src="http://3.bp.blogspot.com/-Y7vVzBfsOZE/UOG0phBIZHI/AAAAAAAAI2w/doqqeqnO3fQ/s1600/github-ssh-key-generation-secure.png" class="img-code">


<h2 id="Adding_a_Host_configuration">Adding a Host configuration</h2>
<p>If your public key is called id_rsa.pub then you should not need a host configuration.  As I am using a custom name to generate the SSH keys, I need to add a host definition to my SSH configuration.  Its pretty easy to add a new definition, simply edit the ~/.ssh/config file and add a definition as follows</p>
<img src="http://2.bp.blogspot.com/-Wt1uj7Hxnec/UKaKa29sKwI/AAAAAAAAIjA/XtmLKuvJQ-g/s1600/ssh-host-config-github-secure.png" class="img-code">


<h2 id="Adding_Keys_-_a_bad_Developer_experience">Adding Keys - a bad Developer experience</h2>
<img src="http://3.bp.blogspot.com/-0xWwyDAsFGU/UKaiV_bcAWI/AAAAAAAAIjY/iMdnVj8lVNQ/s1600/github-profile-edit.png" class="img-code">


<p>The adding of keys to your Github account is a very poor experience for the developer, as it requires a cut-n-paste rather than allowing you to upload your key file.</p>
<p>Adding keys to <strong><a href="https://devcenter.heroku.com/articles/keys" target="_blank">Heroku</a></strong> is much nicer, they have a <strong><a href="https://toolbelt.heroku.com/" target="_blank">toolbelt</a></strong> that automatically detects your public key file and upload it. </p>
<p>I had a few problems when copy/pasting my key from the editors that come with the Mac, until I found reference to the command <code>pbcopy</code>.</p>
<p>Open up a terminal and enter the following command to copy your public key into the Mac’s clipboard.  Then simply paste the key into the Github webpage for adding a new key. </p>
<pre><code>pbcopy &lt; ~/<span class="preprocessor">.ssh</span>/id_rsa<span class="preprocessor">.pub</span>
</code></pre><p>Bitbucket is not much better, although at least they tell you about pbcopy in the documentation for adding a key.  When I used Assembla.com, at least you could upload your key public key as a file.</p>
<p>Once you have uploaded your public key, don’t forget to give it a quick test to make sure its all working.  Using the command line, use the ssh command to connect to github</p>
<pre><code>ssh -<span class="constant">T</span> git<span class="variable">@github</span>.com
</code></pre><img src="http://3.bp.blogspot.com/-pYOW0NB6RfA/UKaiX5iv1oI/AAAAAAAAIjg/SZBS1NMG11c/s1600/github-testing-successful.png" class="img-code">


<p>This command will use your SSH key to connect to Github and show you if you have successfully set up your key for your account on your Mac.  Unlike normal SSH access, you cant actually do anything once you connect.</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-vIpCWBThzsw/T8ZKPxPTC8I/AAAAAAAAIHU/di86sKgUYA8/s1600/public-private-keys.jpg" class="img-thumbnail">


<p>Secure Shell (SSH) is an invaluable tool to help developers manage code and data over different computers and services, eg. <a href="http://github.com" target="_blank">Github</a>, <a href="http://www.heroku.com" target="_blank">Heroku</a>.  By creating a public/private key it also means you dont have to enter a username &amp; password each time you use the service.  Ideally you should create a public/private key using a long passphrase, so that is what I will cover here.</p>
]]></summary>
    
      <category term="github" scheme="http://jr0cket.github.io/hexo-themes-test/tags/github/"/>
    
      <category term="heroku" scheme="http://jr0cket.github.io/hexo-themes-test/tags/heroku/"/>
    
      <category term="security" scheme="http://jr0cket.github.io/hexo-themes-test/tags/security/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The master plan for Salesforce community developers]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2012/11/the-master-plan-for-salesforce.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2012/11/the-master-plan-for-salesforce.html/</id>
    <published>2012-11-15T18:21:00.000Z</published>
    <updated>2014-05-14T00:06:41.000Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-2YtIbrYxq-A/UKUmQSaEeZI/AAAAAAAAIig/N7P66eyzdhs/s1600/salesforce-devzone-800k-devs.png" class="img-thumbnail">


<p>The promise of fast application development using the Salesforce platform is very appealing and the latest release has attracted over 800,000 developers.</p>
<p><a href="http://heroku.com/" target="_blank">Heroku</a> (part of the Salesforce family) is also attracting a lot of attention.  By allowing developers to deploy their applications with a simple <code>git push</code> command, it helps make continuous deployment becomes a reality.</p>
<p>These  are just two of the reasons I took the opportunity to join the  amazing team at salesforce.com.  So you can imagine I was overjoyed when I  started as Developer Advocate for EMEA.  Here is what that role is all  about.</p>
<a id="more"></a>

<h2 id="The_Plan">The Plan</h2>
<img src="http://blogs.developerforce.com/developer-relations/files/2012/11/the-master-plan.png" class="img-thumbnail">


<p>The plan is simple.  Help developers understand the value of developing applications with the force.com platform as well as the benefits of using Heroku to deploy their other application and services.</p>
<p>Starting with the UK, I am working hard to pull the current Salesforce developers together and build a strong community.  I’m also helping developers new to the platform to get a solid understanding of where they can use these platforms for their companies benefit and their own.</p>
<h2 id="Building_the_community"><strong>Building the community</strong></h2>
<p>(% img img-thumbnail <a href="http://blogs.developerforce.com/developer-relations/files/2012/11/meetup-logo.jpg" target="_blank">http://blogs.developerforce.com/developer-relations/files/2012/11/meetup-logo.jpg</a> %}</p>
<p>One of our partners, <a href="http://www.tquila.com/" target="_blank">Tquila</a>, did a great job of starting a <a href="http://www.meetup.com/LondonSalesforceDevelopers/" target="_blank">Salesforce developer community in London</a>.   I have aims of making it this community more active.  In the last month we have seen a 300% rise in members and I hope we can keep growing with exciting <a href="http://www.meetup.com/LondonSalesforceDevelopers/" target="_blank">events</a> in the coming months.</p>
<p>I am also looking for a few passionate geeks to start communities in  their own areas. Its pretty easy to get started and salesforce.com will create a meetup.com site for you so other developers can find your  events.  Those events dont have to be grand, it can all start with a meetup in a pub (like the developer meetups in <a href="http://www.meetup.com/Bristol-Salesforce-Platform-Developer-User-Group/events/88044102/" target="_blank">Bristol</a> &amp; <a href="http://www.meetup.com/North-UK-Salesforce-Developer-User-Group/" target="_blank">Leeds</a>).  It just needs someone to kick-start it all and you will soon have a thriving community.</p>
<p>Check to see if there is a <a href="https://maps.google.com/maps/ms?msid=210108725500451274783.0004cab36a064aa71872b&amp;msa=0&amp;ll=39.639538,0.527344&amp;spn=108.01067,270.527344" title="Salesforce user groups world wide" target="_blank">Salesforce community in your area</a> and get involved to boost your career - and have some fun too!  If there is no group in your area, why not <a href="mailto:info@developerforce.com" title="mailto:info@developerforce.com">contact us</a> and we’ll help you start one?</p>
<h2 id="Bringing_developers_together">Bringing developers together</h2>
<p>People can always do so much more with the help of others.  I see the community as an amazing place to learn, discover and share ideas and techniques with open minded developers.</p>
<p>Through the local Salesforce communities we are building across Europe, we will be running lots of different events.  Here are some we are lining up already.</p>
<h3 id="Hack_the_Tower_-_getting_practical"><a href="http://hackthetower.co.uk" target="_blank">Hack the Tower</a> - getting practical</h3>
<p>There is so much more you can discover by getting a group of developers  together and putting together an application in the space of a few hours.  I recently supported the <a href="http://blog.jr0cket.co.uk/2012/10/london-scala-hackathon-powered-by-heroku.html" target="_blank">London Scala hackathon</a> where we used Heroku, Github, Play framework and MongoDB to build a community website in a morning.</p>
<img src="http://developer.salesforce.com/blogs/developer-relations/files/2012/11/LSug-hackathon-hackers-hacking.png" class="img-code">


<p>Another variation is to bring developers together from the same industry.  Not  only will these developers face similar challenges when building  applications, they can work with each other to build services that  benefit the industry.  Our first mini-hack is with <a href="http://www.meetup.com/LondonSalesforceDevelopers/events/86354442/" target="_blank">developers in the media industry on 21st November</a>.</p>
<p>Using our space in <a href="http://maps.google.com/maps?q=Level+27A%2C+25+Old+Broad+Street%2C+London.+EC2N+1HQ+%2C+London" target="_blank">Tower42</a> not only gives amazing views of London but allows  us to running a series of hackathons for the many developer communities  around London.  Our first “<a href="http://www.meetup.com/LondonSalesforceDevelopers/events/91343352/" target="_blank">HackTheTower</a>“ on the 8th December in conjunction with the <a href="http://www.meetup.com/london-scala/events/91346712/" target="_blank">London Scala user group</a>.</p>
<h3 id="Developer_Days">Developer Days</h3>
<p>There are some amazing things you can do with the <a href="http://developer.salesforce.com/" target="_blank">Salesforce1 Platform</a> and <a href="http://www.heroku.com/" target="_blank">Heroku</a> platform.  To learn all these can take a bit of time and so to help  those new to the platforms we are planning “developer days” to  kick-start your journey.</p>
<p>The developer days will consist of a morning of discussion to help you understand the <a href="http://developer.force.com/" target="_blank">Force.com</a> and <a href="http://www.heroku.com/" target="_blank">Heroku</a> platforms.  Then you  spend the whole afternoon building applications, practising what you have learnt with guidance from our on-site experts.</p>
<p>The developer days will run across Europe in the coming months (<em>update: these are now called Elevate</em>).</p>
<h2 id="Who_am_I?">Who am I?</h2>
<p>My  background is mainly in Java development, although I have also done JavaScript, Python, Ruby and .Net apps too.  Recently I have been learning functional programming with Clojure (and Emacs) and <a href="http://clojuremadesimple.co.uk/" target="_blank">teaching what I have learnt</a> to others.</p>
<p>I love learning <a href="http://clojure.org/" target="_blank">Clojure</a> because its  an amazing new (and old) language and its great to deploy my Clojure web  apps on Heroku.  I also give talks and run practical sessions for Clojure, Java, Scala and other technical communities across the UK.</p>
<p>I have been lucky to work with some great companies in my time.  They  including Atlassian, several start-ups in London and several consultancy companies (mainly financial services) across the UK and Europe.</p>
<p>Talking tech is great fun and I love discussing all the possibilities out there.  Hope to meet you at a community event soon!</p>
<p>Thank you.<br><a href="http://twitter.com/jr0cket" target="_blank">@jr0cket</a></p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-2YtIbrYxq-A/UKUmQSaEeZI/AAAAAAAAIig/N7P66eyzdhs/s1600/salesforce-devzone-800k-devs.png" class="img-thumbnail">


<p>The promise of fast application development using the Salesforce platform is very appealing and the latest release has attracted over 800,000 developers.</p>
<p><a href="http://heroku.com/" target="_blank">Heroku</a> (part of the Salesforce family) is also attracting a lot of attention.  By allowing developers to deploy their applications with a simple <code>git push</code> command, it helps make continuous deployment becomes a reality.</p>
<p>These  are just two of the reasons I took the opportunity to join the  amazing team at salesforce.com.  So you can imagine I was overjoyed when I  started as Developer Advocate for EMEA.  Here is what that role is all  about.</p>
]]></summary>
    
      <category term="heroku" scheme="http://jr0cket.github.io/hexo-themes-test/tags/heroku/"/>
    
      <category term="salesforce" scheme="http://jr0cket.github.io/hexo-themes-test/tags/salesforce/"/>
    
      <category term="salesforce" scheme="http://jr0cket.github.io/hexo-themes-test/categories/salesforce/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Managing multiple SSH keys to avoid Heroku permission issues]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2012/11/managing-multiple-ssh-keys-to-avoid.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2012/11/managing-multiple-ssh-keys-to-avoid.html/</id>
    <published>2012-11-03T12:04:00.000Z</published>
    <updated>2014-05-13T17:34:22.000Z</updated>
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-WbaI8XNIuc4/UJPNtGsJ8gI/AAAAAAAAIgQ/O-QkJLcoS9s/s1600/ssh-private-public-keys2.jpg" class="img-thumbnail">


<p>I was a little surprised to have an access issue with <a href="http://www.heroku.com/" target="_blank">Heroku</a> when using my new Mac Book Pro, as its always been really easy to deploy my applications to Heroku in the past.&nbsp; I kicked myself when I realised I’d only set up a public key specifically for my Github account.</p>
<p>This got me to wondering the best way to set up keys given I am using different services for both personal project and work. </p>
<a id="more"></a>

<h2 id="The_situation">The situation</h2>
<p>I had created my first <a href="http://clojure.org/" target="_blank">Clojure</a> application using the built in <a href="http://leiningen.org/" target="_blank">Leiningen</a> template for heroku, which creates everything you need to deploy your Clojure application on Heroku, even the Procfile.</p>
<p>I committed the project to my local git repository and pushed a copy to the github repository for the project.&nbsp; Using foreman run I had the application running locally, so all that remained was to push it to Heroku.</p>
<p>When I tried to push to Heroku I got the following error message: </p>
<img src="http://2.bp.blogspot.com/-eNKLBlpxH0w/UJMPMFNowgI/AAAAAAAAIf4/McQ94MUVe8M/s1600/heroku-ssh-key-permission-denied.png" class="img-code">


<p><em>Heroku push error: permission denied (public key).</em></p>
<h2 id="Heroku_setup">Heroku setup</h2>
<p>To deploy your application to heroku, its simply a matter of</p>
<ul>
<li>creating an heroku account</li>
<li>downloading the heroku toolbelt</li>
<li>loging in to heroku: <code>heroku login</code></li>
<li>adding your public key to your heroku account: <code>heroku keys:add</code></li>
<li>pushing your project to the heroku git repository: <code>git push heroku master</code></li>
</ul>
<p>If you dont have an existing key, then <code>heroku keys:add</code> will create one for you.  In my case it picked up the only key I had, the one for Github.  As this key is specifically set up for my Github account then its not surprising that it was not going to work.</p>
<h2 id="Diagnosing_the_problem">Diagnosing the problem</h2>
<p>The Heroku toolbelt gives you the tools to see whats going on, using <code>heroku keys</code> lists the public key added to your account.  So when I checked my keys it was clear what the problem was.</p>
<img src="http://1.bp.blogspot.com/-y8YLMEbdY7c/UJUH2dV61_I/AAAAAAAAIhY/cheo-gGJWkk/s1600/Heroku-keys-github.png" class="img-code">


<h2 id="The_resolution">The resolution</h2>
<p>I could have just created a new key for Heroku account using the default file name <code>~/.ssh/id_rsa.pub</code>.  However, I can see myself getting confused over keys, so I created a key with a name that tells me what it is for.  I also thought it may be more secure to have different keys for different servies.</p>
<p>I used the ssh-keygen command to create a key of type RSA and when asked for a file I gave it an heroku specific name, so I knew what it was for.</p>
<img src="http://4.bp.blogspot.com/-LJ4fCbCS0cc/UJPRl_Zf75I/AAAAAAAAIgg/jid1QDaZI-I/s1600/Heroku-keys-new-key-and-upload.png" class="img-code">


<p>Once the key was created I added it to my Heroku account using <code>heroku keys:add</code>. </p>
<p>Looking at my keys, I see I now have two added to my Heroku account.</p>
<img src="http://1.bp.blogspot.com/-_1JP8EbnvpU/UJPP_0NEx-I/AAAAAAAAIgY/HFmdDTANylY/s1600/Heroku-keys-github-and-heroku.png" class="img-code">


<p>Lets remove the Github key using <code>heroku keys:remove [KEY]</code></p>
<img src="http://3.bp.blogspot.com/-z_ZsncYeCag/UJUEh9W5rMI/AAAAAAAAIg4/vNLWHY7GndY/s1600/Heroku-keys-remove-github.png" class="img-code">


<p>Now I just have the one public key added, the one specifically for Heroku.</p>
<img src="http://3.bp.blogspot.com/-FSx2TzEJgzQ/UJUEyQL4s1I/AAAAAAAAIhA/oHgZCSqs6YA/s1600/Heroku-keys-heroku.png" class="img-code">


<h3 id="Configuring_multiple_keys">Configuring multiple keys</h3>
<p>As I am using multiple keys then I need to specify which one my SSH connection should use when connecting to Heroku.</p>
<p>To tell Heroku which key to use, we add in a simle host cofiguration section to <code>~/.ssh/config</code>.</p>
<p>In your account home there is an <code>.ssh</code> folder that contains all your keys and any configuration file.&nbsp; I create a file called <code>config</code> and added the following configuration options</p>
<pre><code><span class="preprocessor">## ~/.ssh/config</span>

Host heroku<span class="preprocessor">.com</span>
Hostname heroku<span class="preprocessor">.com</span>
Port <span class="number">22</span>
IdentitiesOnly yes
IdentityFile ~/<span class="preprocessor">.ssh</span>/heroku
TCPKeepAlive yes
user jstevenson@heroku<span class="preprocessor">.com</span>
</code></pre><p>Now when I push to Heroku I do so using the right key and everything works smoothly as usual.</p>
<img src="http://4.bp.blogspot.com/-wU5q9Bbv0-k/UJUFpLgVbII/AAAAAAAAIhI/89fZ9iGd8n4/s1600/Heroku-deploy-success-myclojureweb.png" class="img-code">


<p>Why not get yourself <strong><a href="https://www.heroku.com" target="_blank">a free Heroku account</a></strong> and deploy your application in quickly and easily.</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-WbaI8XNIuc4/UJPNtGsJ8gI/AAAAAAAAIgQ/O-QkJLcoS9s/s1600/ssh-private-public-keys2.jpg" class="img-thumbnail">


<p>I was a little surprised to have an access issue with <a href="http://www.heroku.com/" target="_blank">Heroku</a> when using my new Mac Book Pro, as its always been really easy to deploy my applications to Heroku in the past.&nbsp; I kicked myself when I realised I’d only set up a public key specifically for my Github account.</p>
<p>This got me to wondering the best way to set up keys given I am using different services for both personal project and work. </p>
]]></summary>
    
      <category term="heroku" scheme="http://jr0cket.github.io/hexo-themes-test/tags/heroku/"/>
    
      <category term="clojure" scheme="http://jr0cket.github.io/hexo-themes-test/tags/clojure/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[London Scala Hackday powered by Heroku]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2012/10/london-scala-hackathon-powered-by-heroku.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2012/10/london-scala-hackathon-powered-by-heroku.html/</id>
    <published>2012-10-30T14:32:00.000Z</published>
    <updated>2014-05-15T18:24:42.000Z</updated>
    <content type="html"><![CDATA[<p>Saturday 27th saw a great hackday thanks to <a href="https://twitter.com/rrees" target="_blank">Robert Rees</a>, The Guardian and members of the <a href="http://www.meetup.com/london-scala/" target="_blank">London Scala user group</a>.  The ambitious challenge was to build an community website where events, conferences, blogs, code repos and  community discussions were all available from one place.</p>
<p>There are several websites out there that do a part of what a community  needs, to this project is trying to help bring all that together in one  place.  So the grand plans include, pulling in content from event sites,  publishing events to sites, register at events with a single touch and  widely distribute your interest and attendance automatically.</p>
<p>Or just have fun hacking on some cool technology and learning something new.</p>
<a id="more"></a>

<h2 id="The_basic_architecture">The basic architecture</h2>
<p>The hack used the <a href="http://www.playframework.org/" target="_blank">Play framework</a>, a recent development that makes developer lives easy when building web applications.  A project had been started a couple of weeks ago using Play Framework 2.0.3 although as there was a new update, we moved to 2.0.4 during the hackathon.</p>
<p><a href="http://www.heroku.com" target="_blank">Heroku</a> has been used as the deployment platform as it makes everything really easy.  You can deploy with a commit to a git repository.  So long as your build file works locally, then you can deploy on Heroku.</p>
<p>As we were using Heroku, we made use of <a href="https://addons.heroku.com/" target="_blank">several addons availalbe</a>, specifically adding <a href="https://addons.heroku.com/mongolab" target="_blank">MongoDB</a> to the design.  MongoDB would be used to pull in information from sites  that had a limited hit rate.  Mongo could also be used for holding any  adhoc data we wanted to keep around.</p>
<h2 id="The_deployment_process">The deployment process</h2>
<img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-topic">


<p>Andy Hicks, our beloved community leader created a play framework project.  Then set up an heroku account, adding a couple of extra people as collaborators to be responsible for pushing changes to live.</p>
<p>Although we could just deploy directly onto heroku, its useful to <a href="http://www.github.com" target="_blank">Github</a> as your development repository.</p>
<p>Using Github, you can manage the code base by forking the main repo and submitting change via github pull requests.  This encourages developers to commit often and make smaller changes, essential things if you only have a few hours to get things live.</p>
<h2 id="Continually_deploying">Continually deploying</h2>
<img src="http://4.bp.blogspot.com/-Gpk2Bz1KOSU/UI_b8kGF5fI/AAAAAAAAIeA/0tjExsTaL6E/s1600/lsug-hackathon-commit-graph-text.png" class="img-topic">


<p>Even though we were first commiting changes to github, we still pushed the  changes to Heroku regularly.  I would push changes up to Heroku after each pull request had been successfully merged.</p>
<p>If there were multiple pull requests waiting (usually due to fixing a conflicting pull request) then I’d merge all the outstanding requests before pushing to heroku.</p>
<p>The deployment process was essentially myself pulling changes from the github repository to my laptop, then pushing everything to the heroku git repository.</p>
<h2 id="Keeping_up_to_date">Keeping up to date</h2>
<p>One trick we learnt to make things easier is the <code>git stash</code> command.  If you have been working away on your code and realised you  were behind master, you can hide away the changes in your working copy  and git pull from the master without loosing your changes.</p>
<p>When you run the command <code>git stash pop</code> then your working copy changes are re-applied and you can resolve any confilcts you have before commiting.</p>
<pre><code>git stash
git pull lsugweb master
git stash pop 
&lt;resolve <span class="built_in">any</span> conflicts&gt;
</code></pre><p>Alternatively, if you are doing more experimentation then a branch was created to work  on which would then be merged and committed into master if it was valuable code.</p>
<pre><code>git branch branch-<span class="property">name</span>
&lt;edit you code base&gt;
git merge branch-<span class="property">name</span> master
</code></pre><h2 id="Challenges">Challenges</h2>
<p><strong>Git experience</strong>:<br>Although git is very popular now, many developers are still learning how to use it effectively, especially when working collaboratively.  </p>
<p><strong>.gitignore</strong>:<br>We had quite a few conflicting pull requests due to the <code>.gitignore</code> file.  So to keep things simple we agreed to keep changes to <code>.gitignore</code> seperate from code commits.  Likewise with any other non-essential config changes.  Add <strong>.gitignore</strong> to <code>.gitignore</code> and just  maintain a managed set of ignore files</p>
<p><strong>Keep commits small:</strong>:<br>Its  was so much easier to merge a series of small changes when you are using pull requests, especially when you have someone managing the queue  and can merge those changes quickly.  The bigger the commit, the longer it takes to merge and backs up your pull requests.  Our largest commit affected 73 files and it took several attempts before we could get it to automatically merge.  At least it gave us chance to talk about the  change in more detail.</p>
<p>It was a great hackathon and thanks to everyone that came along, <a href="https://twitter.com/rrees" target="_blank">Robert Rees</a> for orgaising and The Guardian for hosting us.  Why not get yourself to a hackathon and join in the fun, or even organise your own ?</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank">@jr0cket</a></p>
]]></content>
    <summary type="html"><![CDATA[<p>Saturday 27th saw a great hackday thanks to <a href="https://twitter.com/rrees" target="_blank">Robert Rees</a>, The Guardian and members of the <a href="http://www.meetup.com/london-scala/" target="_blank">London Scala user group</a>.  The ambitious challenge was to build an community website where events, conferences, blogs, code repos and  community discussions were all available from one place.</p>
<p>There are several websites out there that do a part of what a community  needs, to this project is trying to help bring all that together in one  place.  So the grand plans include, pulling in content from event sites,  publishing events to sites, register at events with a single touch and  widely distribute your interest and attendance automatically.</p>
<p>Or just have fun hacking on some cool technology and learning something new.</p>
]]></summary>
    
      <category term="hackday" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hackday/"/>
    
      <category term="heroku" scheme="http://jr0cket.github.io/hexo-themes-test/tags/heroku/"/>
    
      <category term="scala" scheme="http://jr0cket.github.io/hexo-themes-test/tags/scala/"/>
    
      <category term="dev-events" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Using Emacs 24 server on Mac OSX for instant editing]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2012/10/using-emacs-24-server-on-mac-osx-for.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2012/10/using-emacs-24-server-on-mac-osx-for.html/</id>
    <published>2012-10-21T16:10:00.000Z</published>
    <updated>2014-05-08T21:56:41.000Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">


<p>I love using Emacs for Clojure development, although as I add to my configuration file I noticed start-up times have grown by a few milliseconds, which can feel like a life time when you have just thought of a new idea.</p>
<a id="more"></a>


<img src="http://2.bp.blogspot.com/-hZFPgZzKBsE/UIQFvP0lo_I/AAAAAAAAIa4/zxnsCqcdx5k/s1600/emacs-for-macosx-screenshot.png">


<p>To speed things up I am now using <code>emacsclient</code>, which loads your file into a currently running Emacs application (or starts Emacs if its not running).</p>
<p>The following is based on Emacs 24 installed from <a href="http://emacsformacosx.com/" target="_blank">Emacs for MacOSX</a> on Mac OSX 10.7.5 but should work for Ubuntu and other Linux/Unix systems.</p>
<h2 id="Setting_up_the_Emacs_server">Setting up the Emacs server</h2>
<p>The easiest way is to run Emacs and then start up the server once its running using</p>
<pre><code>M<span class="attribute">-x</span> server<span class="attribute">-start</span>
</code></pre><p>You can also configure emacs to start its server automatically when it run.  Add the following to your <code>~/.emacs.d/init.el</code> file to check if the server is running and start it if it is not:</p>
<img src="http://4.bp.blogspot.com/--E7xbXOboT0/UIP-NeMc7ZI/AAAAAAAAIac/Y0gfXXp65qk/s1600/emacs-config-server-start-check.png" class="img-code">


<p>It is also possible to call emacs on the command line with the <code>--daemon</code> option to start the server as it runs.  You could put this in a script or shell alias.</p>
<h2 id="Legacy_Emacs_on_MacOSX">Legacy Emacs on MacOSX</h2>
<p>One thing that gets in the way of my Emacs 24 experience is Emacs 22, which seems to be installed by default in Mac OSX.&nbsp; A quick Google gives  little in the way of removing this older version except to remove the  executables from the path.&nbsp; I took a reversable option of renaming the  following files to show the version and get them out of my way.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="built_in">sudo</span> mv /usr/bin/emacs/emacs22

<span class="built_in">sudo</span> mv /usr/bin/emacsclient emacsclient22 

<span class="built_in">sudo</span> mv /usr/bin/emacs-undumped emacs22-undumped
</pre></td></tr></table></figure>


<p>You could just put Emacs 24 at the front of your path, before <code>/usr/bin</code>.  As I have no intention to ever use Emacs 22 its simpler just to move it out of the way.</p>
<h2 id="Putting_Emacs_24_on_the_right_path">Putting Emacs 24 on the right path</h2>
<p>Assuming you have moved emacs 22 out of the way, the only way to call Emacs from the command line now is to use the full path of the Emacs binary.  So, in my home directory I have a folder called <code>bin</code> that contains all my scripts that save me effort and save my path from becoming messy.  I added this folder to my executable path by adding a <code>~/.profile</code> with the following simple path setting</p>
<p>~/.profile</p>
<img src="http://3.bp.blogspot.com/-xH_08slJ05s/UIQHu_XI4pI/AAAAAAAAIbA/bPva49i4N7I/s1600/macosx-profile-path.png" class="img-code">


<p>In my <code>~/bin</code> folder I created the following script files as a convenience </p>
<pre><code>~<span class="regexp">/bin/emacs</span>
</code></pre><img src="http://2.bp.blogspot.com/-p8nN9yKzwmQ/UIQQ1DDkEbI/AAAAAAAAIb0/X5i4KnmL4xM/s1600/macosx-emacs-script.png" class="img-code">


<pre><code>~<span class="regexp">/bin/emacsclient</span>
</code></pre><img src="http://1.bp.blogspot.com/-SXCybCESHEQ/UIQQ16uw9ZI/AAAAAAAAIb4/dzas9TCor7g/s1600/macosx-emacsclient-script.png" class="img-code">


<pre><code>~<span class="regexp">/bin/emacsclient</span>-terminal
</code></pre><img src="http://4.bp.blogspot.com/-tP7u04MFWC4/UIQP7lx4vXI/AAAAAAAAIbs/cczHAdRdblU/s1600/macosx-emacsclient-terminal-script.png" class="img-code">


<h2 id="Using_EmacsClient">Using EmacsClient</h2>
<p>Now to the fun stuff.  When ever you want to edit a file you can simply use the command <code>emacsclient</code> and up pops an Emacs window with your file, or using <code>emacsclient-terminal</code> then Emacs displays itself in the current terminal window.</p>
<pre><code>emacsclient filename

emacsclient<span class="attribute">-terminal</span> filename
</code></pre><p>If the Emacs server is already running, then you will see your editor window straight away.</p>
<p>If you have not run Emacs in this current session, then EmacsClient will run the Emacs server for you and automatically connect afterwards.&nbsp; This wont be instantaneous, but it will only need to do it once.</p>
<p>To exit the editing, save your work with <code>C-x C-s</code> and close the editor window with <code>C-x k</code></p>
<h2 id="Editing_for_longer_-_set_the_terminal_free">Editing for longer - set the terminal free</h2>
<p>When you use EmacsClient then the terminal waits for your editing session to end.  This is really convienient when calling Emacsclient from Git, which expects a reply when you have finished editing.</p>
<p>If you want to free up the terminal you are using to call EmacsClient, then use the <code>-n</code> or <code>--no-wait</code> option as so:</p>
<pre><code>emacsclient <span class="attribute">-n</span> filename
</code></pre><img src="http://4.bp.blogspot.com/-SAdRyX6xiDw/T2ENelQF52I/AAAAAAAAGKs/F1VH7LPiJEk/s1600/git-logo-vertical.png" class="img-code">


<h2 id="Setup_for_Git">Setup for Git</h2>
<p>On my to-do list is using magit from within Emacs.  Until then I am still using the command line to git version my code and push it up to a shared repository.</p>
<p>The only time I need to do anything special for Git and Emacs is when I have a merge conflict, or I forget to add a commit message using the <code>-m</code> option.</p>
<p>In either case, I wanted to be able to open the file in Emacs straight away.  This can be done by setting the global configuration option for the git editor.</p>
<p>On the command line, run the following git command to setup git to call emacsclient when it needs to edit a file:</p>
<img src="http://2.bp.blogspot.com/-LGM6A090Vkc/UIQZF3x67II/AAAAAAAAIcY/IFsbHB8_UHs/s1600/macosx-git-editor-emacsclient.png" class="img-code">


<h2 id="Killing_the_Server_with_emacsclient">Killing the Server with emacsclient</h2>
<img src="http://2.bp.blogspot.com/-8X8aXlukD_Q/UIQeGiIaPbI/AAAAAAAAIc0/fG05jMdR1SY/s1600/psdoom.gif" class="img-code">


<p>If for some reason you need to kill the Emacs server, you can do so within Emacs or use EmacsClient to close it.</p>
<p>A quick and dirty option that wont save your file, is just to kill emacs </p>
<pre><code>emacsclient <span class="operator">-e</span> <span class="string">'(kill-emacs)'</span>
</code></pre><p>A more elegant option is to save your work and then kill emacs</p>
<pre><code>emacsclient <span class="operator">-e</span> <span class="string">'(client-save-kill-emacs)'</span>
</code></pre><h2 id="Summary">Summary</h2>
<p>EmacsClient gives a really quick way to use all the power of Emacs and have really fast access to files you are working with on the command line.  There are <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/emacsclient-Options.html#emacsclient-Options" target="_blank">lots of options</a> that come with EmacsClient I have not delved into.&nbsp; I hope to experiment with naming the Emacs server and evaluating between different Emacs frames using the server name.&nbsp; That sound fun.  There is also <code>--eval</code> option, to send Emacs Lisp code to the server to be evaluated. Nice.</p>
<p>What will you doing with EmacsClient?</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">


<p>I love using Emacs for Clojure development, although as I add to my configuration file I noticed start-up times have grown by a few milliseconds, which can feel like a life time when you have just thought of a new idea.</p>
]]></summary>
    
      <category term="emacs" scheme="http://jr0cket.github.io/hexo-themes-test/tags/emacs/"/>
    
      <category term="git" scheme="http://jr0cket.github.io/hexo-themes-test/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[London Salesforce developers - Dreamforce aftermath]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2012/10/london-salesforce-developers-dreamforce.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2012/10/london-salesforce-developers-dreamforce.html/</id>
    <published>2012-10-12T16:17:00.000Z</published>
    <updated>2014-05-15T19:25:43.000Z</updated>
    <content type="html"><![CDATA[<img src="http://flic.kr/s/aHsjCfs8vJ" class="img-thumbnail">


<p>Over 7,000 developers flocked to the <a href="http://events.developerforce.com/conference/dreamforce" target="_blank">DevZone</a> at this years Dreamforce conference.  I was one of them and along with Adam Seligman, Keir Bowden and Andy Mahood we told tales of our experiences to the <a href="http://www.meetup.com/LondonSalesforceDevelopers/" target="_blank">London Salesforce Developer community</a>.</p>
<p>Wes Nolte took charge of the mike and quizzed the panel on their experiences of the event.  Here are the questions that stuck in my memory from the evening</p>
<h2 id="What_was_the_thing_that_got_you_most_excited_about_Dreamforce_?">What was the thing that got you most excited about Dreamforce ?</h2>
<p>The thing that got to me was the sheer size of it all.  With so many developers around it was great that we had a whole of Moscone West to spread it all out.  There were banks of laptops provided for anyone to get involved in coding workshops and all through the day they were all filled up.</p>
<p>There were so many different things to do, from playing donkey kong to coding, listening to great talks, guided tutorials, code consultations and quizing lots of people from Salesforce and Heroku about their platforms.</p>
<img src="http://2.bp.blogspot.com/-iFOo-wRJGSo/UHg8hxE5Q1I/AAAAAAAAIYc/iSZB4mCa7dk/s1600/dreamforce-devs-tshirt-printing.png" class="img-code">


<p>The biggest problem was what to actually do from so much choice.  Of course there was an app for that too and a chatter stream so you could discuss sessions as well.</p>
<p>If you couldn’t make up your mind you could also queue up and print your own t-shirt!</p>
<p>It was a sign of how open the conference was to have an <a href="http://en.wikipedia.org/wiki/Unconference" target="_blank">un-conference</a> section, where anyone could propose a talk.  There was even a theatre dedicated to community related talks.  I met some great guys from Bristol who are starting up their own Salesforce community events.</p>
<h2 id="What_was_your_favourite_session_?">What was your favourite session ?</h2>
<p>The most entertaining session was by <a href="http://redmonk.com/jgovernor/2012/09/21/dreamforce-12-crazy-big-with-lower-barriers/" target="_blank">James Governor from RedMonk</a>, comparing the rise of craft brewing with the rise of developers.  Craft brewing is bringing back the entrepreneurial flavour into beer making and bringing quality product to the market. Developers are doing the same for startups and enterprises around the world.  Calling developers the new kingmakers, James highlights how important developers are and the responsibility we have on our shoulders to support the businesses and projects we are involved in. See article….</p>
<p>I also really enjoyed the live coding challenges from MVP developers and developer evangelists.  There was a great banter as well as great code being bashed out.</p>
<img src="http://1.bp.blogspot.com/-ZwXY5J6tDHc/UHg78yqt0QI/AAAAAAAAIYU/zaOPW6R6pSg/s1600/dreamforce-devs-collaborating.png" class="img-code">


<p>My favourite moment was when one of my colleagues was presenting.  They had a great presentation line up, all using on-line resources and then the wireless failed.  Before the venue tech guys had chance to fix it, someone from the audience donated their phone and the presentation was on again.  I had a warm fuzzy feeling about that!</p>
<p>All through the conference there was a feeling of collaboration and community.  Whether that be debugging each others code through the workshops or collaborating on the mini-hacks.  There was a constant stream of activity every day.</p>
<p>Have a look at <a href="http://developer.force.com/dreamforce" target="_blank">all the videos and code</a> produced at the DevZone this year and see for yourself.</p>
<h2 id="What_new_stuff_are_you_already_using_or_want_to_try_straight_away_?">What new stuff are you already using or want to try straight away ?</h2>
<p>In a nutshell, it has to mobile development.  I remember spending a day in a workshop getting up to speed with development on Android devices and there was still lots to learn by the time I had finished.  That seems like a lifetime compared what I saw at Dreamforce.  Using the Salesforce Touch platform you can easily and quickly build HTML5 and hybrid applications in be finished in hours, not days.</p>
<p>It seemed the hardest thing for mobile development using the Touch platform was registering for your Apple ID.</p>
<h2 id="Turing_the_tables_on_the_audience">Turing the tables on the audience</h2>
<p>At the end we turned the tables and each panellist got to ask a question of the audience.</p>
<p>I wanted to shorten our name from “Salesforce platform developers user group London”, not the easiest thing to tell your friends about.  From the feedback we got we have changed it to the punchier <a href="http://www.meetup.com/LondonSalesforceDevelopers/" target="_blank">London Salesforce Developers</a>, which encompasses the different platforms (heroku, force.com, data,com, etc) under one name.</p>
<h2 id="Summary">Summary</h2>
<p>Over 80 developers braved the cold October night to hear about out experiences and it was a great social event, made even better by the beer and pizza provided by <a href="http://www.tquila.com/" target="_blank">Tquila</a>.</p>
<p>Thanks also to our gratious hosts, 10Gen, for providing the venue.  10Gen are the company behind the popular MongoDB.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank">@jr0cket</a></p>
]]></content>
    
    
      <category term="heroku" scheme="http://jr0cket.github.io/hexo-themes-test/tags/heroku/"/>
    
      <category term="salesforce1" scheme="http://jr0cket.github.io/hexo-themes-test/tags/salesforce1/"/>
    
      <category term="cloud" scheme="http://jr0cket.github.io/hexo-themes-test/categories/cloud/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UK developer startup wins Aussie Gold]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2012/07/uk-developer-startup-wins-aussie-gold.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2012/07/uk-developer-startup-wins-aussie-gold.html/</id>
    <published>2012-07-25T14:45:00.000Z</published>
    <updated>2014-05-14T11:09:54.000Z</updated>
    <content type="html"><![CDATA[<img src="http://hindsightsoftware.com/img/hindsight.png" class="img-thumbnail">



<blockquote><p>Coding is fun, its also great if you make some profit!</p>
</blockquote>


<p>UK developers lead by community expert Alan Parkinson recently formed<a href="http://hindsighttesting.com/" target="_blank">Hindsight Software</a>, a start-up focused on bringing <a href="http://en.wikipedia.org/wiki/Behavior-driven_development" target="_blank">Behaviour Driven Development</a> (BDD) to as wide an audience as possible.  With their first product <a href="https://marketplace.atlassian.com/plugins/com.hindsighttesting.behave.jira" target="_blank">Behave for JIRA</a>, they entered into the <a href="https://marketplace.atlassian.com/codegeist" target="_blank">Atlassian Codegeist</a> competition judged by Atlassian’s CEO Mike Cannon-Brookes. They scored a big win against a record number of entries in the annual competition.</p>
<a id="more"></a>

<p>Whilst there are some great tools BDD tools already out there, eg. <a href="http://cukes.info/" target="_blank">Cucumber</a>, <a href="http://www.easyb.org/" target="_blank">EasyB</a>, they suffer from usability issues when used by less technically oriented people.  <a href="https://marketplace.atlassian.com/plugins/com.hindsighttesting.behave.jira" target="_blank">Behave for JIRA</a> makes it easy to use Cucumber style acceptance tests (using the Gherkin language) within a familiar and easy to use surrounding of JIRA tickets. </p>
<p>Getting started with the Atlassian platform was as easy as downloading the <a href="https://developer.atlassian.com/" target="_blank">software development kit (SDK)</a> and following the wide range of tutorials available. Having worked on many JIRA integration projects before, it was easy enough for Hindsight to understand the overall approach and be aware of the challenges upfront (like deciding which version of the platform to target).</p>
<p>Selling the software through the <a href="https://marketplace.atlassian.com/plugins/com.hindsighttesting.behave.jira" target="_blank">Atlassian marketplace</a> also minimised the non-coding work Hindsight had to do.  All that was required was to register their product on the Atlassian Marketplace website and within a day it was live. </p>
<p>For Hindsight is has been a great way to try out an idea without requiring massive investment in resources and technology, in the best tradition of a <a href="http://en.wikipedia.org/wiki/Lean_Startup" target="_blank">lean startup</a>.  Eric Ries would be proud!</p>
<img src="http://2.bp.blogspot.com/-U_xit_Jp0hs/T_V3BFcfPuI/AAAAAAAAIOM/bBOHeizMysE/s1600/atlassian-usergroup-logo.png" class="img-topic">


<p>Hindsight are keen to do more in the UK to help encourage other developers to see the benefit of building on the Atlassian platform.  Even though they are already part of the community by helping run the London Atlassian user group, they are keen to run plug-in workshops and other practical activities that get developers really engaged.</p>
<p>If you are into <a href="http://en.wikipedia.org/wiki/Behavior-driven_development" target="_blank">Behavour Driven Development</a>, or are looking for a way to manage requirements in a more humane way, then check out Behave for JIRA.</p>
<p>If you are a keen developer, have a look at the competition entries and think about what you could create for <a href="https://marketplace.atlassian.com/codegeist" target="_blank">Codegeist</a> 2013 or other coding competitions year round!  Good luck.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank">@jr0cket</a></p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://hindsightsoftware.com/img/hindsight.png" class="img-thumbnail">



<blockquote><p>Coding is fun, its also great if you make some profit!</p>
</blockquote>


<p>UK developers lead by community expert Alan Parkinson recently formed<a href="http://hindsighttesting.com/" target="_blank">Hindsight Software</a>, a start-up focused on bringing <a href="http://en.wikipedia.org/wiki/Behavior-driven_development" target="_blank">Behaviour Driven Development</a> (BDD) to as wide an audience as possible.  With their first product <a href="https://marketplace.atlassian.com/plugins/com.hindsighttesting.behave.jira" target="_blank">Behave for JIRA</a>, they entered into the <a href="https://marketplace.atlassian.com/codegeist" target="_blank">Atlassian Codegeist</a> competition judged by Atlassian’s CEO Mike Cannon-Brookes. They scored a big win against a record number of entries in the annual competition.</p>
]]></summary>
    
      <category term="atlassian" scheme="http://jr0cket.github.io/hexo-themes-test/tags/atlassian/"/>
    
      <category term="hindsight" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hindsight/"/>
    
      <category term="dev-event" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-event/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[My favourite estimation technique]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2012/04/my-favourite-estimation-technique.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2012/04/my-favourite-estimation-technique.html/</id>
    <published>2012-04-16T12:00:00.000Z</published>
    <updated>2014-05-14T11:21:02.000Z</updated>
    <content type="html"><![CDATA[<img src="http://rules.ssw.com.au/Management/RulesToBetterScrumUsingTFS/PublishingImages/size-stories-bad-example.jpg" class="img-thumbnail">


<p>Estimation is a dark art to start with and is often missuesed and abused to the detriment of the  development team.  As any valuable project has a level of uncertainty, estimates should never been seen as promises.</p>
<a id="more"></a>

<blockquote>
<p>If I were to ask for an estimate of the walk from the DiBi Conference venue at The Stage to Newcastle Central station, most people would say 15 minutes.  With this information, would you leave the venue 15 minutes before your train departs?</p>
<p>No, you would take that 15 minute estimation as a rough approximation of how long it should take for an average person if no problems arise.  You would still need to factor in issues like hills, waiting for bridges if they are raised, carrying heavy luggage that will slow you down and so on.</p>
</blockquote>
<p>So estimation gives you an assumption to work with, which you can evaluate and review throughout the project to be able to understand all the reasons why your estimation was wrong.</p>
<img src="http://4.bp.blogspot.com/-RjBS6M-a100/T4vF5qBGFrI/AAAAAAAAHZI/bLn8leYWlS0/s1600/estimation-technique.jpg" class="img-code">

<p><em>My favourite estimation technique</em></p>
<p>Estimation in a project should be a challenge and something that is valued as no more and no less than an educated guess, dependant on the facts at hand.</p>
<p>If you use estimation as a rod to beat up developers, they will  eventually learn to give longer and longer estimates, refuse to give time frames or in extreme cases just leave for a quieter life!</p>
<p>In the worst case, estimation can seem easy because you don’t understand the full range of challenges ahead of you, those challenges that will lead the project to fail, over-run or not deliver the value they promised.</p>
<p>If estimation is easy because you have done the same kind of project many times before, then you should consider why you are doing the same project again.  What added value will the project give to the stakeholders and organisation you work for?</p>
<p>So estimation is just an educated guess based on the understanding of the current situation, the confidence a team has in its own abilities and the forces that will act on the team from project stakeholders and the wider organisation.  Trying to assign actual dates and times to estimations seem a very risky strategy.</p>
<img src="http://3.bp.blogspot.com/-R9J5SrE2hPc/T4vKPL72nEI/AAAAAAAAHZQ/wLoRbMYeX-k/s1600/agile_tshirts-relative-sizing.png">


<h2 id="T-Shirt_sizes">T-Shirt sizes</h2>
<p>Rather than get hung up arguing and blaming people for estimates based on time, use <strong>S,M,L,XL,XXL</strong> t-shirt sizes to describe the size and complexity of your project work (scenarios, user stories, use cases).</p>
<p>Tshirt sizes allow you to quickly estimate work relative to all the other work for the project, including the work that has already been done.</p>
<p>Tshirt sizes allow you to keep estimations as assumptions, so you can get on with the work and learn how well you understood that piece of work.  As the project progresses the relative sizing of the work becomes less of a challenge as you have gained experience from all the pieces already completed.</p>
<p>You can even get <a href="http://scrumology.com/t-shirt-sized-estimating-cards/" target="_blank">planning poker cards with tshirt sizes</a>. </p>
<p><strong>Smaller pieces of work</strong><br>The most effective way to estimate a project is to make it very small or make all the pieces of work in the project very small.  This helps the development team estimate with less uncertainty due to the smaller scope. </p>
<p>A focus on understanding the complexity of a project and an appreciation of the most valued aspects will help the team have a more open and meaningful discussion with the rest of the organisation.</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://rules.ssw.com.au/Management/RulesToBetterScrumUsingTFS/PublishingImages/size-stories-bad-example.jpg" class="img-thumbnail">


<p>Estimation is a dark art to start with and is often missuesed and abused to the detriment of the  development team.  As any valuable project has a level of uncertainty, estimates should never been seen as promises.</p>
]]></summary>
    
      <category term="estimation" scheme="http://jr0cket.github.io/hexo-themes-test/tags/estimation/"/>
    
      <category term="agile" scheme="http://jr0cket.github.io/hexo-themes-test/categories/agile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A flavour of developer life in Sydney via Atlassian]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2012/03/sydney-trip-2012.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2012/03/sydney-trip-2012.html/</id>
    <published>2012-03-27T15:20:00.000Z</published>
    <updated>2014-05-14T11:25:34.000Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-iMa2zCJEX8U/TzFLah-CCKI/AAAAAAAAEbc/DmfFNvG9CO8/s1600/charlie_fullcolor_rbg.png" class="img-thumbnail">


<p>Through my work with Atlassian I had the great fortune to visit their headquarters in Sydney this January, height of the summer in Austraila.  Here is what happend.</p>
<a id="more"></a>

<p>Atlassian is a great company to work for and there is so much innovation going on (FedEx days, 20% time) its often hard to keep up with everything.  It was great to meet Atlassians on their home ground and experience the amazing city that is Sydney.</p>
<p>There are great development teams behind each product all with a different story and set of challenges. The teams have adopted new technologies such as <a href="http://www.atlassian.com/software/fisheye/overview/enterprise-dvcs" target="_blank">DVCS</a> and figured out how to get faster developer speed by using Git &amp; Mercurial.  We all use our own development tools so we can discover what the developer experience is like and continually strive to improve it.</p>
<p>With our move to software as a services, <a href="http://www.atlassian.com/agile/overview/building-quality-software" target="_blank">OnDemand</a>, the development teams also moved to more of a <a href="http://www.atlassian.com/agile/overview/building-quality-software" target="_blank">continuous delivery approach</a>.  So instead of a 97 day cycle, changes are dropping into our company wide dogfood-ing environment every two weeks - developers are never short of great feedback.</p>
<h2 id="Sydney_-_a_beautiful_city">Sydney - a beautiful city</h2>
<img src="http://2.bp.blogspot.com/-0qK1sD0URSY/TyB1RNTkDpI/AAAAAAAAG5o/9I846UDFUno/s1600/2012-01-23+17.21.30.jpg" class="img-code">


<p>There were lots of wonderful places to visit whist I was in Sydney,  I am not sure what my favourite was.  I explored lots of beaches, wildlife centres and some of the exotic night life. Sydney is a coastal city, so there are lots of ferry’s help you explore.  There is the famous Sydney Harbour Bridge which you can walk over the top of if you are feeling brave.</p>
<img src="http://2.bp.blogspot.com/-rZalzTpavVQ/T3HUTEKvwHI/AAAAAAAAHGc/uT96o3ihNOQ/s1600/Sydney-trip-Austrailia-day-logo.png" class="img-code">


<p>It was great to celebrate Australia day, the aussies really throw a great party - we had fun on Bondi beach where even the factor 50 was struggling to keep us cool, the water keeps us cool though!  The evening started with a great meal in China Town followed by an amazing firework display in Darling Harbour.</p>
<img src="http://goo.gl/photos/aT4UxtQnsE" class="img-code">


<p>Although it seems I experienced both the wettest and hottest days on record in Sydney, I still think its one of the best cities in the world to live and work in.  Have a look at the <a href="http://picasaweb.google.com/117080433375668558463/SydneyTrip2012?authuser=0&amp;feat=directlink" target="_blank">highlights of my trip</a> to get more of a feel for Sydney.</p>
<img src="http://3.bp.blogspot.com/-WCA8Nwr-aaw/Twq8ws3MexI/AAAAAAAAA9A/BfNj7GFXou8/s1600/2012-01-09+19.07.33.jpg" class="img-code">


<p>There is a lot of cultural diversity in the region, although thee is not a language barrier when coming from the UK (mostly).  There are plenty of new sights, sounds and tastes to explore, whist still enough recognisable places, like Wagamama, to stop you feeling homesick.</p>
<img src="http://www.atlassian.com/company/careers/careersTableSideBarInfo/02/content_files/file0/bus15in15.png" class="img-code">


<p>Come along to the <a href="http://www.atlassian.com/company/about/events/roadshow-recruit/2012" target="_blank">Atlassian roadshow on April 13th</a> and find out first hand what its like working for Atlassian.  Talk to us about the work we do and the way we do it.  Ask us about life in Sydney and Australia, bonus prizes for finding Aussies that have actually been to Ayres Rock!!</p>
<p>Dont forget to <a href="http://www.atlassian.com/company/about/events/roadshow-recruit/2012" target="_blank">sign up to find out more</a>!</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-iMa2zCJEX8U/TzFLah-CCKI/AAAAAAAAEbc/DmfFNvG9CO8/s1600/charlie_fullcolor_rbg.png" class="img-thumbnail">


<p>Through my work with Atlassian I had the great fortune to visit their headquarters in Sydney this January, height of the summer in Austraila.  Here is what happend.</p>
]]></summary>
    
      <category term="atlassian" scheme="http://jr0cket.github.io/hexo-themes-test/tags/atlassian/"/>
    
      <category term="dev-events" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[QCon London 2012 aftermath - the return of Dan North?]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2012/03/qcon-london-2012-aftermath-return-of.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2012/03/qcon-london-2012-aftermath-return-of.html/</id>
    <published>2012-03-15T18:17:00.000Z</published>
    <updated>2014-05-14T11:34:31.000Z</updated>
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-LtMc0kokd3I/T2G5znRZehI/AAAAAAAAGLE/nOrl_zI_Sro/s1600/QCON_LONDON_2012_u_reg_now_QCON_font.png" class="img-thumbnail">


<p>Talks at technical conferences can give a very detailed insight into new innovations, they be a great source of inspiration and motivation.  Sometimes they even make you giggle.</p>
<p>At QCon London I got large doses of all of the above, thanks to <strong><a href="http://twitter.com/richhickey" target="_blank">Rich Hickey</a></strong>, <a href="http://twitter.com/tastapod" target="_blank"><strong>Dan North</strong></a> (DWZ Trading), <a href="http://twitter.com/hatofmonkeys" target="_blank"><strong>Colin Humpreys</strong></a> (Carrenza), <a href="http://twitter.com/ade_oshineye" target="_blank"><strong>Ade Oshineye</strong></a> (Google) and <a href="http://twitter.com/patrickdebois" target="_blank"><strong>Patrick Debois</strong></a> (father of DevOps, working with Atlassian).  Here is a summary of my experiences.</p>
<a id="more"></a>

<blockquote>
<p>As I didnt make the training days this year, I was sad to miss out on the tutorials by <a href="http://qconlondon.com/london-2012/speaker/Simon+Brown" target="_blank">Simon Brown</a>, <a href="http://qconlondon.com/london-2012/speaker/Russell+Miles" target="_blank">Russ Miles</a> and <a href="http://qconlondon.com/london-2012/speaker/Rachel+Davies" target="_blank">Rachel Davies</a> which all looked great.</p>
</blockquote>
<img src="http://qconlondon.com/dl/photos/speakers/patrick_debois.gif" class="img-thumbnail">


<p>My favourite talk was definitely <a href="http://qconlondon.com/london-2012/presentation/Cloud...so%20much%20more%20than%20a%20tool%20fest" target="_blank">Cloud… is so much more than a tool</a> by <a href="http://jedi.be/blog" target="_blank">Patrick Debois</a>.  Not only was it an interesting experience report on the realities of using Cloudy technology to build a highly scalable video broadcasting service, it was also the best use of LolCats I have ever seen… ever… (<a href="http://qconlondon.com/dl/qcon-london-2012/slides/PatrickDebois_CloudSoMuchMoreThanAToolFest.pdf" target="_blank">slides</a>)</p>
<blockquote>
<p><a href="http://twitter.com/swardley&quot;" target="_blank">swardley</a> Awesome &gt; RT @[jr0cket]: @<a href="http://twitter.com/patrickdebois&quot;" target="_blank">patrickdebois</a> has the best cat based slides ever - even better than @swardley which is saying something <a href="http://twitter.com/qconlondon&quot;" target="_blank">@QConlondon</a></p>
</blockquote>
<img src="http://qconlondon.com/dl/photos/speakers/Dan%20North.jpg" class="img-thumbnail">


<p> Dan North was a cheeky a rascal as ever, actually making the audience think!  At a conference!  Oh, the humanity!  In his first talk (<a href="http://qconlondon.com/dl/qcon-london-2012/slides/DanNorth_DecisionsDecisions.pdf" target="_blank">slides</a>), Dan reminded us all that we have brains and we need to make sure that we are allowed to use them.  There are a lot of decisions that happen around use every day, are we sure we are making those decisions well, if at al?</p>
<p>In his second talk (<a href="http://qconlondon.com/dl/qcon-london-2012/slides/DanNorth_AintNoCureForTheDistributedBlues.pdf" target="_blank">slides</a>), based loosely on the Star wars trilogy in 6 parts, he gave a great insight into managing distributed teams within DWR (and tips on how to get your dog into the USA for 10 weeks).</p>
<h2 id="Pleasant_surprises">Pleasant surprises</h2>
<img src="http://twimg0-a.akamaihd.net/profile_images/1310554234/colin_reasonably_small.jpg" class="img-thumbnail">


<p>A surprising thought provoking talk by <a href="https://twitter.com/#%21/hatofmonkeys" target="_blank">Colin Humphrey</a> from Carrenza.  Silly me thought it would just be an overview of the fantastic build pipeline they build for their customers.  In actuality, it was something worthy of a lean startup conference, giving insight into the business drivers of using a build pipeline along with IaaS, PaaS and SaaS.  Lots of really useful ideas in his <a href="http://qconlondon.com/dl/qcon-london-2012/slides/ColinHumphreys_LessonsLearnedInDeployingPaaS.pdf" target="_blank">slides</a>, cant wait for the video to come out.</p>
<blockquote>
<p>Use open standards and don’t get addicted to a particular technology - <a href="https://twitter.com/heroku&quot;" target="_blank">@heroku</a> shows heroin on predictive text <a href="https://twitter.com/hatofmonkeys&quot;" target="_blank">@hatofmonkeys</a> <a href="https://twitter.com/qconlondon&quot;" target="_blank">@qconlondon</a></p>
</blockquote>
<img src="http://si0.twimg.com/profile_images/1610571617/john-stevenson-profile-barrel_normal.png)" class="img-thumbnail" title="[jr0cket](http://hootsuite.com/dashboard# " alt="jr0cket">


<p>I had the pleasure of listening to Ade Oshineye sharing his experiences when developing Google Buzz and Google plus and it was stuff we can all learn from.  Understanding how someone is going to use your code is very important when developing a public API, you cant just expect them to know everything you know.  By making the API’s easy to understand (without looking up lots of other APIs that yours depends on) and providing great documentation and tooling, you can deliver something that really gives a great developer experience (DevUX).</p>
<p><a href="http://qconlondon.com/london-2012/speaker/Joe+Armstrong" target="_blank">Joe Armstrong</a> gave some great insights into why <a href="http://en.wikipedia.org/wiki/Joe_Armstrong_%28programming%29" target="_blank">Erlang</a> is so scalable because it is so fault tolerant.  He was also the first speaker I heard to say F*$k at the conference, which seems a common trait with Erlangers - but then they are used to very high tolerance!</p>
<img src="http://4.bp.blogspot.com/-H3kfQNamCzI/T1oOjrCAXxI/AAAAAAAAy-g/b1697_vnx9U/s578/12+-+1" class="img-topic">


<h2 id="The_Crazy">The Crazy</h2>
<p><a href="http://qconlondon.com/london-2012/speaker/Philip+Wadler" target="_blank">Philip Wadler</a> is very passionate about lambda calculus and gave an intensely engaging talk on the mathematical principles behind functional programming languages like Scala and Clojure.  Philip surprised everyone when he relieved his dual identity and transformed into lambda man live on stage!</p>
<p>I was lucky enough to have a chat with Joe during his book signing a the O’Reilly stand.  A great guy and I’ll be reading <a href="http://homepages.inf.ed.ac.uk/wadler/" target="_blank">his work</a> when I get a chance</p>
<h2 id="Fun_stuff">Fun stuff</h2>
<img src="http://picasaweb.google.com/lh/photo/b03xZR4-7NU6sHzfgBEsDtMTjNZETYmyPJy0liipFm0?feat=embedwebsite" class="img-topic">


<p>I had great fun organising the Atlassian after  party, it seemed like everyone from QCon turned up!</p>
<p>There was a great  spread of food, although we did tease people a little by it coming out  in stages!  There was also a great selection of beers, not just bottled  larger.  There was even some wine at the request of Trisha Gee.</p>
<p><a href="https://picasaweb.google.com/117080433375668558463/QConLondon2012TheAtlassianParty?authuser=0&amp;feat=embedwebsite" target="_blank">QCon London 2012 - The Atlassian Party</a></p>
<h2 id="Disappointments">Disappointments</h2>
<p>Talks from Twitter and Facebook drew in a huge crowd, so much so that the room for the Twitter talk had people sitting on the flour and the Facebook talk was moved to the largest room (and was still full).  Unfortunately whist some of the content in these talks was of interest, there was not enough detail for me to really enjoy them.</p>
<h2 id="Fast_feedback_practices">Fast feedback practices</h2>
<p>Using a bunch of smartphones, feedback about the conferece was gathered really effectively.  When leaving the room, several people holding smartphones were capturing feedback, allowing people to vote good, bad or indifferent.</p>
<p>This feedback also gave the organisers ideas about which talks were more popular and allowed them to switch rooms around accordingly.  This was a great idea and due to this fast feedback, sessions could be moved very quickly.  It was still down to the staff on the floor to make sure people got to the right room though!</p>
<h2 id="Summary">Summary</h2>
<p>Another great time at QCon London and it left me with lots of new people to catch up with in the community as well as much to think about.</p>
<p>QCon London is organized by <a href="http://www.trifork.com/" target="_blank">Trifork A/S</a> - a software development company situated in Aarhus, Denmark and <a href="http://www.infoq.com/" target="_blank">InfoQ</a> - Tracking change and innovation in the enterprise software development community.  The QCon London party was sponsored by <a href="http://www.atlassian.com/" target="_blank">Atlassian</a>, creators of JIRA, Confluence, Greenhopper and other tools for software developers.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank">@jr0cket</a></p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-LtMc0kokd3I/T2G5znRZehI/AAAAAAAAGLE/nOrl_zI_Sro/s1600/QCON_LONDON_2012_u_reg_now_QCON_font.png" class="img-thumbnail">


<p>Talks at technical conferences can give a very detailed insight into new innovations, they be a great source of inspiration and motivation.  Sometimes they even make you giggle.</p>
<p>At QCon London I got large doses of all of the above, thanks to <strong><a href="http://twitter.com/richhickey" target="_blank">Rich Hickey</a></strong>, <a href="http://twitter.com/tastapod" target="_blank"><strong>Dan North</strong></a> (DWZ Trading), <a href="http://twitter.com/hatofmonkeys" target="_blank"><strong>Colin Humpreys</strong></a> (Carrenza), <a href="http://twitter.com/ade_oshineye" target="_blank"><strong>Ade Oshineye</strong></a> (Google) and <a href="http://twitter.com/patrickdebois" target="_blank"><strong>Patrick Debois</strong></a> (father of DevOps, working with Atlassian).  Here is a summary of my experiences.</p>
]]></summary>
    
      <category term="qcon" scheme="http://jr0cket.github.io/hexo-themes-test/tags/qcon/"/>
    
      <category term="events" scheme="http://jr0cket.github.io/hexo-themes-test/categories/events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Why is DVCS great - Local commits]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2012/03/why-is-dvcs-great-local-commits.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2012/03/why-is-dvcs-great-local-commits.html/</id>
    <published>2012-03-14T21:35:00.000Z</published>
    <updated>2014-05-07T23:06:00.000Z</updated>
    <content type="html"><![CDATA[<p>With a centralised version control system (VCS) like Subversion or CVS you cant start making commits until you have created a repository on the server first.  This slows down the development process and can stop your creativity.  This and other reasons are why I now use a distributed approach using Git.</p>
<a id="more"></a>

<p>This limitation is a major pain if you are:</p>
<ul>
<li>Off-line</li>
<li>Not the administrator</li>
<li>Have forgotten how to do it and cant find the docs</li>
<li>Are the administrator and its so long ago you don’t remember your password</li>
<li>Some one else has to approve it<div class="separator" style="clear: both; text-align: center;"></li>
</ul>
<img src="http://4.bp.blogspot.com/-SAdRyX6xiDw/T2ENelQF52I/AAAAAAAAGKs/F1VH7LPiJEk/s1600/git-logo-vertical.png">


<p>With a distributed version control system (DVCS) you can create a local repository by simply using the command in your project folder:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>git init 
</pre></td></tr></table></figure>


<p>You can then commit changes to that local repository and run comparisons (diffs) for any subsequent changes to your code.  Instantly you can track every file in your project without any convoluted setup.  You also start to capture a detailed history of what you have been up to on the project and if you write good commit messages you know why.</p>
<p>This is a great way to just get on with the coding and letting your creativity flow.</p>
<img src="http://4.bp.blogspot.com/-orXHjBQnR_k/T2ENy3lP20I/AAAAAAAAGK0/2MfvKK9-CN0/s1600/source-code-history-visualisation--gource-project-banshee.png">


<p>Even though you can get on-demand SVN repositories, they still need several minutes to configure - and by the time you have spent setting it all up you have lost your train of thought as to what you were coding.</p>
<p>Using git and a local repository you can create versions from the first line of code (or test) and push your code to a shared space when there is something worth sharing.</p>
<p>Even sharing is relatively easy.&nbsp; You can create a git archive file of your code with all the version history and email it.&nbsp; More likely is you create a new repository on your GitHub account and add this repository as a remote repository (called origin by default) to your local repository.&nbsp; You can then push your changes to the on-line repo for the world to enjoy.</p>
<p>This is just one reason I like Git, Mercurial and Bazaar over Subversion and CVS.</p>
<p>P.s. The visual picture of the DVCS history is from a great little tool called <a href="http://code.google.com/p/gource/" target="_blank">gource</a>, check it out.</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<p>With a centralised version control system (VCS) like Subversion or CVS you cant start making commits until you have created a repository on the server first.  This slows down the development process and can stop your creativity.  This and other reasons are why I now use a distributed approach using Git.</p>
]]></summary>
    
      <category term="dvcs" scheme="http://jr0cket.github.io/hexo-themes-test/tags/dvcs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UK developers getting social with JIRA 5]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2012/02/uk-developers-getting-social-with-jira.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2012/02/uk-developers-getting-social-with-jira.html/</id>
    <published>2012-02-23T13:20:00.000Z</published>
    <updated>2014-05-14T22:19:31.000Z</updated>
    <content type="html"><![CDATA[<img src="http://www.ideachampions.com/weblogs/archives/2012/01/the_single_bigg.shtml" class="img-thumbnail">


<p>Many software development teams struggle to get the attention they need because of the way their communication is managed.  Having tools to enable the team to involve the right people at the right time makes a huge impact.</p>
<p>Having the right feedback can make the difference between a projects success and failure.  So its great to see the tools developers rely on are adopting these social tools in a meaningful way, without just recreating Facebook.  The end goal should be powerful tools that easily allow the whole team to reach the whole organisation collaborate effectively.</p>
<a id="more"></a>

<p>Some examples of useful social feature can be seen in the <a href="http://atlassian.com/jira5%20" target="_blank">release of JIRA 5</a>.  Teams from London and beyond got together recently to discus the benefits of these new features and share the challenges they face in their organisations.</p>
<p><a href="http://www.slideshare.net/JR0cket/jira-5-collaborative-platform" target="_blank">Presentation: JIRA 5 collaborative platform</a></p>
<p><a href="http://www.meetup.com/UK-Atlassian-Community/" target="_blank">UK Atlassian community meetup</a></p>
<h2 id="JIRA_5_goes_social"><a href="http://blogs.atlassian.com/2012/02/jira-5-goes-social/" target="_blank">JIRA 5 goes social</a></h2>
<p>As well as a visual workflow, integration with Confluence activity streams, JIRA provides collaboration through mentions and sharing issues.  If you comment on an issue and @mention someone, they are invited into the conversation.  Likewise you can share an issue with anyone that has an email address to make them aware of what you are working on.  These additions help you keep your workflows simple by allowing adhoc interactions on those issues than need additional feedback.</p>
<p><a href="http://www.youtube.com/watch?v=We2ydjpYkKk" target="_blank">JIRA 5 Overview video</a></p>
<p><a href="http://blogs.atlassian.com/2012/02/88-reasons-for-jira/" target="_blank">88 Reasons for JIRA - Seibert Media</a></p>
<p>Socialise with Atlassians and learn more about developer tools at <a href="http://www.atlassian.com/company/about/events/unite/2012#london-march12" target="_blank">Atlassian Unite</a> and <a href="http://www.atlassian.com/company/about/events/atlascampeu/2012" target="_blank">AtlasCamp Europe</a> events in May 2012.</p>
<h2 id="Building_on_JIRA">Building on JIRA</h2>
<p>JIRA has some great tools built on top of it, as can be seen in an ever growing <a href="https://plugins.atlassian.com/" target="_blank">marketplace for open source and commercial plugins</a>.</p>
<img src="http://4.bp.blogspot.com/-wc8ZM8MeJLQ/T0JCUoHPp6I/AAAAAAAAElQ/2D_CPYJOcg8/s1600/atlassian-developers-logo-rounded.png" class="img-topic">


<p>If you are a developer looking to <a href="https://developer.atlassian.com/" target="_blank">bootstrap your own development</a>, why not download the <a href="https://developer.atlassian.com/" target="_blank">Atlassian software development kit (SDK)</a> and use it to create your own tools around JIRA or Confluence?</p>
<p>The developer experience with the <a href="https://developer.atlassian.com/display/DOCS/Atlassian+Plugin+SDK+Documentation" target="_blank">Atlassian SDK</a> has evolved and together with a new set of RESTful API’s JIRA  development has become stable, future proof and easy to get start  with platform. </p>
<p>For some inspiration of what you can achieve, take a look at this <a href="http://www.minecraft.net/" target="_blank">doom-like video</a> showing off the <a href="https://plugins.atlassian.com/plugin/details/1175389" target="_blank">Minecraft plugin</a>, created within 24 hours as part of an Atlassian FedEx day.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/hMRmOIGaFnw" frameborder="0" allowfullscreen></iframe></div>


<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank">@jr0cket</a></p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://www.ideachampions.com/weblogs/archives/2012/01/the_single_bigg.shtml" class="img-thumbnail">


<p>Many software development teams struggle to get the attention they need because of the way their communication is managed.  Having tools to enable the team to involve the right people at the right time makes a huge impact.</p>
<p>Having the right feedback can make the difference between a projects success and failure.  So its great to see the tools developers rely on are adopting these social tools in a meaningful way, without just recreating Facebook.  The end goal should be powerful tools that easily allow the whole team to reach the whole organisation collaborate effectively.</p>
]]></summary>
    
      <category term="atlassian" scheme="http://jr0cket.github.io/hexo-themes-test/tags/atlassian/"/>
    
      <category term="collaboration" scheme="http://jr0cket.github.io/hexo-themes-test/tags/collaboration/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-tools/"/>
    
  </entry>
  
</feed>
