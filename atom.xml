<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[jr0cket]]></title>
  <subtitle><![CDATA[community developer]]></subtitle>
  <link href="/hexo-themes-test/atom.xml" rel="self"/>
  <link href="http://jr0cket.github.io/hexo-themes-test/"/>
  <updated>2014-05-21T23:40:25.150Z</updated>
  <id>http://jr0cket.github.io/hexo-themes-test/</id>
  
  <author>
    <name><![CDATA[John Stevenson]]></name>
    <email><![CDATA[john@jr0cket.co.uk]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Migrating articles to Hexo from blogger.com]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/04/migrating-articles-to-hexo-from-bloggercom/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/04/migrating-articles-to-hexo-from-bloggercom/</id>
    <published>2014-04-20T16:27:21.000Z</published>
    <updated>2014-04-20T19:27:40.000Z</updated>
    <content type="html"><![CDATA[<p>Writing articles with Blogger.com had become slow and a little frustrating, so I am moving to Hexo.io so I can write articles anywhere I have a text editor (usually Emacs).  Hexo also creates a responsive and fast website, so when people want to read the articles (including myself when I have forgotten something) then they can do so quickly and across multiple devices.</p>
<p>So how do I get all of that content I created out of Blogger and into Hexo.  Luckily Hexo has a migration tool to make things easier</p>
<a id="more"></a>

<h2 id="Hexo_migration_package">Hexo migration package</h2>
<p>Hexo has a seperate tool called <code>hexo-migrator</code> to pull in content from either RSS, Wordpress [erm…].  This can be installed as an npm package just like any other: </p>
<pre><code>npm install hexo<span class="attribute">-migrator</span> <span class="attribute">-g</span>
</code></pre><p>Unforntunatley the npm packaged version of hexo-migrator failed when I tried to import from blogger, regardless of whether I used the blog URL or by downloading the XML file generated by the RSS feed.  The error I got was already reported as <a href="https://github.com/hexojs/hexo-migrator-rss/issues" target="_blank">an issue on the hexo-migrator Github site</a> and a fix already applied.  This fix had not yet been packaged up as a new npm version at the time of writing.</p>
<h3 id="Hexo_migration_from_Github">Hexo migration from Github</h3>
<p>As a fix for the Blogger import problem exists in the Github repository, I installed the hexo migration tool directly from there.  Node package manager allows you to install directly from a Github repository (handy when someone has not patch an npm package yet).  So to install the latest version of hexo-migrator, I used the command:</p>
<pre><code>npm <span class="keyword">install</span> <span class="string">"git+https://github.com/hexojs/hexo-migrator-rss.git"</span>
</code></pre><p>I used the https address for the Github repository as I dont have SSH access.  However, to work you also have to put <strong>git+</strong> infront of the repository address for npm to work.  I am assuming <strong>git+</strong> tells npm that we are pulling from a github repository rather than a regular file system.</p>
<h2 id="Running_the_migration">Running the migration</h2>
<p>The migration to is very simple to use, simply run <code>hexo migrate</code> specifiying the type of input, <code>rss</code> and the location of your content.  In my case I just pulled the Blogger content directly from the website, although you could download the XML code generated by the RSS feed links and save them as a file for importing. following command and point it at the RSS feed of your website.  </p>
<p>I created a new hexo site specifically to import blogger posts, so I would not interfeir whith the posts that I had already written using Hexo.  So if everything went wrong I could easily delete the new site and still have my new posts running. </p>
<p>To import content directly from my blogger site:</p>
<pre><code>hexo init hexo<span class="attribute">-blogger</span><span class="attribute">-import</span>
cd hexo<span class="attribute">-blogger</span><span class="attribute">-import</span>
hexo migrate rss http:<span class="comment">//blog.jr0cket.co.uk/default?alt=rss</span>
</code></pre><p>It worked, brilliant.  I have a whole bunch of migrated articles in <strong>source/_posts/</strong> folder.</p>
<h2 id="Oh_not_everything_is_there">Oh not everything is there</h2>
<p>Whilst the hexo migration tool successfully grabbed articles from my blog, it only got the first 25 posts.  I have about 200 posts so my excitement was short lived.  It turns out that this is not a problem with the hexo migration tool, but a problem with blogger.<br>w<br>I clicked the RSS link on the blogger website and looking at the XML (a horible thing to do) I saw that it was only giving me the first 25 posts.  </p>
<h2 id="Migration_by_labels">Migration by labels</h2>
<p>Checking on the sites I syndicate some of my blogs too, I noticed a different form for the RSS web address (URL).  For <a href="">Planet Clojure</a> and <a href="">Planet Emacsen</a> I only share posts with an approprate label (i.e. PlanetClojure, PlanetEmacsen).  These RSS syndication sites were given the following RSS URL’s</p>
<pre><code><span class="label">http:</span>//blog<span class="preprocessor">.jr</span>0cket<span class="preprocessor">.co</span><span class="preprocessor">.uk</span>/feeds/posts/default/-/PlanetClojure
<span class="label">http:</span>//blog<span class="preprocessor">.jr</span>0cket<span class="preprocessor">.co</span><span class="preprocessor">.uk</span>/feeds/posts/default/-/PlanetEmacsen
</code></pre><p>So by using the different labels (Blogger calls tags labels) I could pull out more posts from blogger, even though each request would only return a maximum of 25 posts.  So instead of the default rss feed used in the first hexo migration, I used the following commands:</p>
<pre><code>hexo migrate rss http://blog<span class="preprocessor">.jr</span>0cket<span class="preprocessor">.co</span><span class="preprocessor">.uk</span>/-/PlanetClojure
hexo migrate rss http://blog<span class="preprocessor">.jr</span>0cket<span class="preprocessor">.co</span><span class="preprocessor">.uk</span>/-/PlanetEmacsen
hexo migrate rss http://blog<span class="preprocessor">.jr</span>0cket<span class="preprocessor">.co</span><span class="preprocessor">.uk</span>/-/Ubuntu
</code></pre><p>So I carried on for each blogger label I had defined on my post until I thought I had most of the posts migrated.  Not perfect, but until I know how to get blogger to give me more than 25 posts from its RSS feed that will have to do.</p>
<h2 id="Testing_the_migrated_content">Testing the migrated content</h2>
<p>If you are already running <code>hexo server</code> for the site you have migrated content to, then you will see the results as soon as you refresh your browser.  Hexo server will pull in any changes it find immediately.  If you are not running the server, you can start by using the following command in the root of your hexo project:</p>
<pre><code>hexo <span class="keyword">server</span> 
</code></pre><p>Now open your browser at <a href="http://localhost:4000" target="_blank">http://localhost:4000</a> and see the results of the migration.</p>
<p>Each of the posts I migrated is in my blog, although the tags need tidying up (I wasnt very consistent in blogger).  The great thing is that all the posts are in date order, as the published date of each blog was put into each markdown file generated by the migration.</p>
<h2 id="Migration_isnt_perfect">Migration isnt perfect</h2>
<p>Whist my articles were copied over to markdown files okay, some of my post brought along with them additional styles (<div>, class, &nspc; etc) and other artefacts that messed up the styles that Hexo applies.  </p>
<p>Some of the styling for headers and subheaders is using the markdown notation for bold, rather than heading. so this will not produce the desired HTML content.  Headers in particular are a good thing to correct, as search engines do base some of their relevance on those headers.</p>
<p>With some of the migrated posts I have to open them up in an editor and delete any offending styling that came with them.  To tell which ones to open, I use the Unix command <code>grep</code> to find which of my posts have <strong>&lt;div</strong> in their text:</p>
<pre><code>grep <span class="string">"&lt;div"</span> <span class="built_in">source</span>/_posts/* 
</code></pre><p>It turns out that most of my posts do, so if I want to see which ones I really need to fix then it probably easiest to look at the locally running website created by <code>hexo server</code>.  So I opened my browser at <a href="http://localhost:4000" target="_blank">http://localhost:4000</a> and had a look at the posts to see which ones needed the most attention.</p>
<p>My basic strategy was to work from the most recent blog post, working backwards until I didnt care about any older posts.</p>
<h3 id="Adding_Summary_breaks">Adding Summary breaks</h3>
<p>A nice feature of Hexo is that you can define how much of a summary view you want to have with each article.  The summary view is the main view of the blog and shows the title and the first part of your article.</p>
<p>You define where the summary view ends by using the following syntax in the article markdown file:</p>
<pre><code><span class="comment">&lt;!-- more --&gt;</span>
</code></pre><p>This is something you need to add manually to each article [TODO: check if there is a tool to do this], so if you have a lot of posts it may take a little while.  However it does help your audience (and yourself) scan through your content quickly.  </p>
<p>If you have a lot of older posts you are importing, then its not going to be a big problem as they will be many pages into your blog summary view. </p>
<h3 id="Images_still_on_Blogger">Images still on Blogger</h3>
<p>The migration is not yet finished, even after I tidy up my posts.  The imags the post uses are mostly those images on Blogger.  Again there is another hexo tool called <a href="https://github.com/akfish/hexo-migrator-image" target="_blank">hexo-migrator-image</a> which will copy all the remote images to your local filesystem and fix your links (hopefully).</p>
<p>Install hexo-migrator-image using the following command:</p>
<pre><code>npm install hexo<span class="attribute">-migrator</span><span class="attribute">-image</span>
</code></pre><p>Then run the hexo-migrator-image command and wait for all the images to download:</p>
<pre><code>hexo 
</code></pre><h2 id="Github_is_not_great_for_images">Github is not great for images</h2>
<p>There is not a lot of advantage putting your images in Github, except that they are right there where the rest of your website is.  However, using a good image repository that acts like a Content Delivery Network (CDN) should give you the same amount of speed and not waste space in the Github repository.</p>
<p>By keeping images out it also makes your Git repository quicker to fork and clone</p>
<h2 id="Final_migration_check">Final migration check</h2>
<p><a href="https://github.com/sergiolepore/hexo-broken-link-checker" target="_blank">hexo-broken-link-checker</a> - Detects links that don’t work, missing images and redirects.</p>
]]></content>
    <summary type="html"><![CDATA[<p>Writing articles with Blogger.com had become slow and a little frustrating, so I am moving to Hexo.io so I can write articles anywhere I have a text editor (usually Emacs).  Hexo also creates a responsive and fast website, so when people want to read the articles (including myself when I have forgotten something) then they can do so quickly and across multiple devices.</p>
<p>So how do I get all of that content I created out of Blogger and into Hexo.  Luckily Hexo has a migration tool to make things easier</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="migration" scheme="http://jr0cket.github.io/hexo-themes-test/tags/migration/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo theme tweaks - showing articles as titles only]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/04/hexo-theme-tweaks---showing-articles-as-titles-only/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/04/hexo-theme-tweaks---showing-articles-as-titles-only/</id>
    <published>2014-04-16T08:59:33.000Z</published>
    <updated>2014-04-16T22:56:56.000Z</updated>
    <content type="html"><![CDATA[<p>Hexo displays posts in a summary format by default, showing the title and content of the article up to the point where the <code>more</code> marker is used:</p>
<pre><code><span class="comment">&lt;!-- more --&gt;</span>
</code></pre><p>I like this summary format for the main page as its where people tend to browse a little more and usually want a little more information to help them decide if they want to read the whole article.  </p>
<p>[TODO: Insert picture of summary layout]</p>
<p>However when someone selects the archive, category or tags section, they are most likely looking for something specific and so just showing the titles of the posts helps them scan the articles quickly.</p>
<p>So this article we will cover how to modify the default Hexo theme, landscape, to show summar and title only views.</p>
<a id="more"></a>

<h2 id="Understanding_the_layout">Understanding the layout</h2>
<p>Layout of the page is defined mainly in <a href="https://github.com/visionmedia/ejs" target="_blank">EJS</a> format and then imported via the <code>theme/landscape/source/css/style.styl</code> file that is used to pull together a single <code>style.css</code> file for the whole site (once the site is generated).</p>
<p>All pages use the default <code>index.ejs</code> [is it index or layout - check the hexo docs] as a base template, over-riding it where desired.  For the front page of the blog this is fine.</p>
<p>The archive, categories and tag pages all use the same code, however these are the files we are going to change</p>
<pre><code>theme/landscape/layouts/_partial/archive<span class="preprocessor">.ejs</span>
theme/landscape/layouts/_partial/category<span class="preprocessor">.ejs</span>
theme/landscape/layouts/_partial/tag<span class="preprocessor">.ejs</span>
</code></pre><p>Lets first find out what changes need to be made and in what file.</p>
<h2 id="Using_Chrome_developer_tools">Using Chrome developer tools</h2>
<p>You can use the Chrome developer tools to find out the secion of CSS that controls the displaying of the summary part of the article.</p>
<p>It turns out this summary part of the content is managed by a section called <code>article-entry</code>.  This is included in the file <code>theme/landscape/layouts/_partial/article.ejs</code>:</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"article-entry"</span> <span class="attribute">itemprop</span>=<span class="value">"articleBody"</span>&gt;</span>
  <span class="vbscript">&lt;% <span class="keyword">if</span> (post.excerpt &amp;&amp; index){ %&gt;</span>
    <span class="vbscript">&lt;%- post.excerpt %&gt;</span>
    <span class="vbscript">&lt;% <span class="keyword">if</span> (theme.excerpt_link){ %&gt;</span>
      <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"article-more-link"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"&lt;%- config.root %&gt;&lt;%- post.path %&gt;#more"</span>&gt;</span><span class="vbscript">&lt;%= theme.excerpt_link %&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="vbscript">&lt;% } %&gt;</span>
</code></pre><p>I tested that this was the code rendering the article summary using the Chrome developer tools.  I right-clicked on the first line of the code, the opening <strong>div</strong> tag, and selected <code>delete node</code> </p>
<img src="/hexo-themes-test/images/hexo-theme-tweak-devtools-delete-node.png">



<h2 id="Making_the_changes_to_the_theme">Making the changes to the theme</h2>
<p>There may be better approaches than I have taken, however mine is fairly straight formward.  I simply take a copy of the archive.ejs file and called it archive-titles.ejs.</p>
<p>I then remove the above code completely from the <code>articles-titles.ejs</code> file and call that file instead from the <code>archive.ejs</code>, <code>category.ejs</code> and <code>tag.ejs</code> files.</p>
<p>So the archive, catagory and tag files are changed calling the archive.ejs:</p>
<pre><code>&lt;%- <span class="keyword">partial</span>(<span class="string">'_partial/archive'</span>, {pagination: <span class="number">2</span>, index: <span class="keyword">true</span>}) %&gt;
</code></pre><p>and now call <code>archive-titles.ejs</code>:</p>
<pre><code>&lt;<span class="string">%- partial('_partial/archive-</span>titles<span class="string">', {pagination: config.archive, index: true}) %&gt;</span>
</code></pre><p>With <code>hexo server</code> running these changes are picked up straight away, so we can easily see if the changes worked as expected</p>
<p>[TODO: image of changed archive]</p>
]]></content>
    <summary type="html"><![CDATA[<p>Hexo displays posts in a summary format by default, showing the title and content of the article up to the point where the <code>more</code> marker is used:</p>
<pre><code><span class="comment">&lt;!-- more --&gt;</span>
</code></pre><p>I like this summary format for the main page as its where people tend to browse a little more and usually want a little more information to help them decide if they want to read the whole article.  </p>
<p>[TODO: Insert picture of summary layout]</p>
<p>However when someone selects the archive, category or tags section, they are most likely looking for something specific and so just showing the titles of the posts helps them scan the articles quickly.</p>
<p>So this article we will cover how to modify the default Hexo theme, landscape, to show summar and title only views.</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="themes" scheme="http://jr0cket.github.io/hexo-themes-test/tags/themes/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Getting started with Hexo - a modern static site generator]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/04/getting-started-with-hexo---a-modern-static-site-generator/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/04/getting-started-with-hexo---a-modern-static-site-generator/</id>
    <published>2014-04-12T14:13:19.000Z</published>
    <updated>2014-04-15T19:09:18.000Z</updated>
    <content type="html"><![CDATA[<p>Hexo is a modern static website generator &amp; bloging platform written in Node.js. This is a quick guide to get going:</p>
<a id="more"></a>

<h2 id="Install_Node-js">Install Node.js</h2>
<p>If you havent already got node, go to <a href="http://nodejs.org/" target="_blank">http://nodejs.org/</a> and follow the instructions.  My own preference is to install node into a folder called <strong>app</strong> in my home folder.</p>
<h2 id="Install_Emacs_(optional)">Install Emacs (optional)</h2>
<p>This is not a requirement for Hexo. although Emacs and Emacs Live gives a fantastic experience when writing markdown content.  Emacs Live syntactically highlights your markdown content, so headings, links, bold and italic styles are shown in as you type your content.  Italic style content even displays in italic.</p>
<h2 id="Install_Hexo">Install Hexo</h2>
<p>There is really good documentation on the <a href="http://hexo.io" target="_blank">hexo.io</a> website, althought all you need to do to install is:</p>
<pre><code>npm <span class="keyword">install</span> hexo -g
</code></pre><h2 id="Create_a_Hexo_projects">Create a Hexo projects</h2>
<p>Create a new hexo project, I usually do this in a folder called projects in my home folder:</p>
<pre><code>hexo init <span class="keyword">my</span>-project-<span class="property">name</span>
cd <span class="keyword">my</span>-project-<span class="property">name</span>
</code></pre><p>This creates a new hexo project in a folder called <strong>my-project-name</strong>, so use what ever name you wish here.</p>
<h2 id="Configure_Hexo_to_your_will">Configure Hexo to your will</h2>
<p>[TODO] - just add the basics and come back for deployment.</p>
<h2 id="Version_your_Hexo_project">Version your Hexo project</h2>
<p>If you are deploying your website to Github pages then the generated content is versioned by Github.  However, the markdown content for your websites and any configuration changes you make will not be versioned.</p>
<p>If you are going to use this site for any important content, I’d recommend putting the Hexo project into a github repository (or similar service).  This will also make it easier to migrate your content to an alternative tool than Hexo.</p>
<h2 id="Running_a_local_Hexo_server">Running a local Hexo server</h2>
<p>Although you wont have much content at this stage, you can still see what the website looks like by running Hexo server locally:</p>
<pre><code>hexo <span class="keyword">server</span> 
</code></pre><p>By default this runs a node application on port 4000, so open your browser at: <a href="http://localhost:4000/" target="_blank">http://localhost:4000/</a></p>
<h2 id="Adding_blog_posts_to_your_Hexo_projects">Adding blog posts to your Hexo projects</h2>
<p>The easiest way to add a new blog post is to let Hexo generate it for you from its template, this will ensure your post picks up the current them and any blog specific styling:</p>
<pre><code>hexo <span class="keyword">new</span> <span class="string">"name of my blog post with full on SEO"</span>
</code></pre><p>Hexo will return with the full path to the file it has created for you.  Edit this file in your favourite editor (surely this is Emacs).  Becareful to add your content after the <strong>frontmatter</strong>, this is the first few lines that define the title, date, style and tags used for the post.  Add your markdown </p>
<h2 id="Adding_images_to_your_posts">Adding images to your posts</h2>
<p>If you are going to use a great many images on your website (1,000’s), you may be better off keeping those images in some kind of image service (Google+ photos) or content delivery network(CDN).</p>
<p>Using a CDN will incure a small cost, but unless are using terrabytes of bandwidth to serve up your images this will only a few dollars a year.  Examples of CDNs <a href="http://aws.amazon.com/cloudfront/" target="_blank">Amazon CloudFront</a>, <a href="http://www.akamai.com/" target="_blank">Akamai Technologies</a>, <a href="http://www.edgecast.com/" target="_blank">EdgeCast</a>, or <a href="http://www.level3.com/" target="_blank">level3</a>.  Alternatively you could use an <a href="http://aws.amazon.com/s3/" target="_blank">Amazon S3 bucket</a>.</p>
]]></content>
    <summary type="html"><![CDATA[<p>Hexo is a modern static website generator &amp; bloging platform written in Node.js. This is a quick guide to get going:</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo theme building with Chrome developer tools]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/04/hexo-theme-building-with-chrome-developer-tools/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/04/hexo-theme-building-with-chrome-developer-tools/</id>
    <published>2014-04-10T18:27:33.000Z</published>
    <updated>2014-04-10T18:49:14.000Z</updated>
    <content type="html"><![CDATA[<p>I’m using Hexo as my blogging platform and wanted to customise the theme, which is broken down into many different parts to make it easier to manage and customise.  In order to understand what the different parts did I fired up Google Chrome deverloper tools to quickly explore the styles of Hexo’s default theme.</p>
<a id="more"></a>

<h2 id="Google_Chrome_browser_developer_tools">Google Chrome browser developer tools</h2>
<p>With Chrome developer tools you can explore the source code (HTML, CSS and JavaScript) of any web page and see which part of the page each line of code is responsible for.  This is a great way for quickly seeing which CSS classes and ID’s are used to control styles, as well as seeing which block of JavaScript is providng dynamic behaviour on the page. </p>
<h3 id="Running_the_Chrome_developer_tools">Running the Chrome developer tools</h3>
<p>Right-click and select “Inspect Element” on any page you are browsing to bring up the developer tools console.  You can navigate through </p>
]]></content>
    <summary type="html"><![CDATA[<p>I’m using Hexo as my blogging platform and wanted to customise the theme, which is broken down into many different parts to make it easier to manage and customise.  In order to understand what the different parts did I fired up Google Chrome deverloper tools to quickly explore the styles of Hexo’s default theme.</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="themes" scheme="http://jr0cket.github.io/hexo-themes-test/tags/themes/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo - why I prefer it over Octopress]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/04/hexo---why-i-prefer-it-over-octopress/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/04/hexo---why-i-prefer-it-over-octopress/</id>
    <published>2014-04-02T12:55:29.000Z</published>
    <updated>2014-04-11T16:43:54.000Z</updated>
    <content type="html"><![CDATA[<p>There are several static website &amp; blogging platforms available, so why did I choose <a href="http://hexo.io" target="_blank">Hexo</a> over things like Jekyll, Octopress, DocPad or writing my own?  Let me elaborate.</p>
<a id="more"></a>

<h2 id="I_write_more_JavaScript_than_Ruby">I write more JavaScript than Ruby</h2>
<p>Ruby is a great language but one I rarely use it for development anymore.  </p>
<p>The languages I use the most are Clojure and JavaScript, so ideally the tools I use should be written in one of those languages.  Why, well I already have the environment set up to support tools in those languages and if I need to extend the tool then I have the skills to do so relatively quickly.</p>
<h2 id="Ruby_is_a_pain_to_install">Ruby is a pain to install</h2>
<p>I have had a lot of problems with Ruby on MacOSX and Ubuntu, with only compilation from source code being successful.  This takes a bit of time and requires extra packages to be installed I otherwise wouldnt need.  RVM did strange things to my bash resource files last time I tried it out and the install failed on both MacOSX and Ubuntu.</p>
<h2 id="New_is_often_Better">New is often Better</h2>
<p>Hexo is relatively new and yet has learnt a lot from Octopres.  So has the advantage of not baking in any technical debt or having language specific quirks.  One example of why I like Hexo better is very simple.  To create a new file for a blog post in Hexo you use the command:</p>
<pre><code>hexo <span class="keyword">new</span> <span class="string">"title of blog post"</span>
</code></pre><p>With Octopress the command is similar, but just a bit more trickyer to remember and to type:</p>
<pre><code>rake new_post[<span class="string">"Title of blog post"</span>]
</code></pre><p>The differeces are relatively small, but in terms of usabiltity I feel a big difference especially as I write several blog posts a week. </p>
<p>Rather than using the command <code>octopress</code> you have to remember that you are using the command <code>rake</code>.  This is fine if you are used to Ruby every day, but I am not.  The form of the command also makes it difficult to rember (eg, that you have to use brackets and which ones were they again) and its actually harder to type, especially for a touch typist.</p>
<h2 id="Great_feedback_process">Great feedback process</h2>
<p>If you run the Hexo server then any changes you make, either to the content of your site or the design (CSS, theme, etc) is automatically picked up and rendered.  So if you are curious about how your changes look, then you just need to point your browser to the hexo server, usually running on port 4000.</p>
<p>So to run the hexo server you use the command:</p>
<pre><code>hexo <span class="keyword">server</span>
</code></pre><p>Then to see the results you open the link <a href="http://localhost:4000/" target="_blank">http://localhost:4000/</a></p>
<p>When you make a change you get output in the console that is currently running the Hexo server, for example</p>
<img src="/images/hexo-server-example-output-on-changes.png">


<p>This allows me to work locally on my laptop and see the results instantaineously.  Only when I am ready to share my changes with the world do I need to generate the static content and push it to Github pages.</p>
<p>This simple process should support me event when I have hundereds of blog posts and pages of content.  I wont have to wait for the generation of the site (although Hexo is pretty quick anyway, generating the site as it is in about 5 seconds).</p>
<h2 id="Responsive_community">Responsive community</h2>
<p>There is a healthy community around Hexo.  There are already lots of articles about configuring Hexo and creating your own themes.  I have found the project itself very responsive to issues and I even had a couple of pull requests accepted.</p>
<h2 id="Multi-threaded_processing">Multi-threaded processing</h2>
<p>As I plan to use one platform for all my static web content, blogging, tutorials, slides and technology micro-sites, then I need something that works pretty quick.</p>
<h2 id="Customisation">Customisation</h2>
<p>I also want to be able to put my own look onto my websites.  Most tools of this kind provide some nice sites, but I dont want something that just looks exactly like every other site out there.</p>
<p>However, I dont want to spend a long time configuring themes, so it should be really easy to tweak exiting themes.  </p>
<p>So far I have found Hexo easier to understand the theme structure from reading the default landscape theme.  Although I dont believe there is a vast difference between Hexo and Octopress themes.  It seems a few</p>
]]></content>
    <summary type="html"><![CDATA[<p>There are several static website &amp; blogging platforms available, so why did I choose <a href="http://hexo.io" target="_blank">Hexo</a> over things like Jekyll, Octopress, DocPad or writing my own?  Let me elaborate.</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="octopress" scheme="http://jr0cket.github.io/hexo-themes-test/tags/octopress/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo Static site generator - modifying exiting themes]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/04/hexo-static-site-generator---modifying-exiting-themes/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/04/hexo-static-site-generator---modifying-exiting-themes/</id>
    <published>2014-04-02T06:45:21.000Z</published>
    <updated>2014-04-09T17:12:03.000Z</updated>
    <content type="html"><![CDATA[<p>Hexo is a great way to create a blog or static website and comes with some responsive and great looking themes.  However, so your site doesnt look like everyone elses, you may want to customise the look and the easiest way is to modify an existing theme.</p>
<a id="more"></a>

<h2 id="Landscape_-_the_default_theme">Landscape - the default theme</h2>
<p>There are a wide range of themes to choose from, althought Landscape is one of the newest and is also the default so you dont need to instal it.</p>
<h3 id="Location_of_themes">Location of themes</h3>
<p>In the themes folder of your hexo project </p>
<pre><code>hexo init 
</code></pre><h2 id="Making_your_changes_work">Making your changes work</h2>
<p>If you have already generated or deployed your site with a theme and then you modify it. it seems hexo does not pick up those changes.  First you need to run the command</p>
<pre><code>hexo clean 
</code></pre><p>This will remove the cache and the .deploy folders.  So now when you do</p>
<pre><code>hexo <span class="keyword">generate</span>
</code></pre><p>all new files are added to public.</p>
]]></content>
    <summary type="html"><![CDATA[<p>Hexo is a great way to create a blog or static website and comes with some responsive and great looking themes.  However, so your site doesnt look like everyone elses, you may want to customise the look and the easiest way is to modify an existing theme.</p>
]]></summary>
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="themes" scheme="http://jr0cket.github.io/hexo-themes-test/tags/themes/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Testing Hexo themes]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/testing-hexo-themes/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/testing-hexo-themes/</id>
    <published>2014-03-29T01:02:50.000Z</published>
    <updated>2014-04-09T17:11:21.000Z</updated>
    <content type="html"><![CDATA[<p>Lets see how different themes look like when in Hexo.  This is just some basic content to help me see what they look like with content.</p>
<h2 id="Trying_out_code">Trying out code</h2>
<p>I wonder what code looks like when you look at it in this theme:</p>
<pre><code><span class="list">(<span class="title"><span class="built_in">defn</span></span> clojure-function <span class="collection">[paramter]</span>
  <span class="list">(<span class="title"><span class="built_in">str</span></span> <span class="string">"Lets do"</span> <span class="string">" "</span> <span class="string">"something simple"</span> <span class="string">", "</span> <span class="string">"using Clojure"</span>)</span>)</span>
</code></pre><p>That should be a simple Clojure example using markdown indentation.  Lets try using a codeblock to see if there is any difference.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>(<span class="function"><span class="keyword">def</span> <span class="title">authors</span> [:</span>name <span class="string">"John Stevenson"</span>])

(defn show-author [authors]
  (str authors))
  
(show-author authors)￿<span class="number">1</span>￿
</pre></td></tr></table></figure>
]]></content>
    
    
      <category term="hexo" scheme="http://jr0cket.github.io/hexo-themes-test/tags/hexo/"/>
    
      <category term="themes" scheme="http://jr0cket.github.io/hexo-themes-test/tags/themes/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/hello-world/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/hello-world/</id>
    <published>2014-03-29T00:28:16.000Z</published>
    <updated>2014-03-29T00:28:16.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://zespia.tw/hexo" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://zespia.tw/hexo/docs" target="_blank">documentation</a> to learn how to use.</p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[Heroku deploy - a lot happens in 1 minute]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/heroku-deploy-a-lot-happens-in-1-minute/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/heroku-deploy-a-lot-happens-in-1-minute/</id>
    <published>2014-03-26T19:36:33.000Z</published>
    <updated>2014-04-10T13:26:12.000Z</updated>
    <content type="html"><![CDATA[<p>As technology progresses then taking a few minutes to deploy your app can seem like a long time, but when you consider everything Heroku is doing during that time then its quite amazing</p>
<a id="more"></a>

<h2 id="Provision_server_resources_&amp;_managing_traffic">Provision server resources &amp; managing traffic</h2>
<p>Heroku creates a new “server” each time you deploy, so that the currently live application can still handle reuests until the new version is ready.  Rather than a whole bloated server, Heroku actually creates a new Linux container with a running OS.  This Linux container usually takes a second or less to create with a running operating system.</p>
<h2 id="The_environment_is_then_established">The environment is then established</h2>
<p>Every language you use to write your application needs some kind of runtime, eg. if you need Java you need the JVM, Ruby apps need a particular version of Ruby, Javascript probably needs nodejs and PHP needs a webserver.  As part of the Heroku buildpack used during the deployment, the relevant libraries and platforms are brought in.  Unless you change the configuration of your build or the buildfile you use, Heroku will always bring in the same version of the environment you need to run your app each time you deploy.</p>
<h2 id="Compilation_of_code">Compilation of code</h2>
<p>If your app is compiled, then the build process is run so you have a deployment made from your standard production build.</p>
<p>Environment variables are set for the applications and any services (caching, logging, monitoring, etc) or datastores (postgres, redis, mongodb) are therefore automatically connected too.</p>
<p>All the relevant processes are run and scalled (can you scale your app to a certain level when you deploy)</p>
]]></content>
    <summary type="html"><![CDATA[<p>As technology progresses then taking a few minutes to deploy your app can seem like a long time, but when you consider everything Heroku is doing during that time then its quite amazing</p>
]]></summary>
    
      <category term="heroku" scheme="http://jr0cket.github.io/hexo-themes-test/tags/heroku/"/>
    
      <category term="cloud" scheme="http://jr0cket.github.io/hexo-themes-test/categories/cloud/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Emacs Org-mode for all your content]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/emacs-org-mode-for-all-your-content/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/emacs-org-mode-for-all-your-content/</id>
    <published>2014-03-16T12:35:37.000Z</published>
    <updated>2014-04-09T17:10:37.000Z</updated>
    <content type="html"><![CDATA[<p>Emacs is a tool that just keeps on giving and Org-mode is a fantantastic way to create text based content and manage it effectively.  Unfortunately, outside of Emacs nothing uses Org-mode formating.  However, as Org-mode is just a text format then it can be easily converted by Emacs into other things.  I’ll show you how to create other formats from Org-mode, so you can confidently write everything in Org-mode and generate any other formats you need.</p>
<p><a id="more"></a><br>[TODO: a bit too wordy]</p>
<blockquote><p>  In previous articles I have covered generating presentations from Org-mode using Reveal.js.</p>
</blockquote>


<h2 id="Why_write_in_Org-mode">Why write in Org-mode</h2>
<p>If you are writing anything more than a few paragraphs of text then it gets quite easy to become lost in your own writing.  Having to scroll around to see what you covered earlier can slow down your creative process.</p>
<p>With Org-mode you can structure you content easily, as your “topics or table of contents” are your structure.  Every heading and sub-heading can fold away the content underneath it, unfolding the only the parts of your writing you want to see.</p>
<p>Another useful aspect of Org-mode is that it hides the link part of the URL, so you only see the text part of the link.  This helps keep your text easy to read.</p>
<p>As with many other languages supported by Emacs you also get colour highlighting for different styles along with spell checking and suggested words as you type.</p>
<p>[TODO: Insert picture of Org-mode - or maybe even a video]</p>
<h2 id="Reasons_I_need_to_use_Markdown">Reasons I need to use Markdown</h2>
<p>I use markdown for my Jekyll based blog and website and as these are relativley small I often just write them directly in Markdown.  However, if its a series of posts on the same topic then I can easily structure that series using Org-mode and generate the markdown content when I am ready to add it to my blog.</p>
<p>I also need to use markdown for the self-publishing book website, <a href="LeanPub">https://leanpub.com/</a>.  I write the whole book in Org-mode, again so I can structure it sensibly and jump to specific parts of the content easily.  I can also see topics (headings) I have written about in each chapter of the book very easily by open and closing sections of the Org-mode file.</p>
<h2 id="Generating_Markdown_from_Org-mode">Generating Markdown from Org-mode</h2>
<p>In Emacs, open your Org-mode file (or switch to the buffer containing it).  Then export a copy of then content into markdown with one of the following commands</p>
<pre><code>M<span class="attribute">-x</span> org<span class="attribute">-md</span><span class="attribute">-export</span><span class="attribute">-to</span><span class="attribute">-markdown</span>
C<span class="attribute">-c</span> C<span class="attribute">-e</span> m m
</code></pre><p>Exports the current Org-mode file as a new text file of the same name but with the .md extension rather than .org.  </p>
<p>When you export again, the .md file will be overwritten without warning, so if you want to make changes you edit the Org-mode file and re-generate the markdown file.</p>
<p>If you want to see the markdown file as soon as it is created, use the following command to open it in Emacs:</p>
<pre><code><span class="keyword">C</span>-c <span class="keyword">C</span>-e m o
</code></pre><p>If you do not wish to create a file from the export, the following command generated markdown and places it inside a tempory Emacs buffer:</p>
<pre><code>M<span class="attribute">-x</span> org<span class="attribute">-md</span><span class="attribute">-export</span><span class="attribute">-as</span><span class="attribute">-markdown</span>
C<span class="attribute">-c</span> C<span class="attribute">-e</span> m M 
</code></pre><p>[TODO: what does this command do?]<br>    M-x org-md-convert-region-to-markdown</p>
<p>The Markdown export is build on top of the <a href="HTML export">http://orgmode.org/manual/HTML-export.html#HTML-export</a> and anything not supported by the markdown syntax will be converted by that HTML export process.  See the Org-mode website for more details on <a href="exporting markdown">http://orgmode.org/manual/Markdown-export.html#Markdown-export</a> and other formats.</p>
<blockquote><p>Note: for the header and sectioning structure the Markdown export can generate both atx and setext types for headlines, according to org-md-headline-style. ATX introduces a hard limit of two levels of headings, whereas Setext pushes it to six. Headings below that limit are exported as lists. You can also set a soft limit before that one (see <a href="Export settings">http://orgmode.org/manual/Export-settings.html#Export-settings</a>).</p>
</blockquote>

]]></content>
    <summary type="html"><![CDATA[<p>Emacs is a tool that just keeps on giving and Org-mode is a fantantastic way to create text based content and manage it effectively.  Unfortunately, outside of Emacs nothing uses Org-mode formating.  However, as Org-mode is just a text format then it can be easily converted by Emacs into other things.  I’ll show you how to create other formats from Org-mode, so you can confidently write everything in Org-mode and generate any other formats you need.</p>
<p>]]></summary>
    
      <category term="emacs" scheme="http://jr0cket.github.io/hexo-themes-test/tags/emacs/"/>
    
      <category term="org-mode" scheme="http://jr0cket.github.io/hexo-themes-test/tags/org-mode/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Updating Octopress with bug fixes and enhancments]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/updating-octopress-with-bug-fixes-and-enhancments/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/updating-octopress-with-bug-fixes-and-enhancments/</id>
    <published>2014-03-13T19:32:54.000Z</published>
    <updated>2014-04-09T17:14:42.000Z</updated>
    <content type="html"><![CDATA[<p>For each Octopres project you have created (ie. for each blog / website you created with Octopress) you need to pull some code from Github remote (octopress master) and run a few rake tasks.</p>
<p>Before you start with an update, check you Octopress projects files have been added to the Git repository or Stashed out of the way - as Octopress will try and overwrite them (although as its using git it will fail and warn you about a merge conflict).</p>
<pre><code>git pull octopress master     <span class="comment"># Get the latest Octopress</span>
bundle install                <span class="comment"># Keep gems updated</span>
rake update_<span class="built_in">source</span>            <span class="comment"># update the template's source</span>
rake update_style             <span class="comment"># update the template's style</span>
</code></pre><p><a href="http://octopress.org/docs/updating/" target="_blank">http://octopress.org/docs/updating/</a></p>
<p>Thank you</p>
]]></content>
    
    
      <category term="octopress" scheme="http://jr0cket.github.io/hexo-themes-test/tags/octopress/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Creating content in markdown for your Octopress blog]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/creating-content-in-markdown-for-your-octopress-blog/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/creating-content-in-markdown-for-your-octopress-blog/</id>
    <published>2014-03-13T19:32:20.000Z</published>
    <updated>2014-04-09T17:07:01.000Z</updated>
    <content type="html"><![CDATA[<p>Octopress enables the creation of great looking blog post using simple markdown text.  This gives you a no-fuss way of writing your blogs without getting distracted.  Here I will cover how to add formatting to you text and embedding code and other useful media into your blog posts.</p>
<blockquote><p>In my previous blog on Octopress I covered the blogging workflow and the handful of rake commands that help you create and deploy your blog posts consistently. </p>
</blockquote>


<a id="more"></a>

<h2 id="Adding_styles_to_text">Adding styles to text</h2>
<p>Headings<br>Bold, italic </p>
<h2 id="Adding_images">Adding images</h2>
<p>Images are always a good way to explain concepts or to just get attendtion for your writing.</p>
<p>To add an image to your post, you add the following code </p>
<figure class="highlight"><figcaption><span>[Insert an image in your post]</span><a href="http://octopress.org/docs/plugins/image-tag/" target="_blank">link</a></figcaption><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>  <escape><img src="/path/to/image" class="[class names]" title="[width] [height] [title text [alt text]]">

<p></pre></td></tr></table></figure></escape></p>
<p>Here is an example with my two cute cats:</p>
<img src="/images/kittens-snuggled.png">


<h3 id="More_examples">More examples</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>  <escape><img src="http://placekitten.com/890/280">

<img src="http://placekitten.com/320/250" class="left" title="Place Kitten #2">

<img src="http://placekitten.com/300/500" class="right" width="150" height="250" title="Place Kitten #3">

<img src="http://placekitten.com/300/500" class="right" width="150" height="250" title="Place Kitten #4" alt="An image of a very cute kitten">

<p></pre></td></tr></table></figure></escape></p>
<h2 id="Showing_code">Showing code</h2>
<h3 id="Code_blocks">Code blocks</h3>
<p>You can embed code snippets directly in the markup of the blog posts you write using the codeblock directive.<br><a href="http://octopress.org/docs/plugins/codeblock/" target="_blank">http://octopress.org/docs/plugins/codeblock/</a></p>
<p>These are okay but I have not figured out a way to stop Octopress examples from rendering incorrectly (unless there is an Octopress update that fixes this)</p>
<p>[TODO - figure out how to show code snippets that are also liquid calls]</p>
<h3 id="Github_Gists">Github Gists</h3>
<p>I am used to using Github and Gists for sharing and collaborating around code, so as Octopress can use Gits then I have started using the gist directive.</p>
<script src="https://gist.github.com/9532424.js"></script>


<p>See the <a href="Octopress article on Github gists">http://octopress.org/docs/plugins/gist-tag/</a> for a few more examples.</p>
<h2 id="Adding_Video">Adding Video</h2>
<p>You can add embedded videos from YouTube and Vimeo very easily, you just need to know the id of the video which is the last characters of the </p>
<p>For example, there is a great video by Lindsey Stirling at <a href="https://www.youtube.com/watch?v=DHdkRvEzW84" target="_blank">https://www.youtube.com/watch?v=DHdkRvEzW84</a>, so to include this video in a post I would use the video id at the end of that web address (after the watch?v=).  So I would add the following code to my code</p>
<p>  youtub DHdkRvEzW84</p>
<p>You can use either YouTube or Vimeo for your video souce using the following syntax:</p>
<p>   youtube video-id<br>   vimeo video-id</p>
<h3 id="Example">Example</h3>
<p>A beautiful video with amazing music from Lindsey Stirling:</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/DHdkRvEzW84" frameborder="0" allowfullscreen></iframe></div>


]]></content>
    <summary type="html"><![CDATA[<p>Octopress enables the creation of great looking blog post using simple markdown text.  This gives you a no-fuss way of writing your blogs without getting distracted.  Here I will cover how to add formatting to you text and embedding code and other useful media into your blog posts.</p>
<blockquote><p>In my previous blog on Octopress I covered the blogging workflow and the handful of rake commands that help you create and deploy your blog posts consistently. </p>
</blockquote>


]]></summary>
    
      <category term="octopress" scheme="http://jr0cket.github.io/hexo-themes-test/tags/octopress/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Octopress tips - using rake tasks for blogging]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/octopress-tips-using-rake-tasks-for-blogging/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/octopress-tips-using-rake-tasks-for-blogging/</id>
    <published>2014-03-12T17:00:29.000Z</published>
    <updated>2014-04-09T17:13:41.000Z</updated>
    <content type="html"><![CDATA[<p>Abandoned this in favour of Hexo and Node.js.  No more Ruby installs for this developer.</p>
]]></content>
    
    
      <category term="to-delete" scheme="http://jr0cket.github.io/hexo-themes-test/categories/to-delete/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Customise Octopress themes for fun and your profit]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/customise-octopress-themes-for-fun-and-your-profit/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/customise-octopress-themes-for-fun-and-your-profit/</id>
    <published>2014-03-12T16:28:28.000Z</published>
    <updated>2014-04-09T17:07:53.000Z</updated>
    <content type="html"><![CDATA[<p>Octopress themes are stored in the the root folder of your project in a folder called .themes.  If you installed one of the custom themes for Octopress [link], the .themes folder is where the instructions tell you to clone the theme git repository.</p>
<p>Themes can also be installed by passing a parameter to the rake install command. the default theme being “classic”.</p>
<p>Using the .theme folder for your themes helps ensure that your customisations do not get over-written by Octopress updates .</p>
<a id="more"></a>

<h2 id="Including_font_families">Including font families</h2>
<p>You can add hosted fonts just like you do with HTML pages using a link reference.  There are a large number of fonts from Google.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>&lt;link href=<span class="string">'http://fonts.googleapis.com/css?family=Lato'</span> rel=<span class="string">'stylesheet'</span> <span class="keyword">type</span>=<span class="string">'text/css'</span>&gt;
</pre></td></tr></table></figure>


<p>I like the Ubuntu font so I add the Ubutu and Ubunto Mono font families using the following code:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>&lt;link href=<span class="string">'http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu'</span> rel=<span class="string">'stylesheet'</span> <span class="keyword">type</span>=<span class="string">'text/css'</span>&gt;
</pre></td></tr></table></figure>


<p>You can select your own fonts to use by visiting <a href="Google fonts">http://www.google.com/fonts/</a> and adding the font families you like to your collection and Google Fonts will generate the line of code you need to add.</p>
<p>To add Ubuntu fonts directly to your CSS you would use the following:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="attribute">font-family</span><span class="value">: <span class="string">'Ubuntu Mono'</span>, sans-serif;</span>
<span class="attribute">font-family</span><span class="value">: <span class="string">'Ubuntu'</span>, sans-serif;</span>
</pre></td></tr></table></figure>




<h2 id="Changing_Colours">Changing Colours</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>sass/<span class="keyword">custom</span>/_colors.scss
</pre></td></tr></table></figure>


<h2 id="Example_-_light_colour_scheme">Example - light colour scheme</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="variable">$header</span><span class="attribute">-title</span><span class="attribute">-font</span><span class="attribute">-family</span>:
<span class="string">"Lato"</span>,
<span class="string">"Fontdiner Swanky"</span>,
<span class="string">"Germania One"</span>,
<span class="string">"Poller One"</span>,
<span class="string">"Georgia"</span>,
<span class="string">"Helvetica Neue"</span>,
Arial,
sans<span class="attribute">-serif</span> <span class="subst">!</span>default;
</pre></td></tr></table></figure>






<h2 id="Chainging_Style">Chainging Style</h2>
<p>Change width of the body, the size of the dates and article titles as well as the codeblocks in </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>sass/<span class="keyword">custom</span>/_styles.scss
</pre></td></tr></table></figure>


<p>Example</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="tag">body</span> {
  <span class="attribute">max-width</span><span class="value">: <span class="number">1100</span>px;</span>
}
<span class="tag">time</span> {
  <span class="attribute">font-size</span><span class="value">: <span class="number">14</span>px;</span>
}
<span class="tag">h1</span> {
  <span class="attribute">font-size</span><span class="value">: <span class="number">2.2</span>em;</span>
}
<span class="tag">section</span> {
  &gt; <span class="tag">h1</span> {
    <span class="attribute">font-size</span><span class="value">: <span class="number">1.5</span>em;</span>
  }
}
codeblock {
    <span class="attribute">font-size</span><span class="value">: <span class="number">1.1</span>em;</span>
}
</pre></td></tr></table></figure>



<h2 id="Icons">Icons</h2>
<p><a href="Social media">http://www.elegantthemes.com/blog/resources/free-social-media-icon-set</a></p>
<h2 id="Header_images">Header images</h2>
<p>adding a CSS-styled header image isn’t immediately obvious—at least, not to web-tards like me. My first inclination was to do a bunch of surgery on ~/octopress/source/_includes/custom/header.html and stuff an image in there; that worked, but it didn’t take more than a glance at the CSS behind the Octopress default site to see that the method used there didn’t involve any additional code going into the header section. Plus, just adding an image in there didn’t really fit with the HTML5 fanciness of Octopress and Jekyll—it didn’t resize or reflow as the page was changed.</p>
<p>The key ended up being the realization that the header styling and its reflowing was coded in ~/octopress/sass/base/_layout.scss. True to form, that file has an override in ~/octopress/sass/custom/_layout.scss, and to that I made the following changes:</p>
<h3 id="Example">Example</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="code"><pre><span class="tag">body</span> &gt; <span class="tag">header</span> <span class="tag">h1</span> {
      <span class="attribute">padding-left</span><span class="value">:<span class="number">2.5</span>em;</span>
      <span class="attribute">text-align</span><span class="pseudo">:right</span>;
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 432px</span>) {</span>
              <span class="attribute">text-align</span><span class="pseudo">:left</span>;
      }
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 768px</span>) {</span>
              <span class="attribute">padding-left</span><span class="value">:<span class="number">3</span>em;</span>
      }
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 992px</span>) {</span>
              <span class="attribute">padding-left</span><span class="value">:<span class="number">2</span>em;</span>
      }
}

<span class="tag">body</span> &gt; <span class="tag">header</span> <span class="tag">h2</span> {
      <span class="attribute">padding-left</span><span class="value">:<span class="number">5.62</span>em;</span>
      <span class="attribute">text-align</span><span class="pseudo">:right</span>;
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 432px</span>) {</span>
              <span class="attribute">text-align</span><span class="pseudo">:left</span>;
              <span class="attribute">padding-left</span><span class="value">:<span class="number">3.9</span>em;</span>
      }
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 768px</span>) {</span>
              <span class="attribute">padding-left</span><span class="value">:<span class="number">5</span>em;</span>
      }
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 992px</span>) {</span>
              <span class="attribute">padding-left</span><span class="value">:<span class="number">2.9</span>em;</span>
      }
}

<span class="tag">body</span> &gt; <span class="tag">header</span> <span class="tag">h1</span><span class="pseudo">:before</span> {
      <span class="attribute">content</span><span class="value">:<span class="string">""</span>;</span>
      <span class="attribute">position</span><span class="value">:absolute;</span>
      <span class="attribute">left</span><span class="value">:<span class="number">0</span>em;</span>
      <span class="attribute">right</span><span class="value">:<span class="number">0</span>;</span>
      <span class="attribute">top</span><span class="value">:<span class="number">1.5</span>em;</span>
      <span class="attribute">height</span><span class="value">:<span class="number">110</span>px;</span>
      <span class="attribute">width</span><span class="value">:<span class="number">110</span>px;</span>
      <span class="attribute">overflow</span><span class="value">:hidden;</span>
      <span class="attribute">text-align</span><span class="pseudo">:right</span>;
      <span class="attribute">background-image</span><span class="value">:url(<span class="string">'/images/bigdino-blog-head3.png'</span>);</span>
      <span class="attribute">background-repeat</span><span class="value">:no-repeat;</span>
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 432px</span>) {</span>
              <span class="attribute">top</span><span class="value">:.<span class="number">32</span>em;</span>
      }
      <span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (min-width:<span class="preprocessor"> 768px</span>) {</span>
              <span class="attribute">left</span><span class="value">:.<span class="number">75</span>em;</span>
      }
}
</pre></td></tr></table></figure>



<p>The changes are divided up into three sections: the first part styles the main title (“Bigdinosaur Blog”), the second styles the subtitle (“Tales of hacking and stomping on things”), and the third places and styles the background image. Each section also contains instructions on how the styles should change as the browser window’s width changes (the lines beginning with @media only).</p>
<p>The most important thing, and the thing that wasn’t obvious to me at first but is actually really obvious in hindsight, is that the initial parameters for each section describe how the thing should look at its smallest, and then each min-width section describes how the thing should look starting at when the browser window is that wide or wider. So, look at header h1. This is the styling applied to the main title in the header. When the browser window is anywhere from 0 to 431 pixels wide, the title should be right-aligned with a bit of padding on its left to keep it from overlapping with the background dinosaur (more on overlapping in a bit). This is how things get displayed on, say, an iPhone.</p>
<p>The instant the browser window is 432 pixels wide—which is the point at which the “Bigdinosaur Blog” text wraps to a single line—the text switches to left-aligned and the amount of padding changes, again to keep it from overlapping with the background dino. Another shift comes again at 768 pixels of width, and then final shift to the title’s most sprawling layout happens at 992 pixels.</p>
<p>The subtitle, styled in the header h2 section, has similar directives—it starts out right-aligned, shifts to left-aligned at a certain point, and the amount of padding around it shifts as the browser window moves. The challenge with the subtitle is that I wanted it to maintain a consistent position relative to the main title, and since I’m doing my spacing using em values (which are themselves relative units), each new width setting required tuning by hand.</p>
<p>The last section places the background image itself. In order to have the most control about where the image appears and where it reflows to, I’ve given it a position:absolute tag, which means that other styled elements ignore the background when figuring out their own layouts—hence all the fiddling about with padding for the header text. Instead of standard image floating behavior, an absolutely positioned image can sit on top of other page elements. This can be used to creative effect, like on the Octopress home page titlebar, but you do have to be mindful with the spacing and padding of your other elements so that they don’t get eaten.</p>
<p>In its most narrow configuration, the background image sits on the far left of the page, with 1.5 ems of space from the top of its section to ensure that it doesn’t poke up past the main title, and with background-repeat:no-repeat set so that it only displays once rather than tiling or repeating itself. I also found that if I didn’t explicitly declare the height and width of the image, it wouldn’t display at all. Finally, there are two width settings that reposition the image as the page widens so that it maintains a visually pleasing position relative to the title.</p>
<p>I mentioned it above, but it’s worth repeating: the values above are what work for my typeface choice and image size, and you will have to tweak your own to taste. Once I had decided exactly what I wanted to do and figured out what files to edit, it took probably an hour of making small changes and previewing and making small changes and previewing over and over again before I was happy with the way things lined up. I spent so much time fiddling, in fact, that I elected to abandon the idea of having the dino pic resize itself. Dinosaurs, I suppose, are meant to be displayed as large as possible, all the time, and would never consent to any funny-business resizing.</p>
<p><a href="http://blog.bigdinosaur.org/changing-octopresss-header/" target="_blank">http://blog.bigdinosaur.org/changing-octopresss-header/</a></p>
]]></content>
    <summary type="html"><![CDATA[<p>Octopress themes are stored in the the root folder of your project in a folder called .themes.  If you installed one of the custom themes for Octopress [link], the .themes folder is where the instructions tell you to clone the theme git repository.</p>
<p>Themes can also be installed by passing a parameter to the rake install command. the default theme being “classic”.</p>
<p>Using the .theme folder for your themes helps ensure that your customisations do not get over-written by Octopress updates .</p>
]]></summary>
    
      <category term="octopress" scheme="http://jr0cket.github.io/hexo-themes-test/tags/octopress/"/>
    
      <category term="themes" scheme="http://jr0cket.github.io/hexo-themes-test/tags/themes/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Why go to a conference]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/why-go-to-a-conference/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/why-go-to-a-conference/</id>
    <published>2014-03-08T16:07:47.000Z</published>
    <updated>2014-04-09T17:15:09.000Z</updated>
    <content type="html"><![CDATA[<p>There are a great many developer and tech conferences to got to, some are free, some are relativley cheap and some you hope you can get your company to pay for.  But why should you even consider going to a conference in the first place?</p>
<a id="more"></a>

<h2 id="As_a_speaker">As a speaker</h2>
<p>free entry - maybe even invite a friend of two for free<br>wined and dined by the organisers</p>
<p>Best way I know of checking you understand something.<br>In fact, presenters are usually the ones that get the most from a conference, they present there ideas and then have some one in the crowd as for “a real world example”.  Putting yourself on the spot like that and learning how to deal with it puts you in a good place when you go back to work and have to deal with all sorts of other less than plesant situations.</p>
<p>Its fun being a speaker, you get respect for just standing up in front of a crowd and speaking.</p>
<p>Its a great way to develop your career.  Are you tired of boring interview questions or dumb tests that only test your memory rather than your understanding?  A reputation of speaking at conferences goes a long way to cut through the crap that you often get at interview time.</p>
<p>Working a crowd at a presetation helps inmprove you team skills and helps you understand how you can inspire and influence people.  It is good training for real leadership.</p>
<p>I dont know of any speakers who ended up on the IT scrap-heap…</p>
<h2 id="As_an_attendee">As an attendee</h2>
<p>Its a chance to get away from work for a few days and actually think about things.  It can be hard to see the big picture in terms of what you are trying to achieve at work when you are head down getting things done (or fire fighting).</p>
<p>Its good to fine out what is happening in technology and see how others are applying the same tools and languages you use to great value.  Even some small change in approach can make you more effective.</p>
<p>Meet new people and discuss each others concerns.  Its a great chance to meet people in your situation and do some venting, talk about how you face your challenges, swap ideas and </p>
<p>Find out what people are doing and what they are excited about, why they get out of bed in the morning</p>
<p>Its good to put conferences on your CV - shows initiative, shows you are interested in learing and developing yourself</p>
<p>Its a great way to learn new things, or at least learn what things you should be looking at for the next 6 months - unless you like turning up to work and doing the same old crap week in week out !!!</p>
<p>It gives you something to talk about with your team when you get back to work, something other than what was on TV last night.</p>
<p>How boring is it to just work with someone who just turns up 9-5 and does nothing else.  I want to work with people who are inspired, passionate and enthusiastic about what they do.  As an employer, why would you ever hire someone who wasnt like this ??  Oh yes, because that employer has either no respect for thier staff or just wants them to do some grunt work - the IT factory in its worse sense.</p>
<p>Most employeers have no idea about IT and many do not need to know that much, except that they should respect the knowledge workers they hire and empower them to deliver the best possible service they can.  Unfortunately managment has been trained to measure and manage people like a time and cost study, rather than considering the value that their staff can bring them.</p>
<p>Quote:<br>Manager “What happens if I train my staff and they all leave”<br>Entreprenure “What happens if you dont train your staff and they all stay”</p>
<p>If you want a successful business then you need successful people, people who will help you drive the business forward and not be a blocker to the delivery of your ideas. </p>
<p>There have been quite a few organisations that are now able to deliver at the speed of thought, deploying hundereds of ideas a day and getting the best feedback you can in the world - the customers recieving your service.</p>
]]></content>
    <summary type="html"><![CDATA[<p>There are a great many developer and tech conferences to got to, some are free, some are relativley cheap and some you hope you can get your company to pay for.  But why should you even consider going to a conference in the first place?</p>
]]></summary>
    
      <category term="motivation" scheme="http://jr0cket.github.io/hexo-themes-test/tags/motivation/"/>
    
      <category term="dev-events" scheme="http://jr0cket.github.io/hexo-themes-test/categories/dev-events/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create great looking website content with Twitter Bootstrap]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/create-great-looking-website-content-with-twitter-bootstrap/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/create-great-looking-website-content-with-twitter-bootstrap/</id>
    <published>2014-03-08T08:16:30.000Z</published>
    <updated>2014-05-14T00:11:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="What_is_Twitter_bootstrap?">What is Twitter bootstrap?</h2>
<p>Bootstrap is an HTML5 toolkit from Twitter to help kickstart webapps and web content sites.  It includes a base Cascading Style Sheet (CSS) and HTML for forms, buttons, typography, tables, grids, navigation and much more.</p>
<p>Bootstrap stylesheet provides an easy-to-implement 960 grid for efficient layout, as well as expertly crafted styles for typography, navigation, tables, forms, buttons, and more. To take care of everyday JavaScript touches, Bootstrap provides a well built set of jQuery plugins for drop-down menus, tabs, modal boxes, tooltips, alert messages, and more.</p>
<p>This helps you create a standards compliant, responsive, user-friendly, professionally built HTML5 website, right out of the box. </p>
<a id="more"></a>

<h2 id="Licencing">Licencing</h2>
<p>Bootstrap is under the Apache 2.0 license, provide a great deal of creative freedom. So long as you give the good folks at Twitter due credit for their work, you’re free to take, tweak, and customize everything to your heart’s content.</p>
<h2 id="Getting_started_with_Bootstrap">Getting started with Bootstrap</h2>
<p>If you just want to use Bootstrap for your project you can simply include the minified libraries from a content delivery network </p>
<figure class="highlight html"><figcaption><span>Use Bootsrapt from a Content Delivery Network (CDN)</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre> 
<span class="doctype">&lt;!DOCTYPE html&gt;</span>
 <span class="tag">&lt;<span class="title">html</span>&gt;</span>
 <span class="tag">&lt;<span class="title">head</span>&gt;</span>
   <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span>
   <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1"</span>&gt;</span>
   <span class="tag">&lt;<span class="title">title</span>&gt;</span>Hack the Tower - London hackday<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
   <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>&gt;</span>     
   <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"http://netdna.bootstrapcdn.com/bootswatch/3.1.1/united/bootstrap.min.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>&gt;</span>
   <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"css/hackthetower.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
</pre></td></tr></table></figure>


<p>In the example, lines 8 &amp; 9 include minified bootstrap using the <strong>netdna</strong> content delivery network (CDN), so where ever people view your site from around the world it should not slow down due to loading these styleheets.</p>
<p>You can now use elements from Bootstrap in your project and view the results anywhere you have an internet connection.  To learn what these are, take a look at <a href="http://getbootstrap.com/" target="_blank">Get Bootstrap</a> or Google for some of the very many examples out there.</p>
<h2 id="Working_with_Bootstrap">Working with Bootstrap</h2>
<p>If you want to see the styles that bootstrap uses or carry out some significant customisations, you can also download bootstrap to your laptop as normal CSS files.  Its common practice to put cascading stylesheets into a folder called CSS and JavaScript in a folder called javascript.</p>
<p>If you are doing significant customisation then you could edit the twitter bootstrap files directly.  Alternativley you can create your own CSS and JavaScript files that over-ride the bootstrap styles and scripts.</p>
<h2 id="Resources">Resources</h2>
<p>The following links will give you ideas on how to make the most out of Bootstrap:</p>
<ul>
<li><a href="http://getbootstrap.com/getting-started/" target="_blank">Get Bootstrap - Getting Started</a></li>
<li>Tutorial: <a href="http://www.revillweb.com/tutorials/twitter-bootstrap-tutorial/" target="_blank">Up and running with Twitter Bootstrap in 20 minutes</a></li>
<li>Tutorial: <a href="http://www.w3resource.com/twitter-bootstrap/tutorial.php" target="_blank">w3resource: Twitter Bootstrap 3 tutorial</a></li>
<li>Video: <a href="https://www.youtube.com/watch?v=no-Ntkc836w" target="_blank">Bootstrap Tutorial For Beginners - Responsive Design with Bootstrap</a></li>
<li><a href="http://blog.getbootstrap.com/" target="_blank">Official Bootstrap blog</a></li>
<li><a href="http://stackoverflow.com/questions/tagged/twitter-bootstrap-3" target="_blank">StackOverflow - Twitter-Bootstrap-3</a></li>
<li><a href="https://twitter.com/twbootstrap" target="_blank">@twbootstrap</a></li>
</ul>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank">@jr0cket</a></p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="What_is_Twitter_bootstrap?">What is Twitter bootstrap?</h2>
<p>Bootstrap is an HTML5 toolkit from Twitter to help kickstart webapps and web content sites.  It includes a base Cascading Style Sheet (CSS) and HTML for forms, buttons, typography, tables, grids, navigation and much more.</p>
<p>Bootstrap stylesheet provides an easy-to-implement 960 grid for efficient layout, as well as expertly crafted styles for typography, navigation, tables, forms, buttons, and more. To take care of everyday JavaScript touches, Bootstrap provides a well built set of jQuery plugins for drop-down menus, tabs, modal boxes, tooltips, alert messages, and more.</p>
<p>This helps you create a standards compliant, responsive, user-friendly, professionally built HTML5 website, right out of the box. </p>
]]></summary>
    
      <category term="bootstrap" scheme="http://jr0cket.github.io/hexo-themes-test/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Creating blog posts with Octopress]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/creating-blog-posts-with-octopress/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/creating-blog-posts-with-octopress/</id>
    <published>2014-03-04T15:46:14.000Z</published>
    <updated>2014-04-09T17:05:53.000Z</updated>
    <content type="html"><![CDATA[<p>Octopress provides an easy way to create blog posts by proving a task that will automatically place and name your markdown file.  This helps manage your blog posts in a sensible structure and avoids conflicts.</p>
<p>To create a new post, use the following command inside your Octopress project folder:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>rake new_post[<span class="string">"Title of your blog post"</span>]
</pre></td></tr></table></figure>


<p>This will create a markdown file including frontmatter to apply the blog post style.  The task creates the file under the _source folder and included the date at the start of the filename.</p>
<p><a id="more"></a><br>Now you can edit the file and simply add your content.  Once you have written your blog post you can ask Octopress to generate the html for your new post.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>rake <span class="keyword">generate</span> 
</pre></td></tr></table></figure>


<p>You can view the results locally, or simply deploy up to your chosen location (eg. github pages)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>rake preview
rake deploy  
</pre></td></tr></table></figure>


<p>If you are confident about the changes you are making, or have a test website you are deploying to, then you can use a single command to generate the new version of the site and publish it directly.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>rake gen_deploy
</pre></td></tr></table></figure>



<h2 id="Summary">Summary</h2>
<p>This covers the bloggine workflow for Octopress.  Next we will cover adding content in your blog post markdown files, inlcuding text formatting, images, code snippets, embedded video, etc</p>
<p>Thank you</p>
]]></content>
    <summary type="html"><![CDATA[<p>Octopress provides an easy way to create blog posts by proving a task that will automatically place and name your markdown file.  This helps manage your blog posts in a sensible structure and avoids conflicts.</p>
<p>To create a new post, use the following command inside your Octopress project folder:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>rake new_post[<span class="string">"Title of your blog post"</span>]
</pre></td></tr></table></figure>


<p>This will create a markdown file including frontmatter to apply the blog post style.  The task creates the file under the _source folder and included the date at the start of the filename.</p>
<p>]]></summary>
    
      <category term="octopress" scheme="http://jr0cket.github.io/hexo-themes-test/tags/octopress/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[First blog post ever - awesome]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/03/octopress-first-blog-post-ever-awesome/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/03/octopress-first-blog-post-ever-awesome/</id>
    <published>2014-03-03T00:08:42.000Z</published>
    <updated>2014-04-09T17:14:18.000Z</updated>
    <content type="html"><![CDATA[<p>This is the first blog post of many in my adventures in learning how to publish a blog using Octopress.  </p>
<p>As a developer I want a lightweight tool to create and easily publish content interesting to other developers in the community.  Although I can write HTML, CSS and JavaScript for webapps, I dont want to be slowed down writing these things when I am doing creative writing.</p>
<p>Using Octopress, which is a blogging framework on top of Jekyll, I can write my content using Markdown.  As Markdown is just simple text with a few characters and indents used for formating, I can focus on the writing and make it as appealing as I can.  I dont get distracted by the visual layout of the content and a standard design for the blog is consistently applied.<br><a id="more"></a><br>The only challenge I had intially was to get a working copy of Ruby running on my Ubuntu laptop.  Jekyll and therefore Octopress requires Ruby version 1.9.3 or greater and Unfortunately I seemed to have a mix of 1.9.1 and 1.9.3.  In Ubuntu 13.10 there is a strange stiuation where the 1.9.3 version of ruby was installed along side version 1.9.1 and therefore errors arrose when trying to generate the site.</p>
<p>To fix Ruby on Ubuntu, I loaded up Synaptic package manager and removed all Ruby packages and anything related, such as gem and bundler.  Then I installed the package ruby2.0 along with the docs and dev packages for that version.  With only the latest version of Ruby installed, Octopress worked perfectly.</p>
<p>I look forward to sharing my further experiences blogging with Octopress</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<p>This is the first blog post of many in my adventures in learning how to publish a blog using Octopress.  </p>
<p>As a developer I want a lightweight tool to create and easily publish content interesting to other developers in the community.  Although I can write HTML, CSS and JavaScript for webapps, I dont want to be slowed down writing these things when I am doing creative writing.</p>
<p>Using Octopress, which is a blogging framework on top of Jekyll, I can write my content using Markdown.  As Markdown is just simple text with a few characters and indents used for formating, I can focus on the writing and make it as appealing as I can.  I dont get distracted by the visual layout of the content and a standard design for the blog is consistently applied.<br>]]></summary>
    
      <category term="octopress" scheme="http://jr0cket.github.io/hexo-themes-test/tags/octopress/"/>
    
      <category term="blogging" scheme="http://jr0cket.github.io/hexo-themes-test/categories/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Share your Revealjs slides on Github pages]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2014/01/share-your-revealjs-slides-on-github-pages/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2014/01/share-your-revealjs-slides-on-github-pages/</id>
    <published>2014-01-03T23:50:00.000Z</published>
    <updated>2014-05-13T22:21:45.000Z</updated>
    <content type="html"><![CDATA[<p>In previous articles I showed how to <a href="http://jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html" target="_blank">setup Emacs Org-reveal &amp; Reveal.js</a> to <a href="http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html" target="_blank">generate your own presentations</a> from Emacs Org-mode files.  This time I’ll show you how to publish those presentations on <a href="http://pages.github.com/" target="_blank">Github Pages</a> as I have done for <a href="http://jr0cket.github.io/slides" target="_blank">my own presentations</a>.</p>
<a id="more"></a>

<p><a href="http://pages.github.com/" target="_blank">Github Pages</a> are a great place for publishing your <a href="http://lab.hakim.se/reveal-js/" target="_blank">Reveal.js</a> presentations or any static web content.  For existing repositories you simply commit your content to a <code>gh-pages</code> branch or you can create a specific user or organisation repository and commit to the <code>master</code> branch.</p>
<blockquote><p>Github Pages are great for any websites that is self-contained, in that there is no reliance on a database or other services running locally.  You can even create great looking pages without any coding by using the Github authoring tool, as I have done with my Github user home page.</p>
</blockquote>


<h2 id="How_to_use_Github_pages">How to use Github pages</h2>
<p><strong>Existing code repositories</strong><br>If you already have a repository for your code and want to add web page documentation, then you can simply add a <code>gh-pages</code> branch and commit all your documentation to that branch.</p>
<p><strong>Content only repositories</strong><br>If you only have content then you can create a user or organisation repository.  This is a specifically named repository in the form of <code>name.github.io</code>  where name is the exact name of your Github user account or the Github organisation you are part of.</p>
<p>As my Github user account name is jr0cket I created an repository named <code>jr0cket.github.io</code>.</p>
<p>Once created, you can type in the name of this repository into your browser and it will display any content you have committed into the repository (and pushed it to Github).</p>
<p><strong>Separating slide content into their own repository</strong><br>As I planed to create a number of presentations, I use both an account repository as the home page and created a new repository called slides to host all my presentations.  This allows all my presentations to be easily cloned or forked by others easily without getting content that is only relevant to me on my Github pages home page. </p>
<p>Keeping the presentations all in one repository keeps things simple should I define my own Reveal.js themes or if there are Reveal.js updates.</p>
<p>I added  everything to the gh-pages branch (reveal.js, images, org &amp; generated html files).  Then I generate the Reveal.js slides locally using org-reveal in Emacs, so I can check they look okay.  Once I am happy with the slides I commit the html and .org files to Git and push them up to Github.</p>
<h2 id="Setting_up_a_Github_Pages_account_repository">Setting up a Github Pages account repository</h2>
<p>Creating an user repository on Github is just the same as for any other repository, except that the name must match the form name.github.io - where name is exactly the same as you Github user name.</p>
<p>I created a new repository called <code>jr0cket.github.io</code>, this has a web address (URL) of <a href="http://jr0cket.github.io" target="_blank">http://jr0cket.github.io</a></p>
<p>I used the Automatic Page Generator from Github to create the site without coding and with a handful of nice templates to choose from.  You can of course add your own HTML, CSS &amp; JavaScript if you wish.  The Automatic Page Generator is in on the Settings page of your repository, under the Github pages section.  This section shows you the repository URL and a button to generate a page for you.</p>
<p>If you are going to use your user or org repository for your slides, then jump to the secion on “Adding Reveal.js to your repository”<br>Creating a repository for your Reveal.js slides</p>
<p>If you don’t already have a Github repository for your slides (and are not using your user or org repository), go to your account on Github and create a new repository.</p>
<p>Then clone your Github repository locally (substituting the address of your repository)<br>git clone <a href="https://github.com/user/repository.git" target="_blank">https://github.com/user/repository.git</a></p>
<h2 id="Create_an_orphaned_gh-pages_branch">Create an orphaned gh-pages branch</h2>
<p>Github pages publishes content only from the branch gh-pages (unless you are using a user or org repository).  In your local repository, create a new branch called gh-pages.  According to Github, the gh-pages branch should be an orphaned branch.</p>
<pre><code><span class="built_in">cd</span> repository
git checkout --orphan gh-pages
</code></pre><p>An orphaned branch is one that is not connected to another branch, in this case its not attached to master.  Technically I don’t think gh-pages branch needs to be orphaned to publish your content, but this is the approach that Github recommends.</p>
<p>Once you have the gh-pages branch you can commit your files to that branch as normal. </p>
<pre><code>git <span class="keyword">add</span> .
git commit -m <span class="string">"First pages commit"</span>
git <span class="keyword">push</span> origin gh-pages
</code></pre><p>Pushing your Reveal.js slides at this point will not give you the desired results, as we haven’t added the Reveal.js files to the repository.  So lets do that next.</p>
<h2 id="Adding_Reveal-js_to_your_repository">Adding Reveal.js to your repository</h2>
<p>You need to provide the JavaScript and CSS files from Reveal.js to make your slides display correctly.  I copy the following folders from within the reveal.js folder into the root of my slides project</p>
<pre><code>cp /path/<span class="keyword">to</span>/revealjs/css    ~/<span class="keyword">my</span>-slides
cp /path/<span class="keyword">to</span>/revealjs/js     ~/<span class="keyword">my</span>-slides
cp /path/<span class="keyword">to</span>/revealjs/lib    ~/<span class="keyword">my</span>-slides
cp /path/<span class="keyword">to</span>/revealjs/plugin ~/<span class="keyword">my</span>-slides
</code></pre><p>You also need to check that the HTML for your web pages references Reveal.js files correctly.  The best way to do this is in the configuration for Emacs Org-reveal.</p>
<p>In my Org-reveal setup, I have defined the root for the Reveal.js files in my live-pack init.el file as follows:</p>
<pre><code><span class="list">(<span class="title">setq</span> org-reveal-root <span class="string">""</span>)</span>
</code></pre><p>So long at this org-reveal setting is loaded, it shouldn’t matter which file you add it to in your Emacs configuration.</p>
<p>The HTML you generate with Org-reveal in Emacs should have references to the Reveal.js includes in the <head> section.  Here is an example:</p>
<pre><code><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span>
<span class="tag">&lt;<span class="title">head</span>&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">title</span>&gt;</span>(My presentation title)<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"author"</span> <span class="attribute">content</span>=<span class="value">"(John Stevenson)"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"./css/reveal.min.css"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"./css/theme/jr0cket.css"</span> <span class="attribute">id</span>=<span class="value">"theme"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"./css/print/pdf.css"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">media</span>=<span class="value">"print"</span>/&gt;</span>
  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"description"</span> <span class="attribute">content</span>=<span class="value">"My presentation title"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">head</span>&gt;</span>
</code></pre><h2 id="The_final_push">The final push</h2>
<p>Then push the Reveal.js files to your Github repository (and any updated to your Org &amp; html files)</p>
<pre><code>git <span class="keyword">add</span> .
git commit -m <span class="string">"Adding Reveal.js files for presentation"</span>
git <span class="keyword">push</span> origin gh-pages
</code></pre><h2 id="Browsing_your_Slides">Browsing your Slides</h2>
<p>If you added your slides to a user or org repository, then you should be able to browse to <a href="http://name.github.io" target="_blank">http://name.github.io</a> where name is your Github user or org name (eg. <a href="http://jr0cket.github.io" target="_blank">http://jr0cket.github.io</a>).</p>
<p>If, like me, you created a seperate repository for all your slides, you can brows them by going to <a href="http://name.github.io/repo-name" target="_blank">http://name.github.io/repo-name</a> where name is your Github user name and repo-name is the name of the repository you added Reveal.js and your slides to (eg. <a href="http://jr0cket.github.io/slides" target="_blank">http://jr0cket.github.io/slides</a>).</p>
<p>Note that you need to add the html filename to the URL to browse your presentation, or as I have done add links to the page on jr0cket.github.io</p>
<h2 id="Using_Hub_as_an_alternative_way_to_create_your_Github_pages_repository">Using Hub as an alternative way to create your Github pages repository</h2>
<ul>
<li>Install <a href="http://hub.github.com/" target="_blank">Hub</a></li>
<li>Create a folder called <code>name.github.io</code> on your laptop, where <em>name</em> is your Github user name or organisation name</li>
<li>Inside that folder, initialise a git repository - <code>git init</code></li>
<li>Rename the master branch to gh-pages - <code>git branch -m gh-pages</code></li>
<li>Use hub to to create the repository on github - <code>hub create -d &quot;optional description of the repository&quot;</code></li>
</ul>
<p>If you want to specify the repository name using hub, use the command form - <code>hub create account-name.github.io -d &quot;optional description of the repository&quot;</code></p>
<ul>
<li>Create and commit your content in the local repository on the gh-branch, then push the <code>gh-pages branch to github - github push -u origin gh-pages</code></li>
</ul>
<p>The <code>-u</code> option sets github to be the default remote repository to and the gh-pages the default branch.  So when you do a push or pull you dont need to specify remote repository or branch you can just do git push and git pull</p>
<h2 id="Example_Reveal-js_presentations_on_Github_pages">Example Reveal.js presentations on Github pages</h2>
<p>See my <a href="http://jr0cket.github.io/slides" target="_blank">Github page</a> for a list of my presentations created with Emacs Org-mode and Reveal.js.</p>
<p>Thank you.</p>
]]></content>
    <summary type="html"><![CDATA[<p>In previous articles I showed how to <a href="http://jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html" target="_blank">setup Emacs Org-reveal &amp; Reveal.js</a> to <a href="http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html" target="_blank">generate your own presentations</a> from Emacs Org-mode files.  This time I’ll show you how to publish those presentations on <a href="http://pages.github.com/" target="_blank">Github Pages</a> as I have done for <a href="http://jr0cket.github.io/slides" target="_blank">my own presentations</a>.</p>
]]></summary>
    
      <category term="revealjs" scheme="http://jr0cket.github.io/hexo-themes-test/tags/revealjs/"/>
    
      <category term="emacs" scheme="http://jr0cket.github.io/hexo-themes-test/tags/emacs/"/>
    
      <category term="presenting" scheme="http://jr0cket.github.io/hexo-themes-test/categories/presenting/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu Gnome - is it better than Ubuntu?]]></title>
    <link href="http://jr0cket.github.io/hexo-themes-test/2013/10/ubuntu-gnome-is-it-better-than-ubuntu.html/"/>
    <id>http://jr0cket.github.io/hexo-themes-test/2013/10/ubuntu-gnome-is-it-better-than-ubuntu.html/</id>
    <published>2013-10-14T22:17:00.000Z</published>
    <updated>2014-05-15T18:52:43.000Z</updated>
    <content type="html"><![CDATA[<img src="http://www.gnome.org/wp-content/themes/gnome-grass/images/gnome-logo.png" class="img-thumbnail">


<p>With a new version of <a href="http://www.ubuntu.com/" target="_blank">Ubuntu</a> this month, I asked myself if I would get more out of one of the many other Linux distributions.  Here is what I learnt.</p>
<a id="more"></a>

<p>I’ve used Ubuntu as my main Linux distribution since I changed from <a href="http://www.debian.org/" target="_blank">Debian</a> in 2005.  I started using Debian in 1995, so if I did change distributions I wanted to stay with the <em>.deb</em> packaging system which I value so much.  </p>
<p>Although I am weary of the reductions of features the Gnome team have made recently, <a href="http://ubuntugnome.org/" target="_blank"><strong>Ubuntu Gnome</strong></a> was the first alternative distribution I tried and was surprised to find I quite like it.</p>
<img src="http://3.bp.blogspot.com/-jRj631yZJzY/UlsS3eLBbrI/AAAAAAAAL3U/FKLSLdKGn_I/s1600/ubuntu-gnome-my-basic-desktop.png" class="img-code">


<p>My Ubuntu Gnome desktop using Gnome Shell and a few extensions</p>
<h2 id="Installing_Ubuntu_Gnome">Installing Ubuntu Gnome</h2>
<p>This is not any different from the normal Ubuntu install and everything went well on my Lenovo x201T.</p>
<p>I selected to install Ubuntu Gnome over the entire hard drive (SSD) and use an encrypted disk and LVM (just in case I want to re-organise partitions at a later date).  I chose to get updates and multi-media codecs (for playing music and videos) during the installation too.</p>
<p>After about 20-30 minutes I had a new OS for my laptop, all ready to use.  A quick reboot and within 10 seconds I am logging in to Ubuntu Gnome.</p>
<h2 id="First_Impressions">First Impressions</h2>
<p>Ubuntu Gnome uses Gnome shell and there is a lot of commonality between it and Ubuntu Unity desktop.  To my surprise though I found I quickly started liking Ubuntu Gnome for lots of little reasons.  It helped that I had a quick look at the <a href="https://wiki.gnome.org/GnomeShell/CheatSheet" target="_blank">Gnome Shell cheat sheet</a> which gives a great overview of the main features.</p>
<h2 id="Performance">Performance</h2>
<p>Gnome shell is really fast and responsive and I haven’t had any slow-downs as I increase the amount of apps running. As Ubuntu Unity is pretty quick too, then I don’t see any speed advantage.</p>
<p>Ubuntu Unity seems to use just a little bit more memory, but that may be due to more packages installed and extra services running (eg. UbuntuOne). Its not a significant difference.</p>
<h3 id="Automatic_Virtual_Desktops">Automatic Virtual Desktops</h3>
<p>Gnome shell automatically creates new virtual desktops as you add applications and deletes desktops when you close all apps on that desktop.  I like to keep one app per desktop, so its great that you can launch an app from the dash with the middle mouse button (the Lenovo laptops have 3 buttons) and it opens in a new desktop. When I close the app, Gnome shell tidies away my desktop, helping me keep more organised.  This is a feature I would love to have in Ubuntu.</p>
<p>Gnome Shell has vertically arranged desktops, so each desktop is stacked one on top of the other.     I quickly came to prefer this over the default grid of Ubuntu Unity.  Although you can change Unity’s grid layout with Ubuntu Tweak, I haven’t seen the ability to automatically create an delete desktops.</p>
<h2 id="The_Dash">The Dash</h2>
<p>The Gnome Shell launcher similar to Ubuntu Unity, however in Gnome Shell its attached to the overlay rather than being their on the desktop.  So with Gnome shell I only see the launcher when I press the Super key (as I always run my apps maximised).  This keeps my desktop very simple.</p>
<p>Whilst the launcher in Ubuntu Unity has lots of great features to help you launch and switch to your apps, I found I didn’t really use them.  I just set Unity to auto-hide the launcher </p>
<h2 id="Notifications">Notifications</h2>
<p>Gnome shell displays notifications on the bottom of the desktop rather than the top right corner in Ubuntu Unity. I prefer the placement in Ubuntu Unity, although they both could be smaller so they are less intrusive.</p>
<h2 id="Unwanted_software">Unwanted software</h2>
<p>There were a few packages and services that came with Ubuntu Gnome I didnt require, but not many.  The main packages I removed were:</p>
<ul>
<li>epiphany - an messaging client (I use Google for that)</li>
<li>spamassassin - email spam service (again I use Google)</li>
</ul>
<p>To remove the packages I just used the command line, as I knew the specific package names it was quicker than launching the Ubuntu software center</p>
<pre><code>apt-<span class="keyword">get</span> remove --purge <span class="package"><span class="keyword">package</span>-<span class="title">name</span></span>
</code></pre><p>To find out if there were any services running that I didnt need I use the command line again to list the status of all services currently installed:</p>
<pre><code><span class="built_in">sudo</span> service --status-all
</code></pre><p>From this command I discovered spam assassin and removed it as above.</p>
<h2 id="Gnome_Shell_Extensions"><a href="https://extensions.gnome.org/" target="_blank">Gnome Shell Extensions</a></h2>
<p>Gnome Shell allows customisations via extensions (written in JavaScript and possibly other languages) and there is <a href="https://extensions.gnome.org/" target="_blank">a website full of them</a>.  The Gnome Shell extensions are really easy to use, its just like using the Chrome or Firefox extensions.</p>
<p>Each extension on the website has an on/off switch.  Switching on prompts you to accept that the package will be installed.  For some extensions there is also a tool icon that you can press to configure the extensions once installed.  You can manage your installed extensions from <a href="https://extensions.gnome.org/local/" target="_blank">https://extensions.gnome.org/local/</a>.</p>
<p>These extensions give a really easy way to add features and Gnome Shell and without them it would have diminished the experience amd I would have stopped using Gnome Shell then and there.</p>
<p>The only issue with these extensions is that they can become outdated and break, with each release of Gnome Shell.</p>
<h3 id="Extensions_added">Extensions added</h3>
<p><strong>AppIndicator Status</strong></p>
<p>I use Dropbox to sync important files between different laptops (Linux, Mac) and although its easy to install Dropbox in Ubuntu Gnome, the status panel indicator for dropbox does not display.  By adding AppIndicator extension then the dropbox icon appears and I can control syncing of my files again.</p>
<p><strong><a href="https://extensions.gnome.org/extension/55/media-player-indicator/" target="_blank">Media Player Indicator</a></strong></p>
<p>In Ubuntu Unity you can start and control the default music player (Rhythmbox) from the volume indicator.  The Media Player Indicator adds that functionality in Gnome Shell.  It worked for Rhythmbox although the Playlists didnt show up in the volume indicator.</p>
<p><strong> <a href="https://extensions.gnome.org/extension/545/hide-top-bar/" target="_blank">Hide Top bar</a></strong></p>
<p>The biggest thing that put me off Gnome Shell at first was the wasted space at the top of the screen.  First there is the Gnome Shell menu bar, then the window decoration for the application, then the application menu and then the content of the app. From what I have read (cheat sheet) Gnome Shell will go the same route as Ubuntu Unity and put app menus in the top panel, making better use of the space.  Until then, I find <a href="https://extensions.gnome.org/extension/545/hide-top-bar/" target="_blank">Hide Tob Bar</a> very welcome.  I have it set to auto hide and only show when the mouse approaches it.</p>
<p><strong><a href="https://extensions.gnome.org/extension/690/easyscreencast/" target="_blank">EasyScreenCast</a></strong></p>
<p>Gnome Shell as screen casting software built in so you can record your desktop using <code>Control+Shift+Alt+R</code>.  Rather than have to remember that keyboard combo, EasyScreenCast gives you and indicator to control the recording.</p>
<p>EasyScreenCast seems to work really well and uses the <a href="http://www.webmproject.org/" target="_blank">webm codec</a> by default, so you can just upload that straight to YouTube.</p>
<h3 id="Extensions_to_look_at_later">Extensions to look at later</h3>
<p><a href="https://extensions.gnome.org/extension/719/fast-user-switch/" target="_blank">Fast user switch</a> - enables you to switch users without having to go via gdm</p>
<p><a href="https://extensions.gnome.org/extension/584/taskbar/" target="_blank">Task bar</a> - displays icons of running applications on the top panel.  If I run more than one app per desktop this may be useful.</p>
<p><a href="https://extensions.gnome.org/extension/508/uptime-indicator/" target="_blank">Uptime indicator</a> - shows how long in minutes it has been since the last boot.  Clicking on the indicator shows you the time Ubuntu Gnome was started.</p>
<p><a href="https://extensions.gnome.org/extension/53/pomodoro/" target="_blank">Pomodoro time</a> - gives you a countdown to timebox work into 25 minute sessions. This pomodoro technique helps you concentrate on one task and get it done well.</p>
<p><a href="https://extensions.gnome.org/extension/11/monitor-status-indicator/" target="_blank">Monitor status indicator</a> - a short-cut for the display controls to quickly manage your display settings.  I had a few problems with a second monitor, not sure if its this extension of Gnome Shell.</p>
<h2 id="Summary">Summary</h2>
<p>I like Ubuntu Gnome and Gnome Shell enough to give it a try for a few more weeks until the final versions of <a href="http://www.ubuntu.com/" target="_blank">Ubuntu</a> and <a href="http://ubuntugnome.org/" target="_blank">Ubuntu Gnome</a> are released. My Lenovo X201T is my spare laptop, so it doesn’t matter if something breaks, I can still do work on my my Lenovo X1 carbon, running Ubuntu.</p>
<p>Things in Ubuntu Gnome are changing quite a bit and there is a tendency for Gnome Shell extensions to break with new releases.  To see what is coming next have a look at the <a href="http://www.omgubuntu.co.uk/2013/09/10-best-features-gnome-3-10" target="_blank">Gnome 3.10 features and changes</a>.</p>
<p>One thing that may make a difference is that both distributions will be replacing X windows.  Ubuntu has created <a href="https://wiki.ubuntu.com/Mir/" target="_blank">Mir</a> and the Gnome project is behind <a href="https://wiki.gnome.org/Wayland" target="_blank">Wayland</a>.  Its going to be interesting to see which approach works out best over the next few releases.</p>
<blockquote><p>I did try <a href="https://www.archlinux.org/" target="_blank">Arch Linux</a> for a weekend and although there are some great things with the distribution, for now it just seems to eat too much time in setting everything up and learning the different tooling.  Although there is a lot of documentation, I found myself having to read pages and pages of content and not always finding the answers I was looking for.</p>
</blockquote>


<h2 id="6_month_later">6 month later</h2>
<p>I am still using Ubuntu as my prefered Linux distribution.  Gnome Shell has still a long way to come to offer the features I need and the extensions I want to use break to often to be fun fixing.</p>
<p>When Gnome Shell becomes more evolved and incorporates Wayland, then it will be time to give it another try and see how it stacks up to Ubuntu, Unity and Mir.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank">@jr0cket</a></p>
]]></content>
    <summary type="html"><![CDATA[<img src="http://www.gnome.org/wp-content/themes/gnome-grass/images/gnome-logo.png" class="img-thumbnail">


<p>With a new version of <a href="http://www.ubuntu.com/" target="_blank">Ubuntu</a> this month, I asked myself if I would get more out of one of the many other Linux distributions.  Here is what I learnt.</p>
]]></summary>
    
      <category term="ubuntu" scheme="http://jr0cket.github.io/hexo-themes-test/tags/ubuntu/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.github.io/hexo-themes-test/categories/ubuntu/"/>
    
  </entry>
  
</feed>
